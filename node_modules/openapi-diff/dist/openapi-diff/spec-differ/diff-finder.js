"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiffFinder = void 0;
const find_diffs_in_paths_1 = require("./diff-finder/find-diffs-in-paths");
const find_diffs_in_x_properties_1 = require("./diff-finder/find-diffs-in-x-properties");
class DiffFinder {
    static findDifferences(specs) {
        return __awaiter(this, void 0, void 0, function* () {
            const topLevelXPropertiesDiffs = (0, find_diffs_in_x_properties_1.findDiffsInXProperties)(specs.sourceSpec.xProperties, specs.destinationSpec.xProperties, 'xProperties');
            const pathDiffs = yield (0, find_diffs_in_paths_1.findDiffsInPaths)(specs.sourceSpec.paths, specs.destinationSpec.paths);
            const allDiffs = [...topLevelXPropertiesDiffs, ...pathDiffs];
            return Promise.resolve(allDiffs);
        });
    }
}
exports.DiffFinder = DiffFinder;
