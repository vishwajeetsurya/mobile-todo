import GraphEdge from './GraphEdge';
import GraphVertex from './GraphVertex';
export default class Graph {
    vertices: Record<string, GraphVertex>;
    edges: Record<string, GraphEdge>;
    isDirected: boolean;
    /**
     * @param {boolean} isDirected
     */
    constructor(isDirected?: boolean);
    get vertexCount(): number;
    addVertex(newVertex: GraphVertex): Graph;
    getVertexByKey(vertexKey: string): GraphVertex | null;
    getNeighbors(vertex: GraphVertex): GraphVertex[];
    getAllVertices(): GraphVertex[];
    getAllEdges(): GraphEdge[];
    addEdge(edge: GraphEdge): Graph;
    deleteEdge(edge: GraphEdge): void;
    findEdge(startVertex: GraphVertex, endVertex: GraphVertex): GraphEdge | null;
    findVertexByKey(vertexKey: string): GraphVertex | null;
    getWeight(): number;
    /**
     * Reverse all the edges in directed graph.
     */
    reverse(): Graph;
    getVerticesIndices(): Record<string, number>;
    getAdjacencyMatrix(): number[][];
    toString(): string;
}
