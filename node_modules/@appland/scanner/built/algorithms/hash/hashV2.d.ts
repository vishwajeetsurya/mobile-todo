import { Event } from '@appland/models';
/**
 * Captures stack entries from distinct packages. Ancestors of the event are traversed up to the
 * command or root. Then, starting from the command or root, subsequent events which come from the
 * same package as their preceding event are removed. Then the last N entries remaining in the
 * stack are collected.
 *
 * @param event leaf event
 * @param participatingEvents output collector
 * @param depth number of events to include in the output
 */
export declare function captureStack(event: Event, depth?: number): Event[];
/**
 * Builds a hash (digest) of a finding. The digest is constructed by first building a canonical
 * string of the finding, of the form:
 *
 * ```
 * [
 *   algorithmVersion=2
 *   rule=<rule-id>
 *   findingEvent.<property1>=value1
 *   ...
 *   findingEvent.<propertyN>=valueN
 *   participatingEvent.<eventName1>=value1
 *   ...
 *   participatingEvent.<eventName1>=valueN
 *   ...
 *   participatingEvent.<eventNameN>=value1
 *   ...
 *   participatingEvent.<eventNameN>=valueN
 *   stack[1]=value1
 *   ...
 *   stack[1]=valueN
 *   ...
 *   stack[3]=value1
 *   ...
 *   stack[3]=valueN
 * ]
 * ```
 *
 * Participating events are sorted by the event name. Properties of each event are sorted by
 * the property name. Event properties are provided by `Event#stableProperties`.
 *
 * The partial stack included in the finding hash removes subsequent function calls from the
 * same package.
 */
export default class HashV2 {
    private hashEntries;
    private hash;
    constructor(ruleId: string, findingEvent: Event, participatingEvents: Record<string, Event>);
    get canonicalString(): string;
    digest(): string;
}
