/// <reference types="node" />
import { TelemetryClient } from 'applicationinsights';
import { PathLike } from 'fs';
declare class Session {
    id: string;
    expiration: number;
    constructor();
    static beyondExpiration(expiration: number): boolean;
    static expirationFromNow(): number;
    static newSessionId(): string;
    touch(): void;
    get valid(): boolean;
}
export interface TelemetryData {
    name: string;
    properties?: Record<string, string | undefined>;
    metrics?: Record<string, number | undefined>;
}
export interface TelemetryOptions {
    includeEnvironment: boolean;
}
export default class Telemetry {
    private static _session?;
    private static _client?;
    private static debug;
    static readonly machineId: string;
    static get enabled(): boolean;
    static get session(): Session;
    static get client(): TelemetryClient;
    static sendEvent(data: TelemetryData, options?: TelemetryOptions): void;
    static flush(exitCB: () => unknown): void;
}
export declare enum GitState {
    NotInstalled = 0,
    NoRepository = 1,
    Ok = 2
}
export declare const GitRepositoryEnvKeys: readonly ["GITHUB_REPOSITORY", "CIRCLE_REPOSITORY_URL", "GIT_URL", "CI_REPOSITORY_URL"];
export declare const GitBranchEnvKeys: readonly ["GITHUB_REF_NAME", "CIRCLE_BRANCH", "GIT_BRANCH", "TRAVIS_BRANCH", "CI_COMMIT_REF_NAME"];
export declare const GitCommitEnvKeys: readonly ["GITHUB_SHA", "CIRCLE_SHA1", "GIT_COMMIT", "TRAVIS_COMMIT", "CI_COMMIT_SHA"];
declare class GitProperties {
    static contributors(sinceDaysAgo: number, cwd?: PathLike): Promise<Array<string>>;
    static repository(cwd?: PathLike): Promise<string | undefined>;
    static branch(cwd?: PathLike): Promise<string | undefined>;
    static commit(cwd?: PathLike): Promise<string | undefined>;
    static state(cwd?: PathLike): Promise<GitState>;
    static clearCache(): void;
}
export declare const Git: typeof GitProperties;
export {};
