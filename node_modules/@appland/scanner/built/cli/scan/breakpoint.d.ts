import { AppMap } from '@appland/client';
import { Event } from '@appland/models';
import Check from '../../check';
import { MatchResult } from '../../types';
export declare type ExecutionContext = {
    counter: number;
    depth: number;
    eventName: string;
    appMap?: AppMap;
    appMapFileName?: string;
    check?: Check;
    event?: Event;
    matchResult?: string | boolean | MatchResult[];
};
export interface Breakpoint {
    condition: (context: ExecutionContext) => boolean;
}
export declare class BreakOnCounter implements Breakpoint {
    private readonly counter;
    constructor(counter: number);
    condition(context: ExecutionContext): boolean;
    toString(): string;
}
export declare class BreakOnEvent implements Breakpoint {
    eventName: RegExp;
    constructor(eventName: string);
    condition(context: ExecutionContext): boolean;
    toString(): string;
}
export declare class BreakOnLabel implements Breakpoint {
    label: RegExp;
    constructor(label: string);
    condition(context: ExecutionContext): boolean;
    toString(): string;
}
export declare class BreakOnCodeObject implements Breakpoint {
    codeObject: RegExp;
    constructor(codeObject: string);
    condition(context: ExecutionContext): boolean;
    toString(): string;
}
