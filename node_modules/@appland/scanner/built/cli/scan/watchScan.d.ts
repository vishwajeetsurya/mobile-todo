/// <reference types="node" />
import * as chokidar from 'chokidar';
import { TimestampedConfiguration } from '../../configuration/configurationProvider';
import EventEmitter from 'events';
export declare type WatchScanOptions = {
    appId?: string;
    appmapDir: string;
    configFile: string;
};
declare module 'async' {
    interface QueueObject<T> {
        [Symbol.iterator](): Iterator<T>;
    }
}
export declare class Watcher {
    private options;
    config?: TimestampedConfiguration;
    appmapWatcher?: chokidar.FSWatcher;
    appmapPoller?: chokidar.FSWatcher;
    configWatcher?: chokidar.FSWatcher;
    scanEventEmitter: EventEmitter;
    constructor(options: WatchScanOptions);
    watch(): Promise<void>;
    isError(error: unknown, code: string): boolean;
    watcherErrorFunction(error: Error): Promise<void>;
    close(): Promise<void>;
    private queue;
    private processing;
    protected enqueue(mtimePath: string): void;
    protected scan(mtimePath: string): Promise<void>;
    protected reloadConfig(): Promise<void>;
}
export default function watchScan(options: WatchScanOptions): Promise<void>;
