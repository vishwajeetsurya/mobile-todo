/// <reference types="node" />
import { AppMap, Event } from '@appland/models';
import EventEmitter from 'events';
import AppMapIndex from '../../../appMapIndex';
import Check from '../../../check';
import ProgressReporter from '../../../progressReporter';
import { MatchResult } from '../../../types';
import { ScopeName } from '../../../index';
import { Breakpoint } from '../breakpoint';
declare type ContextVariables = {
    event?: Event;
    matchResult?: string | boolean | MatchResult[];
};
export default class InteractiveProgress extends EventEmitter implements ProgressReporter {
    breakpoints: Breakpoint[];
    depth: number;
    counter: number;
    appMap?: AppMap;
    appMapFileName?: string;
    check?: Check;
    scope?: Event;
    event?: Event;
    breakpointResolver?: () => void;
    constructor();
    initialize(): void;
    addBreakpoint(breakpoint: Breakpoint): void;
    removeBreakpoint(breakpoint: Breakpoint): void;
    get prefix(): string;
    resume(): void;
    breakOn(eventName: string, variables: ContextVariables): Promise<void>;
    beginAppMap(appMapFileName: string, appMap: AppMap): Promise<void>;
    beginCheck(check: Check): Promise<void>;
    filterScope(scopeName: ScopeName, scope: Event): Promise<void>;
    enterScope(scope: Event): Promise<void>;
    filterEvent(event: Event): Promise<void>;
    matchResult(event: Event, matchResult: string | boolean | MatchResult[] | undefined): Promise<void>;
    matchEvent(event: Event, _appMapIndex: AppMapIndex): Promise<void>;
    leaveScope(): Promise<void>;
    endCheck(): Promise<void>;
    endAppMap(): Promise<void>;
}
export {};
