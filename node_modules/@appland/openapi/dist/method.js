"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const response_1 = __importDefault(require("./response"));
const rpcRequest_1 = require("./rpcRequest");
const objectSchema_1 = __importDefault(require("./objectSchema"));
const util_1 = require("./util");
const Warnings_1 = __importDefault(require("./Warnings"));
const bodyParamMethods = new Set(['options', 'put', 'post', 'patch']);
function openapiIn(rpcRequest, name) {
    const pathInfo = rpcRequest.requestPath;
    // Trim format info from Rails paths, e.g. /foo/bar(.:format)
    const tokens = pathInfo.split('/').map((token) => token.split('(')[0]);
    // Recognize Rails-style normalized paths /org/:org_id and OpenAPI-style paths /org/{org_id}
    if (tokens.includes(`:${name}`) || tokens.includes(`{${name}}`)) {
        return 'path';
    }
    return 'query';
}
class Method {
    constructor() {
        this.rpcRequests = [];
        this.responses = {};
        this.warnings = new Warnings_1.default();
    }
    get containedWarningProviders() {
        return Object.values(this.responses);
    }
    get summaries() {
        return this.rpcRequests
            .map((request) => (0, rpcRequest_1.headerValue)(request.responseHeaders, 'x-openapi-summary'))
            .filter(Boolean);
    }
    openapi() {
        const responseByStatus = Object.keys(this.responses)
            .sort()
            .reduce((memo, status) => {
            // eslint-disable-next-line no-param-reassign
            memo[status] = this.responses[status].openapi();
            return memo;
        }, {});
        const schemata = {};
        const parameters = [];
        let securitySchemeId;
        const uniqueNames = new Set(['controller', 'action', '_method']);
        this.rpcRequests.forEach((rpcRequest) => {
            const messages = rpcRequest.parameters;
            if (!securitySchemeId) {
                const authorization = rpcRequest.requestHeaders['Authorization'];
                if (authorization) {
                    const scheme = (0, util_1.parseScheme)(authorization);
                    securitySchemeId = scheme.schemeId;
                }
            }
            let schema;
            if (rpcRequest.requestContentType) {
                const mimeType = rpcRequest.requestContentType.split(';')[0];
                if (!schemata[mimeType]) {
                    schemata[mimeType] = new objectSchema_1.default();
                }
                schema = schemata[mimeType];
            }
            messages.forEach((message) => {
                if (!message.name) {
                    return;
                }
                if (uniqueNames.has(message.name)) {
                    return;
                }
                uniqueNames.add(message.name);
                const inLocation = openapiIn(rpcRequest, message.name);
                if (inLocation !== 'path' &&
                    rpcRequest.requestMethod &&
                    bodyParamMethods.has(rpcRequest.requestMethod)) {
                    if (schema) {
                        schema.addExample(message);
                    }
                }
                else {
                    const schema = (0, util_1.messageToOpenAPISchema)(message);
                    if (!schema)
                        return;
                    const parameter = {
                        name: message.name,
                        in: inLocation,
                        schema,
                    };
                    if (parameter.in === 'path') {
                        parameter.required = true;
                    }
                    parameters.push(parameter);
                }
            });
        });
        const response = {
            responses: responseByStatus,
        };
        if (securitySchemeId) {
            const securityObj = {};
            securityObj[securitySchemeId] = [];
            response.security = [securityObj];
        }
        const mediaTypes = Object.keys(schemata)
            .sort()
            .map((contentType) => ({
            contentType,
            schema: schemata[contentType].schema(),
        }))
            .filter((entry) => entry.schema);
        if (mediaTypes.length > 0) {
            const content = mediaTypes.reduce((memo, entry) => {
                memo[entry.contentType] = { schema: entry.schema };
                return memo;
            }, {});
            response.requestBody = { content };
        }
        if (parameters.length > 0) {
            response.parameters = parameters.sort((a, b) => a.name.localeCompare(b.name));
        }
        const summaryFrequency = new Map();
        this.summaries.forEach((summary) => summaryFrequency.set(summary, (summaryFrequency.get(summary) || 0) + 1));
        if (summaryFrequency.size > 0) {
            response.summary = [...summaryFrequency.keys()].sort(
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            (a, b) => summaryFrequency.get(b) - summaryFrequency.get(a))[0];
        }
        return response;
    }
    addRpcRequest(request) {
        const { status } = request;
        const statusError = () => {
            if (!status)
                return `Missing or undefined HTTP status code`;
            if (status < 100 || status >= 600)
                return `Invalid HTTP status code: ${status}`;
        };
        const error = statusError();
        if (error) {
            this.warnings.add((0, rpcRequest_1.routeId)(request), error);
            return;
        }
        if (!this.responses[status]) {
            this.responses[status] = new response_1.default(status);
        }
        this.rpcRequests.push(request);
        const responseObj = this.responses[status];
        responseObj.addRpcRequest(request);
    }
}
exports.default = Method;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0aG9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL21ldGhvZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLDBEQUFrQztBQUNsQyw2Q0FBZ0U7QUFDaEUsa0VBQTBDO0FBQzFDLGlDQUE2RDtBQUM3RCwwREFBdUQ7QUFFdkQsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFFdEUsU0FBUyxTQUFTLENBQUMsVUFBc0IsRUFBRSxJQUFZO0lBQ3JELE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUM7SUFDeEMsNkRBQTZEO0lBQzdELE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkUsNEZBQTRGO0lBQzVGLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksR0FBRyxDQUFDLEVBQUU7UUFDL0QsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUNELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxNQUFxQixNQUFNO0lBQTNCO1FBQ0UsZ0JBQVcsR0FBaUIsRUFBRSxDQUFDO1FBQy9CLGNBQVMsR0FBNkIsRUFBRSxDQUFDO1FBQ3pDLGFBQVEsR0FBRyxJQUFJLGtCQUFRLEVBQUUsQ0FBQztJQWlKNUIsQ0FBQztJQS9JQyxJQUFJLHlCQUF5QjtRQUMzQixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxJQUFJLFNBQVM7UUFD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