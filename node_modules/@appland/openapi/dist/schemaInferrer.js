"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeType = exports.isAmbiguousArray = exports.mergeItems = void 0;
const util_1 = require("./util");
function mergeProperties(props1, props2) {
    const a = props1 || {};
    const b = props2 || {};
    const result = {};
    const props = new Set([...Object.keys(a), ...Object.keys(b)]);
    for (const key of props) {
        const merged = mergeType(a[key], b[key]);
        if (merged)
            result[key] = merged;
    }
    return result;
}
const uniqueObjects = (array) => {
    return [
        ...new Map(array.map((item) => [
            item.type || item.$ref,
            item,
        ])).values(),
    ];
};
function mergeItems(array1, array2) {
    const a = array1 || { type: 'array', items: {} };
    const b = array2 || { type: 'array', items: {} };
    if (a === b)
        return a;
    if (a.items.$ref || b.items.$ref) {
        console.warn('Cannot merge array items with references');
        return a;
    }
    const isAmbiguousArrayA = isAmbiguousArray(a);
    const isAmbiguousArrayB = isAmbiguousArray(b);
    if (isAmbiguousArrayA && isAmbiguousArrayB)
        return a;
    if (isAmbiguousArrayB && !isAmbiguousArrayA)
        return a;
    if (isAmbiguousArrayA && !isAmbiguousArrayB)
        return b;
    const { items: itemsA } = a;
    const { items: itemsB } = b;
    if (itemsA.type === 'object' && itemsB.type === 'object') {
        // TODO
        // Note that this means we do not support mixed object types in arrays.
        // They'll all be merged into a single type.
        return Object.assign(Object.assign({}, a), { items: Object.assign({}, mergeType(itemsA, itemsB)) });
    }
    if (itemsA.anyOf && itemsB.anyOf) {
        return Object.assign(Object.assign({}, a), { items: {
                anyOf: uniqueObjects(itemsA.anyOf.concat(itemsB.anyOf)),
            } });
    }
    if (itemsA.anyOf) {
        return Object.assign(Object.assign({}, a), { items: {
                anyOf: uniqueObjects(itemsA.anyOf.concat(itemsB)),
            } });
    }
    if (itemsB.anyOf) {
        return Object.assign(Object.assign({}, a), { items: {
                anyOf: uniqueObjects(itemsB.anyOf.concat(itemsA)),
            } });
    }
    if (itemsA.type === itemsB.type) {
        return a;
    }
    return Object.assign(Object.assign({}, a), { items: {
            anyOf: uniqueObjects([itemsA, itemsB]),
        } });
}
exports.mergeItems = mergeItems;
function isAmbiguousArray(schema) {
    if (schema.type === 'array') {
        return !schema.items || Object.keys(schema.items).length === 0;
    }
    return false;
}
exports.isAmbiguousArray = isAmbiguousArray;
// Merge type, items and properties of schema objects.
function mergeType(a, b) {
    if (!b)
        return a;
    if (!a)
        return b;
    if (b.type !== a.type)
        return a;
    if (a.type === 'array' && b.type === 'array') {
        const merged = mergeItems(a, b);
        if (merged)
            return merged;
    }
    if ('properties' in a && 'properties' in b) {
        return Object.assign(Object.assign({}, a), { properties: mergeProperties(a.properties, b.properties) });
    }
    return a;
}
exports.mergeType = mergeType;
class SchemaInferrer {
    constructor() {
        this.examples = [];
    }
    openapi() {
        const schemas = this.examples.map(util_1.messageToOpenAPISchema).filter(Boolean);
        if (schemas.length === 0)
            return;
        return schemas.reduce(mergeType);
    }
    addExample(value) {
        this.examples.push(value);
    }
}
exports.default = SchemaInferrer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hSW5mZXJyZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc2NoZW1hSW5mZXJyZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsaUNBQWdEO0FBSWhELFNBQVMsZUFBZSxDQUFDLE1BQW1CLEVBQUUsTUFBbUI7SUFDL0QsTUFBTSxDQUFDLEdBQUcsTUFBTSxJQUFJLEVBQUUsQ0FBQztJQUN2QixNQUFNLENBQUMsR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDO0lBRXZCLE1BQU0sTUFBTSxHQUFlLEVBQUUsQ0FBQztJQUM5QixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlELEtBQUssTUFBTSxHQUFHLElBQUksS0FBSyxFQUFFO1FBQ3ZCLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDekMsSUFBSSxNQUFNO1lBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQztLQUNsQztJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFFRCxNQUFNLGFBQWEsR0FBRyxDQUNwQixLQUE2RCxFQUNMLEVBQUU7SUFDMUQsT0FBTztRQUNMLEdBQUcsSUFBSSxHQUFHLENBQ1IsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUM7WUFDakIsSUFBK0IsQ0FBQyxJQUFJLElBQUssSUFBa0MsQ0FBQyxJQUFJO1lBQ2pGLElBQUk7U0FDTCxDQUFDLENBQ0gsQ0FBQyxNQUFNLEVBQUU7S0FDWCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsU0FBZ0IsVUFBVSxDQUN4QixNQUFvQyxFQUNwQyxNQUFv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