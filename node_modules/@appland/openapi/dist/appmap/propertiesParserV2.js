"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schemaInferrer_1 = require("../schemaInferrer");
const util_1 = require("../util");
const mergeReducer = (acc, obj) => (0, schemaInferrer_1.mergeType)(obj, acc) || acc || acc;
function parseProperty(paramProperty) {
    const type = (0, util_1.classNameToOpenAPIType)(paramProperty.class);
    if (type === undefined)
        return undefined;
    if (paramProperty.items) {
        return parseArrayProperties(paramProperty.items);
    }
    if (type === 'array') {
        // If we made it here, we're an array with no additional information.
        return { type: 'array', items: {} };
    }
    if (paramProperty.properties) {
        return parseObjectProperties(paramProperty.properties);
    }
    // `type` should be an expected value, but TypeScript doesn't know that. Maybe there's
    // a smarter cast we can do here, but it's beyond me at the moment.
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-explicit-any
    return { type: type };
}
function parseArrayProperties(paramProperties) {
    const itemArray = paramProperties.map(parseProperty).filter(Boolean);
    if (itemArray.length === 0)
        return { type: 'array', items: {} };
    else if (itemArray.length === 1)
        return { type: 'array', items: itemArray[0] };
    const primitiveTypes = new Set(itemArray
        .filter((item) => item.type && item.type !== 'object' && item.type !== 'array')
        .map(({ type }) => type));
    const primitives = Array.from(primitiveTypes).map((type) => ({
        type,
    }));
    const mergedArrays = itemArray
        .filter((item) => item.type === 'array')
        .reduce(mergeReducer, { items: {} });
    const mergedObject = itemArray
        .filter((item) => item.type === 'object')
        .reduce(mergeReducer, {});
    const allMergedItems = [...primitives, mergedArrays, mergedObject].filter((item) => item && item.type);
    if (allMergedItems.length === 0) {
        return { type: 'array', items: {} };
    }
    if (allMergedItems.length === 1) {
        return { type: 'array', items: allMergedItems[0] };
    }
    return { type: 'array', items: { anyOf: allMergedItems } };
}
function parseObjectProperties(paramProperties) {
    const properties = paramProperties.filter(Boolean).reduce((memo, msgProperty) => {
        const property = parseProperty(msgProperty);
        if (property)
            memo[msgProperty.name] = property;
        return memo;
    }, {});
    return { type: 'object', properties };
}
class PropertiesParser {
    static canParse(example) {
        var _a;
        if (!example.properties)
            return true;
        const properties = [...example.properties, example];
        while (properties.length) {
            const property = properties.pop();
            if (!property)
                continue;
            const type = (0, util_1.classNameToOpenAPIType)(property.class);
            if (!type)
                continue;
            if (type === 'array' && property.items === undefined)
                return false;
            if (property.name === undefined)
                return true;
            if (property.class === undefined)
                return false;
            if (property.items !== undefined)
                return true;
            (_a = property.properties) === null || _a === void 0 ? void 0 : _a.forEach((p) => properties.push(p));
        }
        return false;
    }
    static parse(example) {
        return parseProperty(example);
    }
}
exports.default = PropertiesParser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydGllc1BhcnNlclYyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwcG1hcC9wcm9wZXJ0aWVzUGFyc2VyVjIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFJQSxzREFBMEQ7QUFDMUQsa0NBQWlEO0FBRWpELE1BQU0sWUFBWSxHQUFHLENBQUMsR0FBMkIsRUFBRSxHQUEyQixFQUFFLEVBQUUsQ0FDaEYsSUFBQSwwQkFBUyxFQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDO0FBRXBDLFNBQVMsYUFBYSxDQUFDLGFBQWdDO0lBQ3JELE1BQU0sSUFBSSxHQUFHLElBQUEsNkJBQXNCLEVBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pELElBQUksSUFBSSxLQUFLLFNBQVM7UUFBRSxPQUFPLFNBQVMsQ0FBQztJQUV6QyxJQUFJLGFBQWEsQ0FBQyxLQUFLLEVBQUU7UUFDdkIsT0FBTyxvQkFBb0IsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDbEQ7SUFFRCxJQUFJLElBQUksS0FBSyxPQUFPLEVBQUU7UUFDcEIscUVBQXFFO1FBQ3JFLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQztLQUNyQztJQUVELElBQUksYUFBYSxDQUFDLFVBQVUsRUFBRTtRQUM1QixPQUFPLHFCQUFxQixDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUN4RDtJQUVELHNGQUFzRjtJQUN0RixtRUFBbUU7SUFDbkUsdUdBQXVHO0lBQ3ZHLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBVyxFQUFFLENBQUM7QUFDL0IsQ0FBQztBQUVELFNBQVMsb0JBQW9CLENBQzNCLGVBQWlEO0lBRWpELE1BQU0sU0FBUyxHQUFHLGVBQWUsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBNkIsQ0FBQztJ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