"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
class PropertiesParser {
    static canParse() {
        // We should be evaluating whether or not parsers can parse the example in reverse order.
        // This is the original implementation, so there's no other options. We're the last stand!
        return true;
    }
    static parse(example) {
        const type = (0, util_1.classNameToOpenAPIType)(example.class);
        if (type === undefined)
            return;
        if (example.properties) {
            const properties = example.properties.filter(Boolean).reduce((memo, msgProperty) => {
                // This guard clause is new. It's not in the original implementation. It also shouldn't be
                // necessary, as properties without a name should have been parsed by another parser.
                if (!msgProperty.name)
                    return memo;
                const type = (0, util_1.classNameToOpenAPIType)(msgProperty.class);
                if (type === 'array') {
                    let schema;
                    if (msgProperty.properties) {
                        // eslint-disable-next-line no-param-reassign
                        schema = this.parse(msgProperty);
                    }
                    if (schema) {
                        memo[msgProperty.name] = schema;
                    }
                    else {
                        memo[msgProperty.name] = { type, items: {} };
                    }
                }
                else if (type === 'object' && msgProperty.properties) {
                    // eslint-disable-next-line no-param-reassign
                    const schema = this.parse(msgProperty);
                    if (schema) {
                        memo[msgProperty.name] = schema;
                    }
                    else {
                        memo[msgProperty.name] = { type };
                    }
                }
                else if (type) {
                    // eslint-disable-next-line no-param-reassign
                    memo[msgProperty.name] = {
                        type,
                    };
                }
                return memo;
            }, {});
            if (type === 'array') {
                return { type: 'array', items: { type: 'object', properties } };
            }
            else {
                return { type: 'object', properties };
            }
        }
        else {
            if (type === 'array') {
                return { type: 'array', items: { type: 'string' } };
            }
        }
        return { type };
    }
}
exports.default = PropertiesParser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydGllc1BhcnNlclYxLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwcG1hcC9wcm9wZXJ0aWVzUGFyc2VyVjEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSxrQ0FBaUQ7QUFFakQsTUFBcUIsZ0JBQWdCO0lBQ25DLE1BQU0sQ0FBQyxRQUFRO1FBQ2IseUZBQXlGO1FBQ3pGLDBGQUEwRjtRQUMxRixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQXNCO1FBQ2pDLE1BQU0sSUFBSSxHQUFHLElBQUEsNkJBQXNCLEVBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25ELElBQUksSUFBSSxLQUFLLFNBQVM7WUFBRSxPQUFPO1FBRS9CLElBQUksT0FBTyxDQUFDLFVBQVUsRUFBRTtZQUN0QixNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLEVBQUU7Z0JBQ2pGLDBGQUEwRjtnQkFDMUYscUZBQXFGO2dCQUNyRixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUk7b0JBQUUsT0FBTyxJQUFJLENBQUM7Z0JBRW5DLE1BQU0sSUFBSSxHQUFHLElBQUEsNkJBQXNCLEVBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN2RCxJQUFJLElBQUksS0FBSyxPQUFPLEVBQUU7b0JBQ3BCLElBQUksTUFBTSxDQUFDO29CQUNYLElBQUksV0FBVyxDQUFDLFVBQVUsRUFBRTt3QkFDMUIsNkNBQTZDO3dCQUM3QyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztxQkFDbEM7b0JBQ0QsSUFBSSxNQUFNLEVBQUU7d0JBQ1YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUM7cUJBQ2pDO3lCQUFNO3dCQUNMLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBaUMsQ0FBQztxQkFDN0U7aUJBQ0Y7cUJBQU0sSUFBSSxJQUFJLEtBQUssUUFBUSxJQUFJLFdBQVcsQ0FBQyxVQUFVLEVBQUU7b0JBQ3RELDZDQUE2QztvQkFDN0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztvQkFDdkMsSUFBSSxNQUFNLEVBQUU7d0JBQ1YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUM7cUJBQ2pDO3lCQUFNO3dCQUNMLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQztxQkFDbkM7aUJBQ0Y7cUJBQU0sSUFBSSxJQUFJLEVBQUU7b0JBQ2YsNkNBQTZDO29CQUM3QyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHO3dCQUN2QixJQUFJO3FCQUNMLENBQUM7aUJBQ0g7Z0JBQ0QsT0FBTyxJQUFJLENBQUM7WUFDZCxDQUFDLEVBQUUsRUFBa0YsQ0FBQyxDQUFDO1lBQ3ZGLElBQUksSUFBSSxLQUFLLE9BQU8sRUFBRTtnQkFDcEIsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsRUFBRSxDQUFDO2FBQ2pFO2lCQUFNO2dCQUNMLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxDQUFDO2FBQ3ZDO1NBQ0Y7YUFBTTtZQUNMLElBQUksSUFBSSxLQUFLLE9BQU8sRUFBRTtnQkFDcEIsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUM7YUFDckQ7U0FDRjtRQUVELE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUNsQixDQUFDO0NBQ0Y7QUExREQsbUNBMERDIn0=