"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseScheme = exports.messageToOpenAPISchema = exports.ensureString = exports.classNameToOpenAPIType = exports.verbose = void 0;
const appmap_1 = require("./appmap");
const unrecognizedTypes = new Set();
function parseScheme(authorization) {
    const tokens = authorization.split(/\s/);
    if (tokens.length === 1) {
        return {
            schemeId: 'api_key',
            scheme: {
                type: 'apiKey',
                name: 'authorization',
                in: 'header',
            },
        };
    }
    const schemeId = tokens[0].toLowerCase();
    return {
        schemeId,
        scheme: {
            type: 'http',
            scheme: schemeId,
        },
    };
}
exports.parseScheme = parseScheme;
function classNameToOpenAPIType(className, options = {}) {
    if (!className || className === '')
        return;
    if (unrecognizedTypes.has(className))
        return 'object';
    const mapRubyType = (t) => {
        switch (t) {
            case 'array':
            case 'sequel::postgres::pgarray':
                return 'array';
            case 'hash':
            case 'sequel::postgres::jsonbhash':
            case 'activesupport::hashwithindifferentaccess':
                return 'object';
            case 'integer':
                return 'integer';
            case 'float':
            case 'numeric':
                return 'number';
            case 'trueclass':
            case 'falseclass':
                return 'boolean';
            case 'nilclass':
                return 'unknown';
            case 'string':
                return 'string';
        }
    };
    const mapPythonType = (t) => {
        if (!t.startsWith('builtins.')) {
            return;
        }
        switch (t.substring(9)) {
            case 'bool':
                return 'boolean';
            case 'dict':
                return 'object';
            case 'int':
                return 'integer';
            case 'list':
                return 'array';
            case 'str':
                return 'string';
            case 'nonetype':
                return 'unknown';
        }
    };
    const mapJavaType = (t) => {
        switch (t) {
            case 'java.lang.string':
                return 'string';
        }
    };
    const mapper = (t) => mapRubyType(t) || mapPythonType(t) || mapJavaType(t);
    const mapped = mapper(className.toLowerCase());
    if (!mapped) {
        if (options.strict) {
            return;
        }
        if (!unrecognizedTypes.has(className)) {
            if (verbose()) {
                console.warn(`Warning: Don't know how to map "${className}" to an OpenAPI type. You'll need to update the generated file.`);
            }
            unrecognizedTypes.add(className);
            return 'object';
        }
    }
    return mapped === 'unknown' ? undefined : mapped;
}
exports.classNameToOpenAPIType = classNameToOpenAPIType;
function messageToOpenAPISchema(example) {
    return (0, appmap_1.parse)(example);
}
exports.messageToOpenAPISchema = messageToOpenAPISchema;
function ensureString(value) {
    if (Array.isArray(value)) {
        return value.join('');
    }
    return value.toString();
}
exports.ensureString = ensureString;
let isVerbose = false;
function verbose(v) {
    if (v !== undefined) {
        isVerbose = v;
    }
    return isVerbose;
}
exports.verbose = verbose;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHFDQUFnRDtBQUVoRCxNQUFNLGlCQUFpQixHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7QUFPcEMsU0FBUyxXQUFXLENBQUMsYUFBcUI7SUFDeEMsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ3ZCLE9BQU87WUFDTCxRQUFRLEVBQUUsU0FBUztZQUNuQixNQUFNLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsSUFBSSxFQUFFLGVBQWU7Z0JBQ3JCLEVBQUUsRUFBRSxRQUFRO2FBQ3FCO1NBQ3BDLENBQUM7S0FDSDtJQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN6QyxPQUFPO1FBQ0wsUUFBUTtRQUNSLE1BQU0sRUFBRTtZQUNOLElBQUksRUFBRSxNQUFNO1lBQ1osTUFBTSxFQUFFLFFBQVE7U0FDZTtLQUNsQyxDQUFDO0FBQ0osQ0FBQztBQStHc0Usa0NBQVc7QUFyR2xGLFNBQVMsc0JBQXNCLENBQzdCLFNBQWtCLEVBQ2xCLFVBQXlDLEVBQUU7SUFFM0MsSUFBSSxDQUFDLFNBQVMsSUFBSSxTQUFTLEtBQUssRUFBRTtRQUFFLE9BQU87SUFDM0MsSUFBSSxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDO1FBQUUsT0FBTyxRQUFRLENBQUM7SUFFdEQsTUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFTLEVBQTBCLEVBQUU7UUFDeEQsUUFBUSxDQUFDLEVBQUU7WUFDVCxLQUFLLE9BQU8sQ0FBQztZQUNiLEtBQUssMkJBQTJCO2dCQUM5QixPQUFPLE9BQU8sQ0FBQztZQUNqQixLQUFLLE1BQU0sQ0FBQztZQUNaLEtB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