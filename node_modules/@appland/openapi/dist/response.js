"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const statusCodes_1 = __importDefault(require("./statusCodes"));
const schemaInferrer_1 = __importDefault(require("./schemaInferrer"));
const Warnings_1 = __importDefault(require("./Warnings"));
class Response {
    constructor(statusCode) {
        this.statusCode = statusCode;
        this.rpcRequests = [];
        this.warnings = new Warnings_1.default();
    }
    get containedWarningProviders() {
        return [];
    }
    openapi() {
        // eslint-disable-next-line arrow-body-style
        const contentTypes = () => {
            return this.rpcRequests
                .map((rpcRequest) => rpcRequest.responseContentType)
                .filter((ct) => !!ct)
                .map((ct) => ct.split(';')[0]);
        };
        const schemata = {};
        this.rpcRequests.forEach((rpcRequest) => {
            const returnValue = rpcRequest.returnValue;
            if (!returnValue)
                return;
            if (rpcRequest.responseContentType) {
                const mimeType = rpcRequest.responseContentType.split(';')[0];
                if (!schemata[mimeType]) {
                    schemata[mimeType] = new schemaInferrer_1.default();
                }
                schemata[mimeType].addExample(returnValue);
            }
        });
        const content = [...new Set(contentTypes())].sort().reduce((memo, mimeType) => {
            memo[mimeType] = {};
            if (!schemata[mimeType])
                return memo;
            // eslint-disable-next-line no-param-reassign
            const schema = schemata[mimeType].openapi();
            if (schema)
                memo[mimeType].schema = schema;
            return memo;
        }, {});
        return { content, description: statusCodes_1.default[this.statusCode] };
    }
    addRpcRequest(rpcRequest) {
        this.rpcRequests.push(rpcRequest);
    }
}
exports.default = Response;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcmVzcG9uc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxnRUFBd0M7QUFHeEMsc0VBQThDO0FBQzlDLDBEQUF1RDtBQUV2RCxNQUFxQixRQUFRO0lBSTNCLFlBQW1CLFVBQWtCO1FBQWxCLGVBQVUsR0FBVixVQUFVLENBQVE7UUFIckMsZ0JBQVcsR0FBaUIsRUFBRSxDQUFDO1FBQy9CLGFBQVEsR0FBYSxJQUFJLGtCQUFRLEVBQUUsQ0FBQztJQUVJLENBQUM7SUFFekMsSUFBSSx5QkFBeUI7UUFDM0IsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsT0FBTztRQUNMLDRDQUE0QztRQUM1QyxNQUFNLFlBQVksR0FBRyxHQUFHLEVBQUU7WUFDeEIsT0FBTyxJQUFJLENBQUMsV0FBVztpQkFDcEIsR0FBRyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUM7aUJBQ25ELE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBZ0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7aUJBQ2xDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25DLENBQUMsQ0FBQztRQUVGLE1BQU0sUUFBUSxHQUFtQyxFQUFFLENBQUM7UUFFcEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUN0QyxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDO1lBQzNDLElBQUksQ0FBQyxXQUFXO2dCQUFFLE9BQU87WUFFekIsSUFBSSxVQUFVLENBQUMsbUJBQW1CLEVBQUU7Z0JBQ2xDLE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzlELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7b0JBQ3ZCLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLHdCQUFjLEVBQUUsQ0FBQztpQkFDM0M7Z0JBQ0QsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUM1QztRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxPQUFPLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUU7WUFDNUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUVwQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztnQkFBRSxPQUFPLElBQUksQ0FBQztZQUVyQyw2Q0FBNkM7WUFDN0MsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzVDLElBQUksTUFBTTtnQkFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztZQUUzQyxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsRUFBRSxFQUErQyxDQUFDLENBQUM7UUFDcEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUscUJBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztJQUNoRSxDQUFDO0lBRUQsYUFBYSxDQUFDLFVBQXNCO1FBQ2xDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Q0FDRjtBQW5ERCwyQkFtREMifQ==