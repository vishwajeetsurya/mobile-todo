/// <reference types="node" />
import { IncomingHttpHeaders } from 'http';
import { RetryOptions } from './retryOptions';
import { ServiceEndpoint } from './configuration';
export declare const RetryCondition: Readonly<{
    Timeout(_response?: Response | undefined, error?: unknown): boolean;
    Status5xx(response?: Response | undefined): boolean | 0 | undefined;
}>;
export interface Response {
    readonly statusCode: number;
    readonly headers: IncomingHttpHeaders;
    readonly body: Buffer;
    readonly ok: boolean;
}
export interface RequestOptions {
    readonly service?: ServiceEndpoint;
    readonly path: string;
    readonly method?: string;
    readonly query?: ReadonlyArray<[string, string]>;
    readonly body?: string | Buffer | Uint8Array | Record<string, unknown>;
    readonly headers?: Record<string, string>;
    readonly authenticate?: boolean;
    readonly retry?: (RetryOptions & {
        readonly description: string;
    }) | false;
}
export default function makeRequest(options: RequestOptions): Promise<Response>;
