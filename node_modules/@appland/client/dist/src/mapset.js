"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const reportJson_1 = __importDefault(require("./reportJson"));
const get_1 = __importDefault(require("./get"));
const verbose_1 = __importDefault(require("./verbose"));
const retry_1 = __importDefault(require("./retry"));
const buildRequest_1 = __importDefault(require("./buildRequest"));
const retryOnError_1 = __importDefault(require("./retryOnError"));
const retryOn503_1 = __importDefault(require("./retryOn503"));
const handleError_1 = __importDefault(require("./handleError"));
class Mapset {
    constructor(app, id) {
        this.app = app;
        this.id = id;
    }
    async listAppMaps() {
        const requestPath = `api/mapsets?app=${this.app.fqname}&mapset=${this.id}`;
        return (0, get_1.default)(requestPath).then((response) => (0, reportJson_1.default)(response));
    }
    static async create(appId, appMapIds, options, retryOptions = {}) {
        if ((0, verbose_1.default)())
            console.log(`Creating mapset in app ${appId} with ${appMapIds.length} AppMaps`);
        const payload = JSON.stringify(Object.assign({ app: appId, appmaps: appMapIds }, options));
        async function makeRequest() {
            const retrier = (0, retry_1.default)(`Create Mapset`, retryOptions, makeRequest);
            const request = (0, buildRequest_1.default)('api/mapsets');
            return new Promise((resolve, reject) => {
                const interaction = request.requestFunction(request.url, {
                    method: 'POST',
                    headers: Object.assign({ 'Content-Type': 'application/json', 'Content-Length': Buffer.byteLength(payload) }, request.headers),
                }, resolve);
                interaction.on('error', (0, retryOnError_1.default)(retrier, resolve, reject));
                interaction.write(payload);
                interaction.end();
            }).then((0, retryOn503_1.default)(retrier));
        }
        return makeRequest()
            .then(handleError_1.default)
            .then((response) => (0, reportJson_1.default)(response));
    }
}
exports.default = Mapset;
//# sourceMappingURL=mapset.js.map