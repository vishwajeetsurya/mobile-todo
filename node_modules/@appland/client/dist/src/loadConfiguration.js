"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfiguration = exports.setConfiguration = exports.DefaultApiURL = exports.DefaultURL = void 0;
exports.DefaultURL = 'https://getappmap.com';
exports.DefaultApiURL = 'https://api.getappmap.com';
const DefaultConfiguration = {
    baseURL: exports.DefaultURL,
    apiURL: exports.DefaultApiURL,
};
class Settings {
    constructor() {
        this.baseURL = exports.DefaultURL;
        this.apiURL = exports.DefaultApiURL;
    }
}
function loadFromEnvironment() {
    const settings = new Settings();
    ['APPLAND_API_URL', 'APPMAP_API_URL'].forEach((key) => {
        const value = process.env[key];
        if (value)
            settings.apiURL = value;
    });
    ['APPLAND_URL', 'APPMAP_URL'].forEach((key) => {
        const value = process.env[key];
        if (value)
            settings.baseURL = value;
    });
    ['APPLAND_API_KEY', 'APPMAP_API_KEY'].forEach((key) => {
        const value = process.env[key];
        if (value)
            settings.apiKey = value;
    });
    return settings;
}
let configuration;
function setConfiguration(value) {
    configuration = Object.assign(Object.assign({}, DefaultConfiguration), value);
}
exports.setConfiguration = setConfiguration;
function loadConfiguration(requireApiKey = true) {
    if (configuration) {
        return configuration;
    }
    const settings = loadFromEnvironment();
    if (!settings.apiKey && requireApiKey) {
        throw new Error(`No API key available for AppMap server. Set environment variable APPMAP_API_KEY (preferred), or provide the API key as a command line argument`);
    }
    configuration = { baseURL: settings.baseURL, apiURL: settings.apiURL, apiKey: settings.apiKey };
    return configuration;
}
exports.default = loadConfiguration;
function getConfiguration() {
    return configuration;
}
exports.getConfiguration = getConfiguration;
//# sourceMappingURL=loadConfiguration.js.map