import AIClient, { Callbacks } from './aiClient';
export declare type Permissions = {
    useNavieAIProxy: boolean;
};
export declare type ConversationCount = {
    daysAgo: number;
    count: number;
};
export declare type Usage = {
    conversationCounts: ConversationCount[];
};
export declare type ModelParameters = {
    baseUrl?: string;
    model?: string;
    aiKeyName?: string;
};
export declare type ProjectDirectory = {
    hasAppMapConfig: boolean;
    language?: string;
};
export declare type ProjectParameters = {
    directoryCount: number;
    codeEditor?: string;
    directories: ProjectDirectory[];
};
export declare type CreateConversationThread = {
    modelParameters: ModelParameters;
    projectParameters: ProjectParameters;
};
export declare type ConversationThread = {
    id: string;
    permissions: Permissions;
    usage: Usage;
};
export declare type UserMessage = {
    id: string;
};
export declare type AgentMessage = {
    id: string;
};
export declare type Classification = {
    name: string;
    weight: string;
};
export declare type CreateUserMessage = {
    questionLength?: number;
    codeSelectionLength?: number;
};
export declare type UpdateUserMessage = {
    agentName?: string;
    classification?: Classification[];
};
export declare type CreateAgentMessage = Record<string, never>;
export declare type UpdateAgentMessage = {
    responseLength?: number;
    responseTime?: number;
};
export default class AI {
    static connect(callbacks: Callbacks): Promise<AIClient>;
    static createConversationThread(metadata: CreateConversationThread): Promise<ConversationThread>;
    static createUserMessage(threadId: string, metadata: CreateUserMessage): Promise<UserMessage>;
    static updateUserMessage(messageId: string, metadata: UpdateUserMessage): Promise<void>;
    static createAgentMessage(threadId: string, metadata: CreateAgentMessage): Promise<AgentMessage>;
    static updateAgentMessage(messageId: string, metadata: UpdateAgentMessage): Promise<void>;
    static sendMessageFeedback(messageId: string, sentiment: number): Promise<void>;
    protected static createMessage<T>(threadId: string, role: string, endpoint: string, metadata: T): Promise<Response>;
    protected static updateMessage<T>(messageId: string, role: string, endpoint: string, metadata: T): Promise<void>;
    protected static apiRequest<T>(method: string, description: string, urlPath: string, body?: T): Promise<Response>;
}
