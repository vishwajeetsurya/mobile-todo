"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const socket_io_client_1 = require("socket.io-client");
const aiClient_1 = __importDefault(require("./aiClient"));
const loadConfiguration_1 = require("./loadConfiguration");
// eslint-disable-next-line unicorn/no-static-only-class
class AI {
    static async connect(callbacks) {
        const configuration = (0, loadConfiguration_1.getConfiguration)();
        if (!configuration.apiKey) {
            throw new Error('Authentication required');
        }
        const socket = (0, socket_io_client_1.io)(configuration.apiURL.replace(/^http/, 'ws'), {
            transports: ['websocket'],
            path: '/v1/ai/conversation',
            reconnection: false,
            auth: {
                token: configuration.apiKey,
            },
        });
        return new Promise((resolve, reject) => {
            socket.on('connect', () => {
                resolve(new aiClient_1.default(socket, callbacks));
            });
            socket.on('connect_error', (error) => {
                reject(error);
            });
        });
    }
    static async createConversationThread(metadata) {
        const response = await this.apiRequest('POST', 'create conversation thread', 'v1/ai/conversation-threads', metadata);
        return response.json();
    }
    static async createUserMessage(threadId, metadata) {
        const response = await this.createMessage(threadId, 'user', 'user-messages', metadata);
        return response.json();
    }
    static async updateUserMessage(messageId, metadata) {
        await this.updateMessage(messageId, 'user', 'user-messages', metadata);
    }
    static async createAgentMessage(threadId, metadata) {
        const response = await this.createMessage(threadId, 'agent', 'agent-messages', metadata);
        return response.json();
    }
    static async updateAgentMessage(messageId, metadata) {
        await this.updateMessage(messageId, 'agent', 'agent-messages', metadata);
    }
    static async sendMessageFeedback(messageId, sentiment) {
        await this.apiRequest('POST', 'send feedback', `v1/ai/feedback`, { messageId, sentiment });
    }
    static async createMessage(threadId, role, endpoint, metadata) {
        return this.apiRequest('POST', `create ${role} message`, `v1/ai/${endpoint}`, {
            threadId,
            metadata,
        });
    }
    static async updateMessage(messageId, role, endpoint, metadata) {
        await this.apiRequest('PATCH', `update ${role} message`, `v1/ai/${endpoint}/${messageId}`, metadata);
    }
    static async apiRequest(method, description, urlPath, body) {
        const configuration = (0, loadConfiguration_1.getConfiguration)();
        if (!configuration.apiKey) {
            throw new Error('Authentication required');
        }
        const url = `${configuration.apiURL}/${urlPath}`;
        const headers = {
            Authorization: `Bearer ${configuration.apiKey}`,
            'Content-Type': 'application/json',
        };
        const options = {
            method,
            headers,
            body: body ? JSON.stringify(body) : undefined,
        };
        const response = await fetch(url, options);
        if (!response.ok) {
            let reason = '(unknown reason)';
            try {
                reason = await response.text();
            }
            catch (_a) {
                // Ignore errors from reading the response text
            }
            throw new Error(`Failed to ${description}: ${reason}`);
        }
        return response;
    }
}
exports.default = AI;
//# sourceMappingURL=ai.js.map