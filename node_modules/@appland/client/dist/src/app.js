"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mapset_1 = __importDefault(require("./mapset"));
const reportJson_1 = __importDefault(require("./reportJson"));
const get_1 = __importDefault(require("./get"));
const verbose_1 = __importDefault(require("./verbose"));
const retry_1 = __importDefault(require("./retry"));
const buildRequest_1 = __importDefault(require("./buildRequest"));
const retryOnError_1 = __importDefault(require("./retryOnError"));
const _1 = require(".");
class default_1 {
    constructor(fqname) {
        this.fqname = fqname;
    }
    mapset(mapsetId) {
        return new mapset_1.default(this, mapsetId);
    }
    async listFindingStatus() {
        const requestPath = ['api', this.fqname, 'finding_status'].join('/');
        return (0, get_1.default)(requestPath).then((response) => (0, reportJson_1.default)(response));
    }
    async exists(retryOptions = {}) {
        const commandDescription = `Checking if app ${this.fqname} exists`;
        if ((0, verbose_1.default)())
            console.log(commandDescription);
        const makeRequest = async () => {
            const retrier = (0, retry_1.default)(commandDescription, retryOptions, makeRequest);
            const requestPath = ['api', this.fqname].join('/');
            const request = (0, buildRequest_1.default)(requestPath);
            return new Promise((resolve, reject) => {
                const interaction = request.requestFunction(request.url, {
                    method: 'HEAD',
                    headers: request.headers,
                }, resolve);
                interaction.on('error', (0, retryOnError_1.default)(retrier, resolve, reject));
                interaction.end();
            }).then((0, _1.retryOn503)(retrier));
        };
        return makeRequest().then((response) => {
            if ((0, verbose_1.default)())
                console.log(`${commandDescription}: statusCode=${response.statusCode || '<none>'}`);
            if (!response.statusCode) {
                throw new Error('No status code was provided by the server');
            }
            if (response.statusCode === 404) {
                return false;
            }
            if (response.statusCode < 300) {
                return true;
            }
            throw new Error(`Unexpected status code: ${response.statusCode}`);
        });
    }
}
exports.default = default_1;
//# sourceMappingURL=app.js.map