"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const buildRequest_1 = __importDefault(require("./buildRequest"));
const retry_1 = __importDefault(require("./retry"));
const retryOnError_1 = __importDefault(require("./retryOnError"));
const _1 = require(".");
const verbose_1 = __importDefault(require("./verbose"));
exports.default = {
    async check(licenseKey, retryOptions = {}) {
        const commandDescription = `Checking if API key is valid`;
        const makeRequest = async () => {
            const retrier = (0, retry_1.default)(commandDescription, retryOptions, makeRequest);
            const requestPath = ['api', 'api_keys', 'check'].join('/');
            const request = (0, buildRequest_1.default)(requestPath, { requireApiKey: false });
            request.headers.authorization = `Bearer ${licenseKey}`;
            return new Promise((resolve, reject) => {
                const interaction = request.requestFunction(request.url, {
                    method: 'HEAD',
                    headers: request.headers,
                }, resolve);
                interaction.on('error', (0, retryOnError_1.default)(retrier, resolve, reject));
                interaction.end();
            }).then((0, _1.retryOn503)(retrier));
        };
        return makeRequest().then((response) => {
            if ((0, verbose_1.default)())
                console.log(`${commandDescription}: statusCode=${response.statusCode || '<none>'}`);
            if (!response.statusCode) {
                throw new Error('No status code was provided by the server');
            }
            if (response.statusCode === 404) {
                return false;
            }
            if (response.statusCode < 300) {
                return true;
            }
            throw new Error(`Unexpected status code: ${response.statusCode}`);
        });
    },
};
//# sourceMappingURL=licenseKey.js.map