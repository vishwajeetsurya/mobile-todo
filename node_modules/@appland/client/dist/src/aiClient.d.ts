import { Socket } from 'socket.io-client';
export declare type InputPromptOptions = {
    threadId?: string;
    tool?: string;
};
export declare class CodedError extends Error {
    readonly code?: number | undefined;
    constructor(message: string, code?: number | undefined);
}
export declare type Callbacks = {
    onToken: (token: string, messageId: string) => void;
    onComplete(): void;
    onRequestContext?: (data: Record<string, unknown>) => Record<string, unknown> | unknown[] | Promise<Record<string, unknown> | unknown[]>;
    onAck?: (userMessageId: string, threadId: string) => void;
    onError?: (error: Error) => void;
};
export declare type UserInput = {
    question: string;
    codeSelection?: string;
};
export default class AIClient {
    private readonly socket;
    private readonly callbacks;
    constructor(socket: Socket, callbacks: Callbacks);
    handleMessage(message: {
        type: string;
        [key: string]: unknown;
    }): Promise<void>;
    inputPrompt(input: string | UserInput, options?: InputPromptOptions): void;
    panic(error: Error): void;
    disconnect(): void;
}
