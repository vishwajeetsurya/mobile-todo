"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const form_data_1 = __importDefault(require("form-data"));
const assert_1 = __importDefault(require("assert"));
const reportJson_1 = __importDefault(require("./reportJson"));
const get_1 = __importDefault(require("./get"));
const retry_1 = __importDefault(require("./retry"));
const buildRequest_1 = __importDefault(require("./buildRequest"));
const retryOnError_1 = __importDefault(require("./retryOnError"));
const retryOn503_1 = __importDefault(require("./retryOn503"));
const handleError_1 = __importDefault(require("./handleError"));
class AppMap {
    constructor(uuid) {
        this.uuid = uuid;
    }
    async get() {
        const requestPath = ['api/appmaps', this.uuid].join('/');
        return (0, get_1.default)(requestPath).then((response) => (0, reportJson_1.default)(response));
    }
    static async create(data, options, retryOptions = {}) {
        const response = await AppMap.performCreate({ path: 'api/appmaps', requireApiKey: true }, data, options, retryOptions);
        (0, assert_1.default)(response.completed, 'AppMap.create.completed is undefined');
        return response.completed;
    }
    static async createUpload(data, options, retryOptions = {}) {
        return AppMap.performCreate({ path: 'api/appmaps/create_upload', requireApiKey: false }, data, options, retryOptions);
    }
    static async performCreate(performOptions, data, options, retryOptions = {}) {
        const makeRequest = async () => {
            const retrier = (0, retry_1.default)(`Upload AppMap`, retryOptions, makeRequest);
            const form = new form_data_1.default();
            form.append('data', data.toString());
            if (options.metadata) {
                form.append('metadata', JSON.stringify(options.metadata));
            }
            if (options.app) {
                form.append('app', options.app);
            }
            if (options.public) {
                form.append('link_sharing', 'true');
            }
            const request = (0, buildRequest_1.default)(performOptions.path, {
                requireApiKey: performOptions.requireApiKey,
            });
            return new Promise((resolve, reject) => {
                const interaction = request.requestFunction(request.url, {
                    method: 'POST',
                    headers: Object.assign(Object.assign({}, request.headers), form.getHeaders()),
                }, resolve);
                interaction.on('error', (0, retryOnError_1.default)(retrier, resolve, reject));
                form.pipe(interaction);
            }).then((0, retryOn503_1.default)(retrier));
        };
        const handleUpload = async (response) => {
            const appmap = await (0, reportJson_1.default)(response);
            if (appmap.uuid) {
                return {
                    completed: { uuid: appmap.uuid },
                };
            }
            (0, assert_1.default)(appmap.id, 'Expecting appmap.id');
            (0, assert_1.default)(appmap.token, 'Expecting appmap.token');
            return {
                pending: { upload_id: appmap.id, token: appmap.token },
            };
        };
        return makeRequest().then(handleError_1.default).then(handleUpload);
    }
}
exports.default = AppMap;
//# sourceMappingURL=appMap.js.map