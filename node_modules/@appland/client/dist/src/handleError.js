"use strict";
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorMessage = void 0;
async function errorMessage(statusCode, response) {
    var e_1, _a;
    let responseData;
    const contentType = response.headers['content-type'] || '';
    if (contentType.startsWith('application/json')) {
        const chunks = [];
        try {
            for (var response_1 = __asyncValues(response), response_1_1; response_1_1 = await response_1.next(), !response_1_1.done;) {
                const chunk = response_1_1.value;
                chunks.push(chunk);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (response_1_1 && !response_1_1.done && (_a = response_1.return)) await _a.call(response_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        const responseBody = Buffer.concat(chunks).toString();
        responseData = JSON.parse(responseBody);
    }
    let message;
    if (responseData) {
        try {
            message = responseData.error.message;
        }
        catch (_b) {
            // Pass
        }
    }
    return [`HTTP ${statusCode}`, message].filter(Boolean).join(': ');
}
exports.errorMessage = errorMessage;
function handleError(response) {
    return new Promise((resolve, reject) => {
        if (!response.statusCode) {
            reject(new Error('No status code was provided by the server'));
            return;
        }
        if (response.statusCode >= 300) {
            errorMessage(response.statusCode, response).then(reject).catch(reject);
            return;
        }
        resolve(response);
    });
}
exports.default = handleError;
//# sourceMappingURL=handleError.js.map