"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChildProcessError = exports.HttpError = exports.BundlerConfigError = exports.UserConfigError = exports.ValidationError = exports.AbortError = exports.InvalidPathError = void 0;
const chalk_1 = __importDefault(require("chalk"));
const node_util_1 = require("node:util");
const utils_1 = require("../utils");
class InvalidPathError extends Error {
    constructor(message, path) {
        super(message);
        this.message = message;
        this.path = path;
    }
}
exports.InvalidPathError = InvalidPathError;
class AbortError extends Error {
}
exports.AbortError = AbortError;
class ValidationError extends Error {
}
exports.ValidationError = ValidationError;
class UserConfigError extends Error {
}
exports.UserConfigError = UserConfigError;
class BundlerConfigError extends Error {
}
exports.BundlerConfigError = BundlerConfigError;
class HttpError extends Error {
    constructor(message, response) {
        super(message);
        this.response = response;
    }
}
exports.HttpError = HttpError;
class ChildProcessError extends Error {
    constructor(command, output, code) {
        super([
            `An error occurred while running the command: ${chalk_1.default.red(command)}\n`,
            code && `The command exited with code ${chalk_1.default.red(code)}\n`,
            output && (0, utils_1.prefixLines)(output.trim(), chalk_1.default.red('>  ')),
        ]
            .filter(Boolean)
            .join(''));
        this.command = command;
        this.output = output;
        this.code = code;
    }
    static check(err) {
        if (!node_util_1.types.isNativeError(err))
            return false;
        if (!err || typeof err !== 'object')
            return false;
        if (!('command' in err && typeof err['command'] === 'string'))
            return false;
        if (!('output' in err && typeof err['output'] === 'string'))
            return false;
        if ('code' in err && err['code'] !== null && typeof err['code'] !== 'number')
            return false;
        return true;
    }
}
exports.ChildProcessError = ChildProcessError;
//# sourceMappingURL=errors.js.map