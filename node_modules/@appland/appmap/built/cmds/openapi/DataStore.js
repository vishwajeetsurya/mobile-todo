"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const openapi_1 = require("@appland/openapi");
const assert_1 = __importDefault(require("assert"));
const console_1 = require("console");
const fs_1 = require("fs");
const promises_1 = require("fs/promises");
const os_1 = require("os");
const path_1 = require("path");
const util_1 = require("util");
const utils_1 = require("../../utils");
class RequestDataFile {
    constructor(fd, fileName) {
        this.fd = fd;
        this.fileName = fileName;
        this.bytesWritten = 0;
        const prefix = '[\n';
        this.bytesWritten = prefix.length;
        (0, fs_1.writeSync)(fd, prefix);
    }
    async writeRequest(request) {
        const json = JSON.stringify({
            status: request.status,
            parameters: request.parameters,
            returnValue: request.returnValue,
            requestHeaders: request.requestHeaders,
            responseHeaders: request.responseHeaders,
            requestContentType: request.requestContentType,
            responseContentType: request.responseContentType,
            requestMethod: request.requestMethod,
            requestPath: request.requestPath,
        });
        const indent = '  ';
        const lineEnding = ',\n';
        const line = [indent, json, lineEnding].join('');
        const { bytesWritten } = await (0, util_1.promisify)(fs_1.write)(this.fd, line);
        this.bytesWritten += bytesWritten;
    }
    async close() {
        const fileEnding = `\n]\n`;
        (0, fs_1.writeSync)(this.fd, fileEnding, this.bytesWritten - 2);
        (0, fs_1.closeSync)(this.fd);
    }
}
class DataStore {
    constructor() {
        this.requestFiles = new Map();
    }
    async initialize() {
        if (this.workDir)
            throw new Error('OpenAPI DataStore already initialized');
        this.workDir = await (0, promises_1.mkdtemp)((0, path_1.join)((0, os_1.tmpdir)(), 'appmap-openapi-'));
    }
    get requestFileNames() {
        return [...this.requestFiles.values()].map((requestFile) => requestFile.fileName);
    }
    async storeAppMap(appMapFile) {
        if (!this.workDir)
            throw new Error('OpenAPI DataStore not initialized');
        const data = await (0, promises_1.readFile)(appMapFile, 'utf-8');
        const requests = new Array();
        (0, openapi_1.parseHTTPServerRequests)(JSON.parse(data), (e) => requests.push(e));
        // This function is not async, so that the request files are opened atomically.
        const openRequestFile = (requestId) => {
            let requestFile = this.requestFiles.get(requestId);
            if (!requestFile) {
                const workFile = Buffer.from(requestId).toString('base64');
                (0, assert_1.default)(this.workDir);
                const requestFileName = (0, path_1.join)(this.workDir, workFile);
                if ((0, utils_1.verbose)())
                    (0, console_1.log)(`Opening ${requestFileName} for ${requestId}`);
                const fd = (0, fs_1.openSync)(requestFileName, 'w');
                requestFile = new RequestDataFile(fd, requestFileName);
                (0, assert_1.default)(!this.requestFiles.has(requestId));
                this.requestFiles.set(requestId, requestFile);
            }
            return requestFile;
        };
        for (const e of requests) {
            const request = (0, openapi_1.rpcRequestForEvent)(e);
            if (request) {
                const requestId = request.requestPath;
                const requestFile = openRequestFile(requestId);
                await requestFile.writeRequest(request);
            }
        }
    }
    async closeAll() {
        for (const [_, requestFile] of this.requestFiles) {
            await requestFile.close();
        }
    }
    async cleanup() {
        const { workDir } = this;
        if (!workDir)
            return;
        this.workDir = undefined;
        await (0, promises_1.rm)(workDir, { recursive: true });
    }
}
exports.default = DataStore;
//# sourceMappingURL=DataStore.js.map