"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.analyzeTask = void 0;
const ScanTask_1 = require("../scan/ScanTask");
const SequenceDiagramTask_1 = require("../sequenceDiagram/SequenceDiagramTask");
const promises_1 = require("fs/promises");
const scanner_1 = require("@appland/scanner");
const path_1 = require("path");
const buildFilter_1 = __importDefault(require("./buildFilter"));
const sequence_diagram_1 = require("@appland/sequence-diagram");
const IndexTask_1 = require("../index/IndexTask");
const fingerprinter_1 = __importDefault(require("../../fingerprint/fingerprinter"));
const models_1 = require("@appland/models");
async function analyzeTask(task) {
    var _a, _b;
    const writeIndexFile = async (data, fileName) => {
        const indexDir = (0, path_1.join)((0, path_1.dirname)(task.appmapFile), (0, path_1.basename)(task.appmapFile, '.appmap.json'));
        await (0, promises_1.writeFile)((0, path_1.join)(indexDir, fileName), data);
    };
    let result;
    if ((0, IndexTask_1.isIndexTask)(task)) {
        const handler = new fingerprinter_1.default();
        handler.maxFileSizeInBytes = undefined; // This has already been checked
        const indexResult = await handler.fingerprint(task.appmapFile);
        if (indexResult)
            result = indexResult;
        else
            result = { numEvents: 0 };
    }
    else if ((0, ScanTask_1.isScanTask)(task)) {
        const scanResults = await (0, scanner_1.scan)(task.appmapFile, 'appmap-scanner.yml');
        await writeIndexFile(JSON.stringify(scanResults, null, 2), 'appmap-findings.json');
        result = { findingsCount: scanResults.findings.length };
    }
    else if ((0, SequenceDiagramTask_1.isSequenceDiagramTask)(task)) {
        const appmap = (0, models_1.buildAppMap)()
            .source(await (0, promises_1.readFile)(task.appmapFile, 'utf8'))
            .build();
        const language = ((_b = (_a = appmap.metadata) === null || _a === void 0 ? void 0 : _a.language) === null || _b === void 0 ? void 0 : _b.name) || 'unknown';
        const filter = (0, buildFilter_1.default)(language, task.compareFilter);
        const filteredAppMap = filter.filter(appmap, []);
        const specification = sequence_diagram_1.Specification.build(filteredAppMap, task.specOptions);
        const diagram = (0, sequence_diagram_1.buildDiagram)(task.appmapFile, filteredAppMap, specification);
        const diagramData = (0, sequence_diagram_1.format)(sequence_diagram_1.FormatType.JSON, diagram, task.appmapFile).diagram;
        await writeIndexFile(diagramData, 'sequence.json');
        result = {};
    }
    else {
        throw new Error(`Unknown task`);
    }
    return result;
}
exports.analyzeTask = analyzeTask;
//# sourceMappingURL=analyzeTask.js.map