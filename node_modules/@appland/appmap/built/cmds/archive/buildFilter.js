"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HIDE_EXTERNAL = exports.HIDE_OPTIONS = void 0;
const models_1 = require("@appland/models");
exports.HIDE_OPTIONS = {
    sql_pragma: [/^query:PRAGMA\b/, /^query:[\s\S]*\bPRAGMA\b/],
    sql_savepoint: [/^query:SAVEPOINT\b/, /^query:[\s\S]*\bSAVEPOINT\b/],
    sql_show: [/^query:SHOW\b/],
    selenium: [/^external-route:.*\bhttp:\/\/127\.0\.0\.1:\d+\/session\/[a-f0-9]{32,}\//],
    pg_metadata: [/^query:[\s\S]*\bpg_attribute\b/],
    sqlite_metadata: [/^query:[\s\S]*\bsqlite_master\b/],
    ruby_included: [/^function:.*\.included$/],
};
exports.HIDE_EXTERNAL = {
    ruby: true,
    python: true,
    java: false,
    javascript: false,
};
function buildFilter(language, compareFilter) {
    const filterState = {};
    const pushHideNames = (names) => {
        if (!filterState.hideName)
            filterState.hideName = [];
        filterState.hideName.push(...names);
    };
    let filtersEnabled;
    {
        const hide = compareFilter.hide || Object.keys(exports.HIDE_OPTIONS);
        const reveal = compareFilter.reveal || [];
        filtersEnabled = hide.filter((key) => !(reveal === null || reveal === void 0 ? void 0 : reveal.includes(key)));
    }
    for (const item of filtersEnabled) {
        const hideNames = exports.HIDE_OPTIONS[item];
        if (!hideNames)
            continue;
        pushHideNames(hideNames.map((rexpg) => rexpg.toString()));
    }
    if (compareFilter.hide_name !== undefined)
        pushHideNames(compareFilter.hide_name);
    filterState.dependencyFolders = compareFilter.dependency_folders;
    if (compareFilter.dependency_folders !== undefined)
        filterState.dependencyFolders = compareFilter.dependency_folders;
    if (compareFilter.hide_external !== undefined) {
        filterState.hideExternal = compareFilter.hide_external;
    }
    else {
        filterState.hideExternal = exports.HIDE_EXTERNAL[language];
    }
    const filter = (0, models_1.deserializeFilter)(filterState);
    if (filter.declutter.hideName.names)
        filter.declutter.hideName.names.sort();
    if (filter.declutter.hideExternalPaths.dependencyFolders)
        filter.declutter.hideExternalPaths.dependencyFolders.sort();
    return filter;
}
exports.default = buildFilter;
//# sourceMappingURL=buildFilter.js.map