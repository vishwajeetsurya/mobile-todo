"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.scan = void 0;
const path_1 = require("path");
const executeCommand_1 = require("../../lib/executeCommand");
const promises_1 = require("fs/promises");
const utils_1 = require("../../utils");
async function scan(appMapDir) {
    await (0, executeCommand_1.executeCommand)(`npx @appland/scanner@latest scan --appmap-dir ${appMapDir} --all`);
    const scanResultsData = await (0, promises_1.readFile)('appmap-findings.json', 'utf8');
    await (0, promises_1.rm)('appmap-findings.json');
    const scanResults = JSON.parse(scanResultsData);
    const scanResultsTemplateJSON = JSON.parse(scanResultsData);
    delete scanResultsTemplateJSON['findings'];
    const appMapMetadata = scanResultsTemplateJSON['appMapMetadata'];
    const scanResultsTemplate = JSON.stringify(scanResultsTemplateJSON);
    const findings = scanResults['findings'];
    const findingsByAppMap = findings.reduce((memo, finding) => {
        if (!memo.has(finding.appMapFile))
            memo.set(finding.appMapFile, [finding]);
        else
            memo.get(finding.appMapFile).push(finding);
        return memo;
    }, new Map());
    return await (0, utils_1.processNamedFiles)(appMapDir, 'metadata.json', async (metadataFile) => {
        // TODO: This is hacky, but scanning everything at once is an efficient way to get it done,
        // and the scanner code is not accessible from the CLI project.
        const indexDir = (0, path_1.dirname)(metadataFile);
        const appmapFileName = (0, path_1.join)(...indexDir.split(path_1.sep).reverse().slice(1).reverse(), (0, path_1.basename)(indexDir) + '.appmap.json');
        const scanResults = JSON.parse(scanResultsTemplate);
        const findings = findingsByAppMap.get(appmapFileName) || [];
        const scanSummary = scanResults['summary'];
        scanSummary.numChecks = scanSummary.numChecks / scanSummary.numAppMaps;
        scanSummary.numAppMaps = 1;
        scanSummary.numFindings = findings.length;
        scanResults['findings'] = findings;
        const metadataEntry = appMapMetadata[appmapFileName];
        if (metadataEntry)
            scanResults['appMapMetadata'] = { [appmapFileName]: metadataEntry };
        else
            console.warn(`No appMapMetadata found for '${appmapFileName}' in scan results.`);
        await (0, promises_1.writeFile)((0, path_1.join)(indexDir, 'appmap-findings.json'), JSON.stringify(scanResults, null, 2));
    });
}
exports.scan = scan;
//# sourceMappingURL=scan.js.map