"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const promises_1 = require("fs/promises");
const path_1 = require("path");
async function unpackArchive(outputDir, archivePath) {
    await (0, promises_1.mkdir)(outputDir, { recursive: true });
    const dir = process.cwd();
    try {
        process.chdir(outputDir);
        await new Promise((resolveCB, rejectCB) => {
            (0, child_process_1.exec)(`tar xf ${(0, path_1.resolve)(dir, archivePath)}`, (error) => {
                if (error)
                    rejectCB(error);
                resolveCB();
            });
        });
        await new Promise((resolveCB, rejectCB) => {
            (0, child_process_1.exec)(`tar xf appmaps.tar.gz`, (error) => {
                if (error)
                    rejectCB(error);
                resolveCB();
            });
        });
        await (0, promises_1.unlink)('appmaps.tar.gz');
        const metadata = JSON.parse(await (0, promises_1.readFile)('appmap_archive.json', 'utf8'));
        await (0, promises_1.cp)('appmap_archive.json', `appmap_archive.${metadata.revision}.json`);
        const deletedAppMaps = metadata.deletedAppMaps || [];
        for (const deletedAppMap of deletedAppMaps) {
            await (0, promises_1.unlink)(deletedAppMap);
            await (0, promises_1.rmdir)((0, path_1.basename)(deletedAppMap, '.appmap.json'), { recursive: true });
        }
    }
    finally {
        process.chdir(dir);
    }
}
exports.default = unpackArchive;
//# sourceMappingURL=unpackArchive.js.map