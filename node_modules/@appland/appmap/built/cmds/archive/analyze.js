"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const generateOpenAPI_1 = __importDefault(require("./generateOpenAPI"));
const processAppMapDir_1 = __importDefault(require("../../lib/processAppMapDir"));
const utils_1 = require("../../utils");
const generateSequenceDiagrams_1 = require("./generateSequenceDiagrams");
// Performs scan, sequence diagram generation, and OpenAPI generation for all AppMaps.
async function analyze(workerPool, maxAppMapSizeInBytes, compareFilter, appMapDir, oversizedAppMaps, doScan) {
    const scan = async () => {
        let findingsCount = 0;
        const startTime = new Date().getTime();
        const task = (file) => ({
            name: 'scan',
            verbose: (0, utils_1.verbose)(),
            appmapFile: file,
            maxSize: maxAppMapSizeInBytes,
        });
        const result = await (0, processAppMapDir_1.default)('Scanning', workerPool, task, appMapDir, undefined, (_appmapFile, result) => {
            if (result.findingsCount)
                findingsCount += result.findingsCount;
        });
        const elapsed = new Date().getTime() - startTime;
        console.log(`Scanned ${result.numProcessed} AppMaps in ${elapsed}ms, found ${findingsCount} findings`);
        for (const file of result.oversized)
            oversizedAppMaps.add(file);
    };
    await (0, generateSequenceDiagrams_1.generateSequenceDiagrams)(workerPool, maxAppMapSizeInBytes, compareFilter, oversizedAppMaps, appMapDir);
    if (doScan)
        await scan();
    await (0, generateOpenAPI_1.default)(appMapDir, maxAppMapSizeInBytes);
}
exports.default = analyze;
//# sourceMappingURL=analyze.js.map