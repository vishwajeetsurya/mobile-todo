"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.builder = exports.describe = exports.command = void 0;
const utils_1 = require("../../utils");
const chalk_1 = __importDefault(require("chalk"));
const userInteraction_1 = __importDefault(require("../userInteraction"));
const runCommand_1 = __importDefault(require("../runCommand"));
const showAppMap_1 = __importDefault(require("./showAppMap"));
const errors_1 = require("../errors");
exports.command = 'open [appmap-file]';
exports.describe = 'Open an AppMap in the system default browser';
const builder = (args) => {
    args.positional('appmap-file', {
        describe: 'path to the AppMap to open.',
        type: 'string',
        default: undefined,
    });
    return args.strict();
};
exports.builder = builder;
const handler = async (argv) => {
    (0, utils_1.verbose)(argv.verbose);
    const commandFn = async () => {
        const { appmapFile } = argv;
        if (!appmapFile) {
            userInteraction_1.default.error(`AppMap file argument is required.`);
            throw new errors_1.ValidationError();
        }
        if (!(await (0, utils_1.exists)(appmapFile))) {
            userInteraction_1.default.error(`AppMap file ${chalk_1.default.red(appmapFile)} does not exist.`);
            throw new errors_1.ValidationError();
        }
        await (0, showAppMap_1.default)(appmapFile);
    };
    return (0, runCommand_1.default)('open', commandFn);
};
exports.handler = handler;
//# sourceMappingURL=open.js.map