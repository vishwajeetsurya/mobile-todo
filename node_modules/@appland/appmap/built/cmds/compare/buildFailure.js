"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildFailure = void 0;
const promises_1 = require("fs/promises");
const path_1 = require("path");
const RevisionName_1 = require("../../diffArchive/RevisionName");
const utils_1 = require("../../utils");
const console_1 = require("console");
const reportChanges_1 = require("./reportChanges");
function buildFailure(appMapMetadata, snippetWidth = reportChanges_1.DEFAULT_SNIPPET_WIDTH) {
    return async (appmap) => {
        var _a;
        const metadata = appMapMetadata[RevisionName_1.RevisionName.Head].get(appmap);
        if (!metadata) {
            (0, console_1.warn)(`No AppMap metadata available for failed test ${appmap}`);
            return;
        }
        const testFailure = {
            appmap,
            name: metadata.name,
        };
        if (metadata.source_location) {
            testFailure.testLocation = (0, path_1.isAbsolute)(metadata.source_location)
                ? (0, path_1.relative)(process.cwd(), metadata.source_location)
                : metadata.source_location;
        }
        if (metadata.test_failure) {
            testFailure.failureMessage = metadata.test_failure.message;
            const location = metadata.test_failure.location;
            if (location) {
                testFailure.failureLocation = location;
                const [path, linenoStr] = location.split(':');
                if (linenoStr && (await (0, utils_1.exists)(path))) {
                    const lineno = parseInt(linenoStr, 10);
                    const failureCauseCode = (await (0, promises_1.readFile)(path, 'utf-8')).split('\n');
                    const minIndex = Math.max(lineno - snippetWidth, 0);
                    const maxIndex = Math.min(lineno + snippetWidth, failureCauseCode.length);
                    testFailure.testSnippet = {
                        codeFragment: failureCauseCode.slice(minIndex, maxIndex).join('\n'),
                        startLine: minIndex + 1,
                        language: (_a = metadata.language) === null || _a === void 0 ? void 0 : _a.name,
                    };
                }
            }
        }
        return testFailure;
    };
}
exports.buildFailure = buildFailure;
//# sourceMappingURL=buildFailure.js.map