"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChangeReportOptions = exports.DEFAULT_SNIPPET_WIDTH = void 0;
const RevisionName_1 = require("../../diffArchive/RevisionName");
const ReportFieldCalculator_1 = __importDefault(require("./ReportFieldCalculator"));
const buildFailure_1 = require("./buildFailure");
const utils_1 = require("../../utils");
const mapToRecord_1 = __importDefault(require("./mapToRecord"));
const console_1 = require("console");
exports.DEFAULT_SNIPPET_WIDTH = 10;
class ChangeReportOptions {
    constructor() {
        this.reportRemoved = true;
        this.snippetWidth = exports.DEFAULT_SNIPPET_WIDTH;
    }
}
exports.ChangeReportOptions = ChangeReportOptions;
async function reportChanges(changeAnalysis, options) {
    const { appMapMetadata, failedAppMaps } = changeAnalysis;
    let apiDiff;
    const generator = new ReportFieldCalculator_1.default(changeAnalysis);
    const failureFn = (0, buildFailure_1.buildFailure)(appMapMetadata, options.snippetWidth);
    const testFailures = new Array();
    for (const appmap of failedAppMaps) {
        const testFailure = await failureFn(appmap);
        if (testFailure) {
            testFailures.push(testFailure);
        }
    }
    let sqlDiff;
    if (testFailures.length === 0) {
        apiDiff = await generator.apiDiff(options.reportRemoved);
        sqlDiff = await generator.sqlDiff(options.reportRemoved);
    }
    const sequenceDiagramExists = async (revisionName, appmap) => {
        const path = changeAnalysis.paths.sequenceDiagramPath(revisionName, appmap);
        return await (0, utils_1.exists)(path);
    };
    // Limit AppMap metadata to only those AppMaps that have a sequence diagram.
    for (const revisionName of [RevisionName_1.RevisionName.Base, RevisionName_1.RevisionName.Head]) {
        const metadataByPath = appMapMetadata[revisionName];
        for (const appmap of metadataByPath.keys()) {
            if (!(await sequenceDiagramExists(revisionName, appmap))) {
                (0, console_1.warn)(`No sequence diagram found for ${revisionName} AppMap ${appmap}`);
                metadataByPath.delete(appmap);
            }
        }
    }
    const changedAppMaps = changeAnalysis.changedAppMaps.map((appmap) => ({ appmap }));
    const sequenceDiagramDiff = await generator.sequenceDiagramDiff(changedAppMaps);
    const result = {
        testFailures,
        newAppMaps: changeAnalysis.newAppMaps,
        removedAppMaps: changeAnalysis.removedAppMaps,
        changedAppMaps,
        sequenceDiagramDiff,
        appMapMetadata: {
            [RevisionName_1.RevisionName.Base]: (0, mapToRecord_1.default)(appMapMetadata[RevisionName_1.RevisionName.Base]),
            [RevisionName_1.RevisionName.Head]: (0, mapToRecord_1.default)(appMapMetadata[RevisionName_1.RevisionName.Head]),
        },
    };
    if (changeAnalysis.findingDiff)
        result.findingDiff = changeAnalysis.findingDiff;
    if (sqlDiff)
        result.sqlDiff = sqlDiff;
    if (apiDiff)
        result.apiDiff = apiDiff;
    if (Object.keys(generator.warnings).length > 0)
        result.warnings = generator.warnings;
    return result;
}
exports.default = reportChanges;
//# sourceMappingURL=reportChanges.js.map