"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const assert_1 = __importDefault(require("assert"));
const Reporter_1 = require("./Reporter");
const ReportTemplate_1 = require("../../report/ReportTemplate");
const loadReportTemplate_1 = __importDefault(require("../../report/loadReportTemplate"));
const urlHelpers_1 = __importDefault(require("../../report/urlHelpers"));
const helpers_1 = __importDefault(require("../../report/helpers"));
const readIndexFile_1 = __importDefault(require("../inventory/readIndexFile"));
class WelcomeReporter {
    constructor(appmapURL, sourceURL) {
        this.appmapURL = appmapURL;
        this.sourceURL = sourceURL;
    }
    async generateReport(reportData, appmapConfig) {
        (0, assert_1.default)(Reporter_1.TemplateDirectory);
        const templateText = await (0, loadReportTemplate_1.default)((0, path_1.join)(Reporter_1.TemplateDirectory, 'welcome', 'welcome.hbs'));
        const template = new ReportTemplate_1.ReportTemplate(templateText, Object.assign(Object.assign(Object.assign({}, helpers_1.default), (0, urlHelpers_1.default)({ appmapURL: this.appmapURL, sourceURL: this.sourceURL })), WelcomeReporter.helpers()));
        const largeAppMapsGreaterThan1MB = Object.entries(reportData.largeAppMaps)
            .filter((entry) => entry[1] > 1024 * 1024)
            .reduce((acc, entry) => ((acc[entry[0]] = entry[1]), acc), {});
        const largeAppMaps = {};
        for (const appmap of Object.keys(largeAppMapsGreaterThan1MB)) {
            const metadata = await (0, readIndexFile_1.default)(appmap, 'metadata.json');
            const name = metadata.name;
            const sourceLocation = metadata.source_location;
            largeAppMaps[appmap] = { name, sourceLocation, size: reportData.largeAppMaps[appmap] };
        }
        const frequentlyOccurringFunctionsMoreThan1000 = Object.entries(reportData.frequentFunctions)
            .filter((entry) => entry[1].count > 1000)
            .reduce((acc, entry) => ((acc[entry[0]] = entry[1]), acc), {});
        const data = Object.assign(Object.assign(Object.assign({}, reportData), { largeAppMaps, frequentFunctions: frequentlyOccurringFunctionsMoreThan1000 }), { appmapConfig });
        return template.generateMarkdown(data);
    }
    static helpers() {
        const agent_reference_name = (language) => {
            if (language === 'javascript')
                return 'agent-js';
            else
                return language;
        };
        const format_mb = (sizeInBytes) => {
            const sizeInMB = Math.round((sizeInBytes / 1024 / 1024) * 100) / 100;
            return `${sizeInMB} MB`;
        };
        const function_name = (functionId) => {
            // Example: function:ruby/Array#pack
            if (!functionId.startsWith('function:'))
                return functionId;
            const parts = functionId.split('/');
            return parts[parts.length - 1];
        };
        const select_values_by_key_range = (data, keyMin, keyMax) => {
            if (typeof keyMax === 'object')
                keyMax = undefined;
            const result = Object.keys(data)
                .map((k) => parseInt(k, 10))
                .filter((k) => k >= keyMin && (keyMax === undefined || k < keyMax))
                .map((k) => data[k]);
            return result;
        };
        const sum_values_by_key_range = (data, keyMin, keyMax) => {
            const values = select_values_by_key_range(data, keyMin, keyMax);
            return values.reduce((a, b) => a + (b || 0), 0);
        };
        const packages_matching_configuration = (packages, configuredPackages) => {
            const normalizePackage = (pkg) => pkg.replace(/\//g, '.').toLowerCase();
            return packages.filter((pkg) => {
                return configuredPackages.find((configuredPackage) => configuredPackage.path &&
                    normalizePackage(pkg).startsWith(normalizePackage(configuredPackage.path)));
            });
        };
        return {
            agent_reference_name,
            format_mb,
            function_name,
            packages_matching_configuration,
            select_values_by_key_range,
            sum_values_by_key_range,
        };
    }
}
exports.default = WelcomeReporter;
//# sourceMappingURL=WelcomeReporter.js.map