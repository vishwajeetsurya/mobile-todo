"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.builder = exports.describe = exports.command = void 0;
const utils_1 = require("../../utils");
const handleWorkingDirectory_1 = require("../../lib/handleWorkingDirectory");
const promises_1 = require("fs/promises");
const console_1 = require("console");
const process_1 = require("process");
const path_1 = require("path");
const assert_1 = __importDefault(require("assert"));
const loadAppMapConfig_1 = __importDefault(require("../../lib/loadAppMapConfig"));
const Reporter_1 = __importDefault(require("./Reporter"));
exports.command = 'inventory-report <report-json-file> [output-file]';
exports.describe = 'Generate a report document describing the current state of a repository.';
const builder = (args) => {
    args.positional('report-json-file', {
        type: 'string',
        describe: `JSON report file to read. This file is generated by the 'inventory' command.`,
        demandOption: true,
    });
    args.positional('output-file', {
        type: 'string',
        describe: `Markdown output file. If not specified, the report is written to stdout.`,
        demandOption: true,
    });
    args.option('directory', {
        describe: 'program working directory',
        type: 'string',
        alias: 'd',
    });
    args.option('template-name', {
        type: 'string',
        describe: `Template name.`,
        default: 'welcome',
        choices: ['welcome', 'summary'],
        alias: 't',
    });
    args.option('source-url', {
        describe: `Base URL to link to a source file. The relative path to the source file will be added to the URL path.`,
        type: 'string',
    });
    args.option('appmap-url', {
        describe: `Base URL to link to AppMaps. A 'path' parameter will be added with the relative path from the report directory to the AppMap JSON file.`,
        type: 'string',
    });
    return args.strict();
};
exports.builder = builder;
const handler = async (argv) => {
    (0, utils_1.verbose)(argv.verbose);
    const { directory } = argv;
    (0, handleWorkingDirectory_1.handleWorkingDirectory)(directory);
    const { reportJsonFile, outputFile, templateName, appmapUrl, sourceUrl } = argv;
    (0, assert_1.default)(reportJsonFile);
    (0, assert_1.default)(templateName);
    const appmapConfig = await (0, loadAppMapConfig_1.default)();
    if (!appmapConfig)
        throw new Error('Unable to load appmap.yml');
    const report = JSON.parse(await (0, promises_1.readFile)(reportJsonFile, 'utf-8'));
    const reporter = (0, Reporter_1.default)(templateName, appmapUrl, sourceUrl);
    const reportMD = await reporter.generateReport(report, appmapConfig);
    if (outputFile) {
        await (0, promises_1.writeFile)(outputFile, reportMD);
        (0, console_1.warn)(`Report written to ${(0, path_1.join)((0, process_1.cwd)(), outputFile)}`);
    }
    else {
        console.log(reportMD);
    }
};
exports.handler = handler;
//# sourceMappingURL=inventoryReport.js.map