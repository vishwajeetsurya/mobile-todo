"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserInteraction = void 0;
const boxen_1 = __importDefault(require("boxen"));
const inquirer_1 = __importDefault(require("inquirer"));
const ora_1 = __importDefault(require("ora"));
const utils_1 = require("../utils");
class UserInteraction {
    constructor() {
        this.spinner = (0, ora_1.default)();
    }
    async prompt(questions, opts) {
        const wasSpinning = this.spinner.isSpinning;
        if (wasSpinning) {
            this.spinner.stop();
            this.spinner.clear();
        }
        const result = await inquirer_1.default.prompt(questions);
        if (wasSpinning && !(opts === null || opts === void 0 ? void 0 : opts.supressSpinner)) {
            this.spinner.start();
        }
        return result;
    }
    async continue(msg) {
        await inquirer_1.default.prompt({ type: 'input', name: 'confirm', message: msg });
    }
    async confirm(msg) {
        const { confirm } = await inquirer_1.default.prompt({
            type: 'confirm',
            name: 'confirm',
            message: msg,
        });
        return confirm;
    }
    /**
     * Prints a message to STDOUT.
     */
    progress(msg) {
        console.log(msg);
    }
    /**
     * Finishes an in-progress command, showing a success indicator at the beginning of the line.
     * Prints an optional message inside of a box.
     */
    success(msg, align = 'center') {
        if (this.spinner.isSpinning) {
            this.spinner.succeed();
        }
        if (msg) {
            console.log((0, boxen_1.default)(msg, {
                padding: 1,
                margin: 1,
                borderStyle: 'round',
                textAlignment: align,
            }));
        }
    }
    /**
     * Halts an in-progress command, showing a failure indicator at the beginning of the line.
     * Prints an optional error message to
     */
    error(msg) {
        if (this.spinner.isSpinning) {
            this.spinner.fail();
        }
        if (msg) {
            console.error('');
            console.error(msg);
        }
    }
    /**
     * Prints a message to STDERR.
     */
    warn(msg) {
        console.error(msg);
    }
    get status() {
        return this.spinner.text;
    }
    set status(value) {
        if (this.spinner.isSpinning) {
            this.spinner.succeed();
        }
        this.spinner.text = value;
        if (!this.spinner.isSpinning && !(0, utils_1.verbose)()) {
            this.spinner.start();
        }
    }
}
exports.UserInteraction = UserInteraction;
const UI = new UserInteraction();
exports.default = UI;
//# sourceMappingURL=userInteraction.js.map