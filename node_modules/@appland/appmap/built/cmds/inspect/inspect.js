"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.builder = exports.describe = exports.command = void 0;
const yargs_1 = __importDefault(require("yargs"));
const context_1 = __importDefault(require("../../inspect/context"));
const ui_1 = __importDefault(require("../../inspect/ui"));
const handleWorkingDirectory_1 = require("../../lib/handleWorkingDirectory");
const locateAppMapDir_1 = require("../../lib/locateAppMapDir");
const utils_1 = require("../../utils");
exports.command = 'inspect <code-object>';
exports.describe = 'Search AppMaps for references to a code object (package, function, class, query, route, etc) and print available event info';
const builder = (args) => {
    args.positional('code-object', {
        describe: 'identifies the code-object to inspect',
    });
    args.option('directory', {
        describe: 'program working directory',
        type: 'string',
        alias: 'd',
    });
    args.option('appmap-dir', {
        describe: 'directory to recursively inspect for AppMaps',
    });
    args.option('interactive', {
        describe: 'interact with the output via CLI',
        alias: 'i',
        boolean: true,
    });
    return args.strict();
};
exports.builder = builder;
const handler = async (argv) => {
    var _a;
    (0, utils_1.verbose)(argv.verbose);
    (0, handleWorkingDirectory_1.handleWorkingDirectory)(argv.directory);
    const appmapDir = await (0, locateAppMapDir_1.locateAppMapDir)(argv.appmapDir);
    const codeObjectId = argv.codeObject;
    if (argv.interactive) {
        new ui_1.default(appmapDir, codeObjectId).start();
    }
    else {
        const context = new context_1.default(appmapDir, codeObjectId);
        await context.findCodeObjects();
        if (((_a = context.codeObjectMatches) === null || _a === void 0 ? void 0 : _a.length) === 0) {
            return yargs_1.default.exit(1, new Error(`Code object '${context.codeObjectId}' not found`));
        }
        await context.buildStats();
        console.log(JSON.stringify(context.stats, null, 2));
    }
};
exports.handler = handler;
//# sourceMappingURL=inspect.js.map