"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const stats_1 = require("../../rpc/appmap/stats");
const configuration_1 = __importDefault(require("../../rpc/configuration"));
async function collectProjectInfos(codeEditor) {
    const projectInfoByPath = new Map();
    const projectInfo = (directory) => {
        const info = projectInfoByPath.get(directory);
        if (info)
            return info;
        const result = { directory };
        projectInfoByPath.set(directory, result);
        return result;
    };
    const appmapDirectories = await (0, configuration_1.default)().appmapDirectories();
    const appmapStats = await (0, stats_1.collectStats)(appmapDirectories);
    appmapStats.forEach((stats) => {
        const { directory } = stats;
        // KG: This is verbose and I don't see the utility of it
        delete stats.classes;
        delete stats.path;
        projectInfo(directory).appmapStats = stats;
    });
    appmapDirectories.forEach((dir) => {
        var _a, _b;
        projectInfo(dir.directory).appmapConfig = {
            name: dir.appmapConfig.name,
            language: (_a = dir.appmapConfig.language) !== null && _a !== void 0 ? _a : 'unknown',
            appmap_dir: (_b = dir.appmapConfig.appmap_dir) !== null && _b !== void 0 ? _b : 'tmp/appmap',
            packages: dir.appmapConfig.packages,
        };
    });
    const { projectDirectories } = (0, configuration_1.default)();
    if (codeEditor) {
        projectDirectories.forEach((dir) => {
            projectInfo(dir).codeEditor = { name: codeEditor };
        });
    }
    return [...projectInfoByPath.values()].sort((a, b) => a.directory.localeCompare(b.directory));
}
exports.default = collectProjectInfos;
//# sourceMappingURL=projectInfo.js.map