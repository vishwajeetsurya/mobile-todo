"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOutput = void 0;
const commandRunner_1 = require("./commandRunner");
const commandStruct_1 = __importDefault(require("./commandStruct"));
/**
 * Small utility method to run a command and return the output - ONE OF stdout OR stderr. This
 * function won't throw an error if the command fails. This method may be expanded in the future
 * to return both stdout and stderr combined, but as of now it is not necessary.
 * @param program The executable to run
 * @param args The arguments to pass to the executable
 * @param cwd The working directory to run the command in
 * @returns The output of the command
 */
async function getOutput(program, args, cwd) {
    try {
        const { stdout, stderr } = await (0, commandRunner_1.run)(new commandStruct_1.default(program, args, cwd));
        return {
            output: stdout ? stdout : stderr,
            ok: true,
        };
    }
    catch (code) {
        const failure = { output: '' };
        if (code === 127) {
            failure.output = `${program} was not found`;
        }
        else {
            failure.output = `${program} failed with code ${code}`;
        }
        return failure;
    }
}
exports.getOutput = getOutput;
//# sourceMappingURL=commandUtil.js.map