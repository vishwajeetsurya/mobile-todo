"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addJetBrainsEnv = void 0;
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const commandStruct_1 = __importDefault(require("./commandStruct"));
const commandRunner_1 = require("./commandRunner");
const commandUtil_1 = require("./commandUtil");
const jetBrainsSupport_1 = require("./jetBrainsSupport");
const agentInstaller_1 = __importDefault(require("./agentInstaller"));
function addJetBrainsEnv() {
    const jbHome = (0, jetBrainsSupport_1.findIntelliJHome)();
    if (!jbHome) {
        return;
    }
    const javaHome = path_1.default.join(jbHome, 'jbr');
    const mvnBin = path_1.default.join(jbHome, 'plugins/maven/lib/maven3/bin');
    // Make sure we don't override the user's settings: append to path, use the
    // existing JAVA_HOME if it's set.
    if (!process.env['JAVA_HOME']) {
        process.env['JAVA_HOME'] = javaHome;
    }
    process.env['PATH'] = [process.env['PATH'], path_1.default.join(javaHome, 'bin'), mvnBin].join(path_1.default.delimiter);
}
exports.addJetBrainsEnv = addJetBrainsEnv;
addJetBrainsEnv();
class JavaBuildToolInstaller extends agentInstaller_1.default {
    constructor(name, path) {
        super(name, path);
    }
    get documentation() {
        return 'https://appland.com/docs/reference/appmap-java';
    }
    async initCommand() {
        return new commandStruct_1.default('java', ['-jar', await this.agentJar(), '-d', this.path, 'init'], this.path);
    }
    async validateAgentCommand() {
        return new commandStruct_1.default('java', ['-jar', await this.agentJar(), '-d', this.path, 'validate'], this.path);
    }
    async agentJar() {
        if (!this._agentJar) {
            const cmd = await this.printJarPathCommand();
            const { stdout } = await (0, commandRunner_1.run)(cmd);
            this._agentJar = stdout
                .split('\n')
                .filter((l) => l.match(/^com\.appland:appmap-agent\.jar.path/))[0]
                .split('=')[1];
        }
        return this._agentJar.trim();
    }
    async environment() {
        // JDK version is returned as a string similar to:
        // javac 1.8.0_212-internal (build 1.8.0_212-internal+11)
        const version = await (0, commandUtil_1.getOutput)('javac', ['-version'], this.path);
        return {
            JAVA_HOME: process.env['JAVA_HOME'] || chalk_1.default.yellow('Unspecified'),
            'JDK Version': version.ok ? version.output.split(/\s/)[1] : chalk_1.default.red(version.output),
        };
    }
}
exports.default = JavaBuildToolInstaller;
//# sourceMappingURL=javaBuildToolInstaller.js.map