"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.INSTALLER_NAMES = exports.INSTALLERS = void 0;
const NodeNoInstaller_1 = __importDefault(require("./NodeNoInstaller"));
const gradleInstaller_1 = __importDefault(require("./gradleInstaller"));
const mavenInstaller_1 = __importDefault(require("./mavenInstaller"));
const pythonAgentInstaller_1 = require("./pythonAgentInstaller");
const rubyAgentInstaller_1 = require("./rubyAgentInstaller");
const chalk_1 = __importDefault(require("chalk"));
exports.INSTALLERS = [
    rubyAgentInstaller_1.BundleInstaller,
    gradleInstaller_1.default,
    mavenInstaller_1.default,
    NodeNoInstaller_1.default,
    pythonAgentInstaller_1.PipInstaller,
    pythonAgentInstaller_1.PipenvInstaller,
    pythonAgentInstaller_1.PoetryInstaller,
];
exports.INSTALLER_NAMES = exports.INSTALLERS.map((installer) => chalk_1.default.blue(installer.identifier));
/**
 * Retrieve the installers available for a given path
 * @param path The path to check for available installers
 * @returns An array of installers available for the given path. May be empty.
 */
async function getAvailableInstallers(path) {
    const allInstallers = exports.INSTALLERS.map((constructor) => new constructor(path));
    // Results is an array lookup containing a boolean indicating whether the installer is available
    // e.g. [true, false, true, true]
    const results = await Promise.all(allInstallers.map(async (installer) => await installer.available()));
    // Index the results array to get the installers that are available
    return allInstallers.filter((_, i) => results[i]);
}
exports.default = getAvailableInstallers;
//# sourceMappingURL=installers.js.map