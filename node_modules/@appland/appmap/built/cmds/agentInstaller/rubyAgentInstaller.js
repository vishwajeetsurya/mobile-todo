"use strict";
/* eslint-disable class-methods-use-this */
/* eslint-disable max-classes-per-file */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BundleInstaller = void 0;
const os_1 = __importDefault(require("os"));
const path_1 = require("path");
const chalk_1 = __importDefault(require("chalk"));
const utils_1 = require("../../utils");
const agentInstaller_1 = __importDefault(require("./agentInstaller"));
const commandRunner_1 = require("./commandRunner");
const commandUtil_1 = require("./commandUtil");
const commandStruct_1 = __importDefault(require("./commandStruct"));
const encodedFile_1 = __importDefault(require("../../encodedFile"));
const errors_1 = require("../errors");
const REGEX_GEM_DECLARATION = /^(?:gem|group|require)\s/m;
const REGEX_GEM_DEPENDENCY = /^\s*gem\s+['|"]appmap['|"].*$/m;
const GEM_DEPENDENCY = "gem 'appmap', :groups => [:development, :test]";
class BundleInstaller extends agentInstaller_1.default {
    constructor(path) {
        super('Bundler', path);
    }
    get language() {
        return 'ruby';
    }
    get appmap_dir() {
        return 'tmp/appmap';
    }
    get buildFile() {
        return 'Gemfile';
    }
    get buildFilePath() {
        return (0, path_1.join)(this.path, this.buildFile);
    }
    get documentation() {
        return 'https://appland.com/docs/reference/appmap-ruby';
    }
    async available() {
        return await (0, utils_1.exists)(this.buildFilePath);
    }
    async checkConfigCommand(_ui) {
        return new commandStruct_1.default('bundle', ['check', '--dry-run'], this.path);
    }
    async checkBundlerConfig() {
        const bundleConfig = await (0, commandRunner_1.run)(new commandStruct_1.default('bundle', ['config', 'get', 'without'], this.path));
        const activeConfig = bundleConfig.stdout.split('\n')[1];
        if (activeConfig && activeConfig.includes(':development') && activeConfig.includes(':test')) {
            throw new errors_1.BundlerConfigError('Bundler is currently configured to install without the test and development groups\n');
        }
    }
    async installAgent(_ui) {
        await this.checkBundlerConfig();
        const encodedFile = new encodedFile_1.default(this.buildFilePath);
        let gemfile = encodedFile.toString();
        const index = gemfile.search(REGEX_GEM_DECLARATION);
        if (index !== -1) {
            const gemExists = gemfile.search(REGEX_GEM_DEPENDENCY) !== -1;
            if (gemExists) {
                // Replace the existing gem declaration entirely
                gemfile = gemfile.replace(REGEX_GEM_DEPENDENCY, `${os_1.default.EOL}${GEM_DEPENDENCY}`);
            }
            else {
                // Insert a new gem declaration
                const chars = gemfile.split('');
                chars.splice(index, 0, `${GEM_DEPENDENCY}${os_1.default.EOL + os_1.default.EOL}`);
                gemfile = chars.join('');
            }
            encodedFile.write(gemfile);
        }
        else {
            encodedFile.write(`${gemfile}${os_1.default.EOL}${GEM_DEPENDENCY}${os_1.default.EOL}`);
        }
        await (0, commandRunner_1.run)(new commandStruct_1.default('bundle', ['install'], this.path));
    }
    async initCommand() {
        return new commandStruct_1.default('bundle', ['exec', 'appmap-agent-init'], this.path);
    }
    async validateAgentCommand() {
        return new commandStruct_1.default('bundle', ['exec', 'appmap-agent-validate'], this.path);
    }
    async environment() {
        // Ruby version is returned as a string similar to:
        // ruby 3.0.0p0 (2020-12-25 revision 95aff21468) [x86_64-linux]
        const version = await (0, commandUtil_1.getOutput)('ruby', ['--version'], this.path);
        const gemHome = await (0, commandUtil_1.getOutput)('gem', ['env', 'home'], this.path);
        return {
            'Ruby version': version.ok ? version.output.split(/\s/)[1] : chalk_1.default.red(version.output),
            'Gem home': gemHome.ok ? gemHome.output : chalk_1.default.red(gemHome.output),
        };
    }
    async verifyCommand() {
        return undefined;
    }
}
exports.BundleInstaller = BundleInstaller;
BundleInstaller.identifier = 'Bundler';
//# sourceMappingURL=rubyAgentInstaller.js.map