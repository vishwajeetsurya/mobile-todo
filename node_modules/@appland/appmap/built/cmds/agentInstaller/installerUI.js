"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OverwriteOption = void 0;
const userInteraction_1 = __importDefault(require("../userInteraction"));
const chalk_1 = __importDefault(require("chalk"));
var OverwriteOption;
(function (OverwriteOption) {
    OverwriteOption["USE_EXISTING"] = "Use existing";
    OverwriteOption["OVERWRITE"] = "Overwrite";
    OverwriteOption["ABORT"] = "Abort";
})(OverwriteOption = exports.OverwriteOption || (exports.OverwriteOption = {}));
class InstallerUI {
    constructor(interactive, options) {
        this.interactive = interactive;
        this.options = options;
    }
    message(message) {
        console.log(message);
    }
    status(status) {
        userInteraction_1.default.status = status;
    }
    success(message) {
        userInteraction_1.default.success(message);
    }
    warn(message) {
        userInteraction_1.default.warn(message);
    }
    error(message) {
        userInteraction_1.default.error(message);
    }
    async confirm(message) {
        if (!this.interactive)
            return true;
        const { confirm } = await userInteraction_1.default.prompt({
            type: 'confirm',
            name: 'confirm',
            message: message,
        });
        return confirm;
    }
    async attemptUnsupportedProjectType(message) {
        if (!this.interactive)
            return true;
        const { willContinue } = await userInteraction_1.default.prompt([
            {
                type: 'confirm',
                name: 'willContinue',
                prefix: chalk_1.default.yellow('!'),
                message,
            },
        ]);
        return willContinue;
    }
    async chooseSubprojects(rootHasInstaller) {
        if (!this.interactive)
            return false;
        const { addSubprojects } = await userInteraction_1.default.prompt({
            type: 'confirm',
            default: !rootHasInstaller,
            name: 'addSubprojects',
            message: 'This directory contains sub-projects. Would you like to choose sub-projects for installation?',
        });
        return addSubprojects;
    }
    async selectSubprojects(projects) {
        if (projects.length < 2)
            return projects;
        if (!this.interactive) {
            console.warn(`The installer should not be prompting for sub-projects in non-interactive mode!`);
            return [];
        }
        const { selectedSubprojects } = await userInteraction_1.default.prompt({
            type: 'checkbox',
            name: 'selectedSubprojects',
            message: 'Select the projects to install AppMap to.',
            choices: projects,
        });
        return selectedSubprojects;
    }
    async pythonBuildFile(defaultChoice, choices) {
        if (this.options.buildFile)
            return this.options.buildFile;
        if (!this.interactive)
            throw new Error(`Multiple build files are available in this project (${choices.join(', ')}). Use the --build-file option to specify one of them.`);
        const { buildFile } = await userInteraction_1.default.prompt([
            {
                type: 'list',
                name: 'buildFile',
                message: 'Please choose the requirements file used for development:',
                choices,
                default: defaultChoice,
            },
        ]);
        return buildFile;
    }
    async selectProject(message, name, availableInstallers) {
        if (this.options.installerName)
            return this.options.installerName;
        if (!this.interactive)
            throw new Error(`Project can be configured with multiple different installers (${availableInstallers.join(', ')}). Use the --installer-name option to specify one of them.`);
        const result = await userInteraction_1.default.prompt({
            type: 'list',
            name,
            message: message,
            choices: availableInstallers,
        });
        return result[name];
    }
    async addMavenCentral() {
        if (!this.interactive)
            return true;
        const { addMavenCentral } = await userInteraction_1.default.prompt({
            type: 'list',
            name: 'addMavenCentral',
            message: 'The Maven Central repository is required by the AppMap plugin to fetch the AppMap agent JAR. Add it now?',
            choices: ['Yes', 'No'],
        });
        return addMavenCentral === 'Yes';
    }
    async commitConfiguration(message) {
        if (!this.interactive) {
            console.warn(`The installer should not be trying to commit configuration in non-interactive mode!`);
            return false;
        }
        const { commit } = await userInteraction_1.default.prompt({
            type: 'confirm',
            name: 'commit',
            message: message,
        });
        return commit;
    }
    async continueWithoutJavaPlugin() {
        if (!this.interactive)
            return true;
        const { userWillContinue } = await userInteraction_1.default.prompt({
            type: 'list',
            name: 'userWillContinue',
            message: `The ${chalk_1.default.red("'java'")} plugin was not found. This configuration is unsupported and is likely to fail. Continue?`,
            default: 'Abort',
            choices: ['Abort', 'Continue'],
        });
        return userWillContinue === 'Continue';
    }
    async overwriteAppMapConfig() {
        if (this.options.overwriteAppMapConfig === true)
            return OverwriteOption.OVERWRITE;
        if (this.options.overwriteAppMapConfig === false)
            return OverwriteOption.USE_EXISTING;
        if (!this.interactive)
            throw new Error(`The project already contains an AppMap config file (e.g. appmap.yml). Use the --overwrite-appmap-config option to specify whether it should be overwritten.`);
        const { overwriteAppMapYml } = await userInteraction_1.default.prompt({
            type: 'list',
            name: 'overwriteAppMapYml',
            message: 'An appmap.yml configuration file already exists. How should the conflict be resolved?',
            choices: [OverwriteOption.USE_EXISTING, OverwriteOption.OVERWRITE, OverwriteOption.ABORT],
        });
        return overwriteAppMapYml;
    }
    async shouldShowError(message) {
        if (!this.interactive)
            return true;
        const { showError } = await userInteraction_1.default.prompt({
            name: 'showError',
            type: 'confirm',
            message,
            prefix: chalk_1.default.red('!'),
        }, { supressSpinner: true });
        return showError;
    }
}
exports.default = InstallerUI;
//# sourceMappingURL=installerUI.js.map