"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EXPERIMENTAL_SECTIONS = exports.SECTIONS = void 0;
const ChangeReport_1 = __importDefault(require("./ChangeReport"));
const ReportSection_1 = __importStar(require("./ReportSection"));
// TODO: Get this from the type?
exports.SECTIONS = [
    ReportSection_1.Section.FailedTests,
    ReportSection_1.Section.OpenAPIDiff,
    ReportSection_1.Section.SecurityFlaws,
    ReportSection_1.Section.PerformanceProblems,
    ReportSection_1.Section.CodeAntiPatterns,
    ReportSection_1.Section.NewAppMaps,
    ReportSection_1.Section.RemovedAppMaps,
];
exports.EXPERIMENTAL_SECTIONS = [
    ReportSection_1.ExperimentalSection.ChangedAppMaps,
    ReportSection_1.ExperimentalSection.SQLDiff,
];
class ChangeReporter {
    constructor(appmapURL, sourceURL) {
        this.appmapURL = appmapURL;
        this.sourceURL = sourceURL;
    }
    async generateReport(changeReportData) {
        const sections = [
            ...exports.SECTIONS.filter((section) => { var _a; return !((_a = this.excludeSections) === null || _a === void 0 ? void 0 : _a.includes(section)); }),
            ...exports.EXPERIMENTAL_SECTIONS.filter((section) => { var _a; return (_a = this.includeSections) === null || _a === void 0 ? void 0 : _a.includes(section); }),
        ];
        const changeReport = await ChangeReport_1.default.build(changeReportData);
        const headings = new Array();
        const details = new Array();
        const reportOptions = {
            appmapURL: this.appmapURL,
            sourceURL: this.sourceURL,
        };
        for (const sectionName of sections) {
            const section = await ReportSection_1.default.build(sectionName);
            const heading = section.generateHeading(changeReport).trim();
            if (heading) {
                const detail = section.generateDetails(changeReport, reportOptions);
                headings.push(heading);
                details.push(detail);
            }
        }
        const heading = [
            '# AppMap runtime code review',
            '',
            '| Summary | Status |',
            '| --- | --- |',
            ...headings,
            '',
        ].join('\n');
        const warnings = [];
        if (changeReport.warnings.length > 0) {
            warnings.push('');
            warnings.push('**Warnings occurred during analysis:**');
            for (const warning of changeReport.warnings) {
                warnings.push('');
                warnings.push('```');
                warnings.push(`(${warning.field}) ${warning.message}`);
                warnings.push('```');
            }
            warnings.push('');
        }
        const comments = [];
        if (changeReport.testFailures.length > 0) {
            comments.push('');
            comments.push(`:warning: **Note** Because ${changeReport.testFailures.length} test${changeReport.testFailures.length > 1 ? 's' : ''} failed, AppMap is showing an abbreviated analysis to help you get them working. Once all tests are passing, all report sections will be available.`);
            comments.push('');
        }
        return [heading, ...warnings, ...comments, ...details].join('\n');
    }
}
exports.default = ChangeReporter;
//# sourceMappingURL=ChangeReporter.js.map