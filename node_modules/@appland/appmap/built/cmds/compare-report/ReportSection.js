"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExperimentalSection = exports.FindingsSections = exports.Section = exports.DEFAULT_MAX_ELEMENTS = exports.TemplateDirectory = void 0;
const handlebars_1 = require("handlebars");
const path_1 = require("path");
const fs_1 = require("fs");
const assert_1 = __importDefault(require("assert"));
const Preprocessor_1 = __importStar(require("./Preprocessor"));
const helpers_1 = __importDefault(require("../../report/helpers"));
const urlHelpers_1 = __importDefault(require("../../report/urlHelpers"));
const loadReportTemplate_1 = __importDefault(require("../../report/loadReportTemplate"));
exports.TemplateDirectory = [
    '../../../resources/change-report',
    '../../../../resources/change-report', // In development
]
    .map((dirName) => (0, path_1.join)(__dirname, dirName))
    .find((dirName) => (0, fs_1.existsSync)(dirName));
(0, assert_1.default)(exports.TemplateDirectory, "Report template directory 'change-report' not found");
exports.DEFAULT_MAX_ELEMENTS = 10;
var Section;
(function (Section) {
    Section["FailedTests"] = "failed-tests";
    Section["OpenAPIDiff"] = "openapi-diff";
    Section["SecurityFlaws"] = "security-flaws";
    Section["PerformanceProblems"] = "performance-problems";
    Section["CodeAntiPatterns"] = "code-antipatterns";
    Section["NewAppMaps"] = "new-appmaps";
    Section["RemovedAppMaps"] = "removed-appmaps";
})(Section = exports.Section || (exports.Section = {}));
exports.FindingsSections = [
    Section.SecurityFlaws,
    Section.PerformanceProblems,
    Section.CodeAntiPatterns,
];
var ExperimentalSection;
(function (ExperimentalSection) {
    ExperimentalSection["SQLDiff"] = "sql-diff";
    ExperimentalSection["ChangedAppMaps"] = "changed-appmaps";
})(ExperimentalSection = exports.ExperimentalSection || (exports.ExperimentalSection = {}));
const SECTION_DIRECTORY = {
    'performance-problems': 'findings',
    'security-flaws': 'findings',
    'code-antipatterns': 'findings',
};
const SECTION_METADATA = {
    'performance-problems': {
        name: 'performance problems',
        title: 'Performance problems',
        anchor: 'performance-problems',
        emoji: '🐌',
    },
    'security-flaws': {
        name: 'security flaws',
        title: 'Security flaws',
        anchor: 'security-flaws',
        emoji: '🔒',
    },
    'code-antipatterns': {
        name: 'code anti-patterns',
        title: 'Code anti-patterns',
        anchor: 'code-antipatterns',
        emoji: '🚨',
    },
};
class ReportSection {
    constructor(section, headingTemplate, detailsTemplate) {
        this.section = section;
        this.headingTemplate = headingTemplate;
        this.detailsTemplate = detailsTemplate;
    }
    generateHeading(changeReport) {
        return this.headingTemplate(this.buildContext(changeReport), {
            helpers: Object.assign(Object.assign({}, helpers_1.default), ReportSection.helpers()),
        });
    }
    generateDetails(changeReport, options) {
        const report = Object.assign({}, changeReport);
        let maxElements = options.maxElements || exports.DEFAULT_MAX_ELEMENTS;
        const preprocessor = (0, Preprocessor_1.default)(this.section, report);
        if (preprocessor) {
            const { numElements } = preprocessor;
            if (numElements > maxElements) {
                const pruneResult = preprocessor.prune(maxElements);
                for (const key of Object.keys(pruneResult)) {
                    report[key] = pruneResult[key];
                }
                report.pruned = true;
            }
        }
        return this.detailsTemplate(this.buildContext(report), {
            helpers: Object.assign(Object.assign(Object.assign({}, helpers_1.default), ReportSection.helpers()), (0, urlHelpers_1.default)(options)),
            allowProtoPropertiesByDefault: true,
        });
    }
    buildContext(changeReport) {
        const context = Object.assign({}, changeReport);
        const metadata = SECTION_METADATA[this.section];
        if (metadata)
            context.metadata = metadata;
        if (changeReport.findingDiff && exports.FindingsSections.includes(this.section)) {
            const newFindings = (0, Preprocessor_1.filterFindings)(changeReport.findingDiff.newFindings, this.section);
            const resolvedFindings = (0, Preprocessor_1.filterFindings)(changeReport.findingDiff.resolvedFindings, this.section);
            context.findingDiff = { newFindings, resolvedFindings };
        }
        return context;
    }
    static helpers() {
        const group_appmaps_by_recorder_name = (appmaps) => {
            const recorderGroups = appmaps.reduce((acc, appmap) => {
                const recorderName = appmap.recorderName || 'unknown';
                if (!acc.has(recorderName))
                    acc.set(recorderName, {
                        recorderName: recorderName,
                        isTest: appmap.isTest,
                        count: 1,
                    });
                else
                    acc.get(recorderName).count += 1;
                return acc;
            }, new Map());
            return [...recorderGroups.values()].sort((a, b) => b.count - a.count);
        };
        const appmap_title = (appmap) => {
            const tokens = [];
            if (appmap.recorderName)
                tokens.push(['[', appmap.recorderName, ']'].join(''));
            tokens.push(appmap.displayName);
            return tokens.join(' ');
        };
        const section_link = (sectionName, anchor, itemCount) => new handlebars_1.SafeString(itemCount === 0 ? sectionName : `[${sectionName}](#${anchor})`);
        return {
            appmap_title,
            group_appmaps_by_recorder_name,
            section_link,
        };
    }
    static async build(section, templateDir = exports.TemplateDirectory) {
        (0, assert_1.default)(templateDir);
        const sectionDir = SECTION_DIRECTORY[section] || section;
        const headingTemplateFile = (0, path_1.join)(templateDir, sectionDir, 'heading.hbs');
        const headingTemplate = await (0, loadReportTemplate_1.default)(headingTemplateFile);
        const detailsTemplateFile = (0, path_1.join)(templateDir, sectionDir, 'details.hbs');
        const detailsTemplate = await (0, loadReportTemplate_1.default)(detailsTemplateFile);
        return new ReportSection(section, headingTemplate, detailsTemplate);
    }
}
exports.default = ReportSection;
//# sourceMappingURL=ReportSection.js.map