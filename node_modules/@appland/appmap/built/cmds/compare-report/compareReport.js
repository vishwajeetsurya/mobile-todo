"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.builder = exports.describe = exports.command = void 0;
const promises_1 = require("fs/promises");
const handleWorkingDirectory_1 = require("../../lib/handleWorkingDirectory");
const utils_1 = require("../../utils");
const ChangeReporter_1 = __importStar(require("./ChangeReporter"));
exports.command = 'compare-report <report-directory>';
exports.describe = 'Generate a report document from comparison data generated by the compare command.';
const builder = (args) => {
    args.positional('report-directory', {
        describe: 'directory containing the comparison data',
        type: 'string',
        demandOption: true,
    });
    args.option('source-url', {
        describe: `Base URL to link to a source file. The relative path to the source file will be added to the URL path.`,
        type: 'string',
    });
    args.option('appmap-url', {
        describe: `Base URL to link to AppMaps. A 'path' parameter will be added with the relative path from the report directory to the AppMap JSON file.`,
        type: 'string',
    });
    args.option('directory', {
        describe: 'program working directory',
        type: 'string',
        alias: 'd',
    });
    args.option('include-section', {
        describe: 'Non-default sections to include in the report. This repeatable option may be used to include beta, early access and/or experimental sections in the report. ' +
            `The experimental sections are: ${ChangeReporter_1.EXPERIMENTAL_SECTIONS.join(', ')}`,
        type: 'string',
    });
    args.option('exclude-section', {
        describe: `Default sections to exclude in the report. The default sections are: ${ChangeReporter_1.SECTIONS.join(' ,')}`,
        type: 'string',
    });
    return args.strict();
};
exports.builder = builder;
const handler = async (argv) => {
    (0, utils_1.verbose)(argv.verbose);
    const { directory, includeSection: includeSections, excludeSection: excludeSections } = argv;
    (0, handleWorkingDirectory_1.handleWorkingDirectory)(directory);
    const { reportDirectory, sourceUrl, appmapUrl } = argv;
    process.chdir(reportDirectory);
    const makeArray = (arg) => {
        if (Array.isArray(arg))
            return arg;
        return [arg];
    };
    const report = JSON.parse(await (0, promises_1.readFile)('change-report.json', 'utf-8'));
    const mdReport = new ChangeReporter_1.default(appmapUrl, sourceUrl);
    if (includeSections)
        mdReport.includeSections = makeArray(includeSections);
    if (excludeSections)
        mdReport.excludeSections = makeArray(excludeSections);
    const reportMD = await mdReport.generateReport(report);
    await (0, promises_1.writeFile)('report.md', reportMD);
};
exports.handler = handler;
//# sourceMappingURL=compareReport.js.map