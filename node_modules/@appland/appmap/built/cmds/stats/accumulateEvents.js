"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.accumulateEvents = void 0;
const fs = __importStar(require("fs"));
const models_1 = require("@appland/models");
const JSONStream_1 = __importDefault(require("JSONStream"));
const sizeof = (obj) => JSON.stringify(obj).length;
async function parseClassMap(mapPath) {
    let classMap;
    return new Promise((resolve) => {
        fs.createReadStream(mapPath).pipe(JSONStream_1.default.parse('events.*')
            .on('header', (obj) => {
            if (obj.classMap)
                classMap = new models_1.ClassMap(obj.classMap);
        })
            .on('footer', (obj) => {
            if (obj.classMap)
                classMap = new models_1.ClassMap(obj.classMap);
        })
            .on('close', () => {
            resolve(classMap);
        }));
    });
}
async function accumulateEvents(mapPath) {
    const classMap = await parseClassMap(mapPath);
    const events = {};
    return new Promise((resolve) => {
        fs.createReadStream(mapPath).pipe(JSONStream_1.default.parse('events.*')
            .on('data', (eventData) => {
            if (eventData.event !== 'call' ||
                eventData.sql_query ||
                eventData.http_server_request ||
                eventData.http_client_request) {
                return;
            }
            const event = new models_1.Event(eventData);
            const obj = classMap.codeObjectFromEvent(event);
            if (obj) {
                const fqid = obj.fqid;
                const size = sizeof(event);
                const entry = events[fqid];
                if (entry) {
                    entry.size += size;
                    entry.count += 1;
                }
                else {
                    events[fqid] = { location: obj.location, size, count: 1 };
                }
            }
        })
            .on('close', () => {
            resolve(Object.keys(events)
                .map((key) => {
                const { location, size, count } = events[key];
                return { function: key, count, size, location };
            })
                .sort((a, b) => b.count - a.count));
        }));
    });
}
exports.accumulateEvents = accumulateEvents;
//# sourceMappingURL=accumulateEvents.js.map