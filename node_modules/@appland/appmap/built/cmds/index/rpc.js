"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.builder = exports.describe = exports.command = void 0;
const node_console_1 = require("node:console");
const client_1 = require("@appland/client");
const utils_1 = require("../../utils");
const search_1 = require("../../rpc/search/search");
const filter_1 = __importDefault(require("../../rpc/appmap/filter"));
const metadata_1 = __importDefault(require("../../rpc/appmap/metadata"));
const sequenceDiagram_1 = __importDefault(require("../../rpc/appmap/sequenceDiagram"));
const explain_1 = require("../../rpc/explain/explain");
const navie_1 = require("../navie");
const rpcServer_1 = __importDefault(require("./rpcServer"));
const data_1 = __importDefault(require("../../rpc/appmap/data"));
const stats_1 = require("../../rpc/appmap/stats");
const handleWorkingDirectory_1 = require("../../lib/handleWorkingDirectory");
const configuration_1 = require("../../rpc/configuration");
const detectCodeEditor_1 = __importDefault(require("../../lib/detectCodeEditor"));
exports.command = 'rpc';
exports.describe = 'Run AppMap JSON-RPC server';
const builder = (args) => {
    return (0, navie_1.commonNavieArgsBuilder)(args)
        .option('port', {
        describe: 'port to listen on for JSON-RPC requests. Use port 0 to let the OS choose a port. The port number will be printed to stdout on startup.',
        type: 'number',
        alias: 'p',
        default: 0,
    })
        .strict();
};
exports.builder = builder;
const handler = async (argv) => {
    (0, utils_1.verbose)(argv.verbose);
    const navie = (0, navie_1.buildNavieProvider)(argv);
    let codeEditor = argv.codeEditor;
    if (!codeEditor) {
        codeEditor = (0, detectCodeEditor_1.default)();
        if (codeEditor)
            (0, node_console_1.warn)(`Detected code editor: ${codeEditor}`);
    }
    (0, client_1.loadConfiguration)(false);
    await (0, handleWorkingDirectory_1.configureRpcDirectories)(argv.directory);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const rpcMethods = [
        (0, search_1.search)(),
        (0, stats_1.appmapStatsV1)(),
        (0, stats_1.appmapStatsV2)(),
        (0, filter_1.default)(),
        (0, data_1.default)(),
        (0, metadata_1.default)(),
        (0, sequenceDiagram_1.default)(),
        (0, explain_1.explainHandler)(navie, codeEditor),
        (0, explain_1.explainStatusHandler)(),
        (0, configuration_1.setConfigurationV1)(),
        (0, configuration_1.getConfigurationV1)(),
        (0, configuration_1.setConfigurationV2)(),
        (0, configuration_1.getConfigurationV2)(),
    ];
    const rpcServer = new rpcServer_1.default(argv.port, rpcMethods);
    rpcServer.start();
};
exports.handler = handler;
//# sourceMappingURL=rpc.js.map