"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.builder = exports.describe = exports.command = void 0;
const readline_1 = __importDefault(require("readline"));
const chalk_1 = __importDefault(require("chalk"));
const client_1 = require("@appland/client");
const fingerprintDirectoryCommand_1 = __importDefault(require("../../fingerprint/fingerprintDirectoryCommand"));
const fingerprintWatchCommand_1 = __importDefault(require("../../fingerprint/fingerprintWatchCommand"));
const handleWorkingDirectory_1 = require("../../lib/handleWorkingDirectory");
const locateAppMapDir_1 = require("../../lib/locateAppMapDir");
const utils_1 = require("../../utils");
const console_1 = require("console");
const numProcessed_1 = require("../../rpc/index/numProcessed");
const search_1 = require("../../rpc/search/search");
const filter_1 = __importDefault(require("../../rpc/appmap/filter"));
const metadata_1 = __importDefault(require("../../rpc/appmap/metadata"));
const sequenceDiagram_1 = __importDefault(require("../../rpc/appmap/sequenceDiagram"));
const explain_1 = require("../../rpc/explain/explain");
const rpcServer_1 = __importDefault(require("./rpcServer"));
const data_1 = __importDefault(require("../../rpc/appmap/data"));
const stats_1 = require("../../rpc/appmap/stats");
const navie_local_1 = __importDefault(require("../../rpc/explain/navie/navie-local"));
const navie_remote_1 = __importDefault(require("../../rpc/explain/navie/navie-remote"));
const AI_KEY_ENV_VARS = ['OPENAI_API_KEY', 'AZURE_OPENAI_API_KEY'];
exports.command = 'index';
exports.describe = 'Compute fingerprints and update index files for all appmaps in a directory';
const builder = (args) => {
    args.showHidden();
    args.option('directory', {
        describe: 'program working directory',
        type: 'string',
        alias: 'd',
    });
    args.option('appmap-dir', {
        describe: 'directory to recursively inspect for AppMaps',
    });
    args.option('watch', {
        describe: 'watch the directory for changes to appmaps',
        boolean: true,
        alias: 'w',
    });
    args.option('port', {
        describe: 'port to listen on for JSON-RPC requests',
        type: 'number',
        alias: 'p',
    });
    args.option('navie-provider', {
        describe: 'navie provider to use',
        type: 'string',
        choices: ['local', 'remote'],
    });
    args.option('log-navie', {
        describe: 'Log Navie events to stderr',
        boolean: true,
        default: false,
    });
    return args.strict();
};
exports.builder = builder;
const handler = async (argv) => {
    (0, utils_1.verbose)(argv.verbose);
    (0, handleWorkingDirectory_1.handleWorkingDirectory)(argv.directory);
    const appmapDir = await (0, locateAppMapDir_1.locateAppMapDir)(argv.appmapDir);
    const { watch, port, logNavie } = argv;
    const runServer = watch || port !== undefined;
    if (port && !watch)
        (0, console_1.warn)(`Note: --port option implies --watch`);
    if (runServer) {
        (0, client_1.loadConfiguration)(false);
        (0, console_1.log)(`Running indexer in watch mode`);
        const cmd = new fingerprintWatchCommand_1.default(appmapDir);
        await cmd.execute();
        if (port !== undefined) {
            const useLocalNavie = () => {
                if (argv.navieProvider === 'local') {
                    (0, console_1.log)(`Using local Navie provider due to explicit --navie-provider=local option`);
                    return true;
                }
                if (argv.navieProvider === 'remote') {
                    (0, console_1.log)(`Using remote Navie provider due to explicit --navie-provider=remote option`);
                    return false;
                }
                const aiEnvVar = Object.keys(process.env).find((key) => AI_KEY_ENV_VARS.includes(key));
                if (aiEnvVar) {
                    (0, console_1.log)(`Using local Navie provider due to presence of environment variable ${aiEnvVar}`);
                    return true;
                }
                (0, console_1.log)(`--navie-provider option not provided, and none of ${AI_KEY_ENV_VARS.join(' ')} are available. Using remote Navie provider.`);
                return false;
            };
            const buildLocalNavie = (contextProvider, projectInfoProvider, helpProvider) => {
                const navie = new navie_local_1.default(contextProvider, projectInfoProvider, helpProvider);
                let START;
                const logEvent = (event) => {
                    if (!logNavie)
                        return;
                    if (!START)
                        START = Date.now();
                    const elapsed = Date.now() - START;
                    process.stderr.write(chalk_1.default.gray(`${elapsed}ms `));
                    process.stderr.write(chalk_1.default.gray(event.message));
                    process.stderr.write(chalk_1.default.gray('\n'));
                };
                navie.on('event', logEvent);
                return navie;
            };
            const buildRemoteNavie = (contextProvider, projectInfoProvider, helpProvider) => new navie_remote_1.default(contextProvider, projectInfoProvider, helpProvider);
            const navieProvider = useLocalNavie() ? buildLocalNavie : buildRemoteNavie;
            await (0, handleWorkingDirectory_1.configureRpcDirectories)([process.cwd()]);
            const rpcMethods = [
                (0, numProcessed_1.numProcessed)(cmd),
                (0, search_1.search)(),
                (0, stats_1.appmapStatsV1)(),
                (0, stats_1.appmapStatsV2)(),
                (0, filter_1.default)(),
                (0, data_1.default)(),
                (0, metadata_1.default)(),
                (0, sequenceDiagram_1.default)(),
                (0, explain_1.explainHandler)(navieProvider, argv.codeEditor),
                (0, explain_1.explainStatusHandler)(),
            ];
            const rpcServer = new rpcServer_1.default(port, rpcMethods);
            rpcServer.start();
        }
        else {
            if (!argv.verbose && process.stdout.isTTY) {
                process.stdout.write('\x1B[?25l');
                const consoleLabel = 'AppMaps processed: 0';
                process.stdout.write(consoleLabel);
                setInterval(() => {
                    readline_1.default.cursorTo(process.stdout, consoleLabel.length - 1);
                    process.stdout.write(`${cmd.numProcessed}`);
                }, 1000);
            }
        }
    }
    else {
        const cmd = new fingerprintDirectoryCommand_1.default(appmapDir);
        await cmd.execute();
    }
};
exports.handler = handler;
//# sourceMappingURL=index.js.map