"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const userInteraction_1 = __importDefault(require("../../userInteraction"));
const configuration_1 = require("../configuration");
const guessTestCommands_1 = __importDefault(require("../action/guessTestCommands"));
const testCaseRecording_1 = __importDefault(require("../testCaseRecording"));
async function obtainTestCommands({ configuration }) {
    userInteraction_1.default.progress(``);
    userInteraction_1.default.progress(`In order to record test cases, you need to provide a command that I can use to run the tests. ` +
        `If your project has many test cases, ` +
        `enter a command that will run integration, functional, system or request tests, as opposed to unit tests. ` +
        `Don't worry about how long the tests will take to run, you will specify a maximum runtime in an upcoming step.`);
    userInteraction_1.default.progress(``);
    const testCommands = (await (0, guessTestCommands_1.default)()) || [];
    for (const testCommand of testCommands) {
        userInteraction_1.default.progress(`Here's a suggested test command for your project:`);
        userInteraction_1.default.progress(``);
        // TODO: Colorize
        userInteraction_1.default.progress(configuration_1.TestCommand.toString(testCommand));
        userInteraction_1.default.progress(``);
        if (await userInteraction_1.default.confirm('Use this suggested test command?')) {
            configuration.setConfigOption('test_recording.test_commands', [testCommand]);
            await configuration.write();
            userInteraction_1.default.progress(``);
            userInteraction_1.default.progress(`I've written this test command to your AppMap configuration file (appmap.yml). ` +
                `The next time you run this program, it will be used automatically. You can change it in the appmap.yml ` +
                `if you want to. You can also delete it, in which case you'll be prompted again next time. And, you can also add ` +
                `additional test commands to that file.`);
            userInteraction_1.default.progress(``);
            await userInteraction_1.default.continue('Press enter to continue');
            return;
        }
    }
    let confirmed = false;
    while (!confirmed) {
        let testCommand;
        do {
            testCommand = (await userInteraction_1.default.prompt({
                name: 'testCommand',
                type: 'input',
                message: 'Test command (without env vars):',
            }))['testCommand'];
            if (testCommand)
                testCommand = testCommand.trim();
        } while (!testCommand);
        const { envVars } = await userInteraction_1.default.prompt({
            name: 'envVars',
            type: 'input',
            message: 'Environment variables:',
        });
        let env = {};
        if (envVars.toString().trim() !== '') {
            env = envVars
                .toString()
                .trim()
                .split(/\s+/)
                .reduce((acc, curr) => {
                const [key, value] = curr.split('=', 2);
                acc[key] = value;
                return acc;
            }, {});
        }
        userInteraction_1.default.progress(`To run the tests, I will run the following command:`);
        userInteraction_1.default.progress('');
        userInteraction_1.default.progress(`${testCaseRecording_1.default.envString(env)}${testCommand}`);
        userInteraction_1.default.progress('');
        confirmed = await userInteraction_1.default.confirm(`Continue with this command?`);
        if (confirmed) {
            configuration.setConfigOption('test_recording.test_commands', [
                { env, command: testCommand },
            ]);
            await configuration.write();
        }
    }
}
exports.default = obtainTestCommands;
//# sourceMappingURL=obtainTestCommands.js.map