"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const node_child_process_1 = require("node:child_process");
const util_1 = require("util");
const exec = (0, util_1.promisify)(node_child_process_1.exec);
// Run git ls-files and git status to get a list of all git-managed files. By doing it this way,
// we automatically apply any .gitignore rules.
async function listGitProjectFiles(directory) {
    const lsFiles = async () => {
        try {
            const { stdout } = await exec('git ls-files', {
                cwd: directory,
                maxBuffer: 1024 ** 2 * 20, // 20 MB
            });
            if ((0, utils_1.verbose)())
                console.log(stdout);
            return stdout.split('\n').filter(Boolean);
        }
        catch (e) {
            if ((0, utils_1.verbose)()) {
                console.error('`git ls-files` failed');
                console.error(e);
            }
            return [];
        }
    };
    const statusFiles = async () => {
        try {
            const { stdout } = await exec('git status --porcelain', {
                cwd: directory,
                maxBuffer: 1024 ** 2 * 20, // 20 MB
            });
            if ((0, utils_1.verbose)())
                console.log(stdout);
            return stdout
                .split('\n')
                .map((line) => {
                const [, fileName] = line.split(' ');
                return fileName;
            })
                .filter(Boolean);
        }
        catch (e) {
            if ((0, utils_1.verbose)()) {
                console.error('`git status --porcelain` failed');
                console.error(e);
            }
            return [];
        }
    };
    return Array.from(new Set([...(await lsFiles()), ...(await statusFiles())]));
}
exports.default = listGitProjectFiles;
//# sourceMappingURL=listGitProjectFIles.js.map