"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _FileIndex_insert;
Object.defineProperty(exports, "__esModule", { value: true });
exports.filterFiles = exports.buildFileIndex = exports.restoreFileIndex = exports.FileIndex = void 0;
const promises_1 = require("node:fs/promises");
const node_path_1 = __importStar(require("node:path"));
const better_sqlite3_1 = __importDefault(require("better-sqlite3"));
const assert_1 = __importDefault(require("assert"));
const fs_1 = require("fs");
const utils_1 = require("../utils");
const listProjectFiles_1 = __importDefault(require("./listProjectFiles"));
const queryKeywords_1 = __importDefault(require("./queryKeywords"));
const telemetry_1 = require("../telemetry");
const listGitProjectFIles_1 = __importDefault(require("./listGitProjectFIles"));
const querySymbols_1 = __importDefault(require("./querySymbols"));
class FileIndex {
    constructor(database) {
        this.database = database;
        this.indexDirectory = this.database.transaction((directory, fileNames, options, offset, limit) => {
            const startIndex = offset !== null && offset !== void 0 ? offset : 0;
            const endIndex = limit ? Math.min(startIndex + limit, fileNames.length) : fileNames.length;
            for (let i = startIndex; i < endIndex; i++) {
                const fileName = fileNames[i];
                this.indexFile(directory, fileName, options);
            }
        });
        _FileIndex_insert.set(this, void 0);
        this.database.exec(`CREATE VIRTUAL TABLE files USING fts5(directory UNINDEXED, file_name UNINDEXED, terms, tokenize = 'porter unicode61')`);
        this.database.pragma('journal_mode = OFF');
        this.database.pragma('synchronous = OFF');
        __classPrivateFieldSet(this, _FileIndex_insert, this.database.prepare('INSERT INTO files (directory, file_name, terms) VALUES (?, ?, ?)'), "f");
    }
    close() {
        this.database.close();
    }
    search(keywords, limit = 10) {
        const query = `SELECT directory, file_name, (rank * -1) score FROM files WHERE files MATCH ? ORDER BY rank LIMIT ?`;
        const searchExpr = (0, queryKeywords_1.default)(keywords).join(' OR ');
        const rows = this.database.prepare(query).all(searchExpr, limit);
        rows.forEach((row) => {
            if ((0, utils_1.verbose)())
                console.log(`Found row ${row.file_name}`);
        });
        return rows.map((row) => ({
            directory: row.directory,
            fileName: row.file_name,
            score: row.score,
        }));
    }
    async indexDirectories(directories, batchSize = 100) {
        for (const directory of directories) {
            try {
                const startTime = new Date().getTime();
                const gitState = await telemetry_1.Git.state(directory);
                const fileNames = gitState === telemetry_1.GitState.Ok
                    ? await (0, listGitProjectFIles_1.default)(directory)
                    : await (0, listProjectFiles_1.default)(directory);
                const filteredFileNames = await filterFiles(directory, fileNames);
                const options = {
                    allowGenericParsing: fileNames.length < 15000,
                    allowSymbols: fileNames.length < 15000,
                };
                if ((0, utils_1.verbose)()) {
                    if (options.allowSymbols) {
                        console.log('Symbol parsing is enabled.');
                        console.log(`Generic symbol parsing is ${options.allowGenericParsing ? 'enabled.' : 'disabled.'}`);
                    }
                    else {
                        console.log('Symbol parsing is disabled.');
                    }
                }
                for (let i = 0; i < filteredFileNames.length; i += batchSize) {
                    this.indexDirectory(directory, filteredFileNames, options, i, batchSize);
                    // yield to the event loop after each chunk
                    await new Promise((resolve) => setTimeout(resolve, 0));
                }
                const endTime = new Date().getTime();
                console.log(`Indexed ${fileNames.length} files in ${directory} in ${endTime - startTime}ms`);
            }
            catch (error) {
                console.error(`Error processing directory ${directory}:`, error);
            }
        }
    }
    indexFile(directory, filePath, options = {}) {
        const { allowGenericParsing = true, allowSymbols = true } = options;
        const fileNameTokens = filePath.split(node_path_1.default.sep);
        try {
            let terms = (0, queryKeywords_1.default)(fileNameTokens).join(' ');
            if (allowSymbols) {
                const symbols = (0, querySymbols_1.default)(node_path_1.default.join(directory, filePath), allowGenericParsing);
                terms += ` ${(0, queryKeywords_1.default)(symbols).sort().join(' ')}`;
            }
            if ((0, utils_1.verbose)())
                console.log(`Indexing file path ${filePath} with terms ${terms}`);
            __classPrivateFieldGet(this, _FileIndex_insert, "f").run(directory, filePath, terms);
        }
        catch (error) {
            console.warn(`Error indexing document ${filePath}`);
            console.warn(error);
        }
    }
}
exports.FileIndex = FileIndex;
_FileIndex_insert = new WeakMap();
function restoreFileIndex(indexFileName) {
    (0, assert_1.default)((0, fs_1.existsSync)(indexFileName), `Index file ${indexFileName} does not exist`);
    const database = new better_sqlite3_1.default(indexFileName);
    return new FileIndex(database);
}
exports.restoreFileIndex = restoreFileIndex;
async function buildFileIndex(directories, indexFileName) {
    (0, assert_1.default)(!(0, fs_1.existsSync)(indexFileName), `Index file ${indexFileName} already exists`);
    const database = new better_sqlite3_1.default(indexFileName);
    const fileIndex = new FileIndex(database);
    await fileIndex.indexDirectories(directories);
    console.log(`Wrote file index to ${indexFileName}`);
    return fileIndex;
}
exports.buildFileIndex = buildFileIndex;
const BINARY_FILE_EXTENSIONS = [
    'png',
    'jpg',
    'jpeg',
    'gif',
    'bmp',
    'ico',
    'tiff',
    'webp',
    'svg',
    'mp3',
    'wav',
    'ogg',
    'flac',
    'aac',
    'mp4',
    'webm',
    'mkv',
    'avi',
    'mov',
    'wmv',
    'mpg',
    'flv',
    'zip',
    'tar',
    'gz',
    'bz2',
    'xz',
    '7z',
    'rar',
    'pdf',
    'doc',
    'docx',
    'xls',
    'xlsx',
    'ppt',
    'pptx',
    'odt',
    'ods',
    'odp',
    'rtf',
    'woff',
    'woff2',
    'eot',
    'ttf',
    'otf',
    'ico',
    'flv',
    'avi',
    'mov',
    'wmv',
    'mpg',
    'jar',
    'war',
    'ear',
    'class',
    'so',
    'dll',
    'dylib',
    'o',
    'exe',
    'min.js',
    'min.css',
].map((ext) => '.' + ext);
async function filterFiles(directory, fileNames) {
    const result = [];
    for (const fileName of fileNames) {
        const fileExtension = node_path_1.default.extname(fileName).toLowerCase();
        if (BINARY_FILE_EXTENSIONS.some((ext) => ext === fileExtension))
            continue;
        try {
            const stats = await (0, promises_1.stat)((0, node_path_1.join)(directory, fileName));
            if (stats.isFile() && stats.size < 50000)
                result.push(fileName);
        }
        catch (error) {
            console.warn(`Error checking file ${fileName}`);
            console.warn(error);
        }
    }
    return result;
}
exports.filterFiles = filterFiles;
//# sourceMappingURL=FileIndex.js.map