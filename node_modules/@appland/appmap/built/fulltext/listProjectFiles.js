"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const promises_1 = require("fs/promises");
const path_1 = require("path");
const IGNORE_DIRECTORIES = ['node_modules', 'vendor', 'tmp', 'build', 'dist', 'target'];
const DEFAULT_PROJECT_FILE_LIMIT = 1000;
// Produce a modest-sized listing of files in the project.
// Ignore a standard list of binary file extensions and directories that tend to be full of
// non-source files.
async function listProjectFiles(directory, fileLimit = DEFAULT_PROJECT_FILE_LIMIT) {
    const files = new Array();
    const ignoreDirectory = (dir) => IGNORE_DIRECTORIES.includes(dir);
    // Perform a breadth-first traversal of a directory, collecting all non-binary files and
    // applying the directory ignore list.
    const processDir = async (dir) => {
        const queue = [dir];
        while (queue.length > 0 && files.length < fileLimit) {
            const currentDir = queue.shift();
            (0, assert_1.default)(currentDir, 'queue should not be empty');
            const entries = await (0, promises_1.readdir)(currentDir, { withFileTypes: true });
            for (const entry of entries) {
                const path = (0, path_1.join)(currentDir, entry.name);
                if (entry.isDirectory()) {
                    if (!ignoreDirectory(entry.name))
                        queue.push(path);
                }
                else
                    files.push((0, path_1.relative)(dir, path));
            }
        }
    };
    await processDir(directory);
    return files;
}
exports.default = listProjectFiles;
//# sourceMappingURL=listProjectFiles.js.map