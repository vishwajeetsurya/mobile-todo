"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiffDiagrams = exports.ExcludeFilter = void 0;
const sequence_diagram_1 = require("@appland/sequence-diagram");
const utils_1 = require("../utils");
const buildActionName_1 = require("./buildActionName");
const UniqueActionNames = new Set();
class IncludeFilter {
    constructor() {
        this.expressions = [];
    }
    addExpression(expression) {
        this.expressions.push(new RegExp(expression));
    }
    test(action) {
        if (this.expressions.length === 0)
            return true;
        let ancestor = action;
        while (ancestor) {
            const actionName = (0, buildActionName_1.buildActionName)(ancestor);
            if ((0, utils_1.verbose)()) {
                if (actionName && !UniqueActionNames.has(actionName)) {
                    console.log(`Testing action: ${actionName}`);
                    UniqueActionNames.add(actionName);
                }
            }
            if (actionName) {
                if (this.expressions.find((expr) => expr.test(actionName))) {
                    return true;
                }
            }
            ancestor = ancestor.parent;
        }
        return false;
    }
}
class ExcludeFilter {
    constructor() {
        this.expressions = [];
    }
    addExpression(expression) {
        this.expressions.push(new RegExp(expression));
    }
    test(action) {
        const actionName = (0, buildActionName_1.buildActionName)(action);
        if (!actionName)
            return true;
        return this.expressions.find((expr) => expr.test(actionName)) === undefined;
    }
}
exports.ExcludeFilter = ExcludeFilter;
class DiffDiagrams {
    constructor() {
        this.includeFilter = new IncludeFilter();
        this.excludeFilter = new ExcludeFilter();
    }
    include(expr) {
        this.includeFilter.addExpression(expr);
    }
    exclude(expr) {
        this.excludeFilter.addExpression(expr);
    }
    diff(base, head) {
        return this.diffDiagrams(this.filterDiagram(base), this.filterDiagram(head));
    }
    filterDiagram(diagram) {
        const filterActions = (actions) => {
            const result = actions.filter((action) => this.includeFilter.test(action) && this.excludeFilter.test(action));
            result.forEach((action) => {
                action.children = filterActions(action.children);
            });
            return result;
        };
        diagram.rootActions = filterActions(diagram.rootActions);
        return diagram;
    }
    diffDiagrams(base, head) {
        const result = (0, sequence_diagram_1.diff)(base, head, {});
        const changes = result.moves.filter((move) => move.moveType !== sequence_diagram_1.MoveType.AdvanceBoth);
        if (changes.length === 0) {
            return;
        }
        return (0, sequence_diagram_1.buildDiffDiagram)(result);
    }
}
exports.DiffDiagrams = DiffDiagrams;
//# sourceMappingURL=DiffDiagrams.js.map