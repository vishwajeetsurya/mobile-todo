"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
class EncodedFile {
    constructor(path) {
        this.path = path;
        const { buf, bom0, bom1, encoding } = EncodedFile.read(path);
        this.buf = buf;
        this.bom0 = bom0;
        this.bom1 = bom1;
        this.encoding = encoding;
    }
    toString() {
        let ret;
        if (this.encoding) {
            // slice(1) to get rid of the BOM.
            ret = this.buf.toString(this.encoding).slice(1);
        }
        else {
            ret = this.buf.toString();
        }
        return ret;
    }
    // Encode the given string with our encoding and write it to path
    // @param {string} str the string to write
    // @param {PathLike} [path] the path to write the string to, defaults to this.path
    write(str, path) {
        let buf = Buffer.from(str, this.encoding);
        if (this.bom0) {
            buf = Buffer.concat([Uint8Array.from([this.bom0, this.bom1]), buf]);
        }
        fs_1.default.writeFileSync(path ? path : this.path, buf);
    }
    static read(path) {
        let bom0, bom1;
        let encoding;
        const buf = fs_1.default.readFileSync(path);
        if (!buf.length) {
            return {
                buf,
                bom0,
                bom1,
                encoding,
            };
        }
        bom0 = buf.readUInt8(0);
        bom1 = buf.readUInt8(1);
        if (bom0 === 0xff && bom1 === 0xfe) {
            encoding = 'utf16le';
        }
        else if (bom0 < 0x80) {
            // None of the files we care about can start with anything other than a
            // 7-bit ASCII character
            bom0 = bom1 = undefined;
        }
        else {
            throw new Error(`Unknown encoding for ${path}, ${bom0.toString(16)} ${bom1.toString(16)}`);
        }
        return {
            buf,
            bom0,
            bom1,
            encoding,
        };
    }
}
exports.default = EncodedFile;
//# sourceMappingURL=encodedFile.js.map