"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateConfig = exports.ConfigValidationError = void 0;
const ajv_1 = __importDefault(require("ajv"));
const better_ajv_errors_1 = __importDefault(require("@sidvind/better-ajv-errors"));
class ConfigValidationError extends Error {
    constructor(result) {
        super(result.errors.js.toString());
        this.result = result;
    }
}
exports.ConfigValidationError = ConfigValidationError;
function validateConfig(schema, config) {
    const ajv = new ajv_1.default();
    // If schema is an array, it's actually a collection of schemas, and the
    // 'config' schema will be found within it (i.e. will have '"$id"' set to
    // "config"). Otherwise, it's just a single schema, so just add it as a schema
    // named "config".
    const schemaKey = Array.isArray(schema) ? undefined : 'config';
    ajv.addSchema(schema, schemaKey);
    const validate = ajv.getSchema('config');
    const valid = validate(config);
    let result = { valid };
    if (!valid) {
        result = Object.assign(Object.assign({}, result), { errors: {
                js: (0, better_ajv_errors_1.default)(schema, config, validate.errors, { format: 'js' }),
                cli: (0, better_ajv_errors_1.default)(schema, config, validate.errors, {
                    format: 'cli',
                }),
            } });
    }
    return result;
}
exports.validateConfig = validateConfig;
//# sourceMappingURL=validator.js.map