#! /usr/bin/env node
"use strict";
/* eslint-disable no-use-before-define */
/* eslint-disable no-await-in-loop */
/* eslint-disable no-underscore-dangle */
/* eslint-disable prefer-arrow-callback */
/* eslint-disable func-names */
/* eslint-disable max-classes-per-file */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = require('yargs');
const { promises: fsp, readFileSync } = require('fs');
const { queue } = require('async');
const { join } = require('path');
const models_1 = require("@appland/models");
const { verbose } = require('./utils');
const IndexCommand = require('./cmds/index/index');
const Depends = require('./depends');
const install_agent_1 = __importDefault(require("./cmds/agentInstaller/install-agent"));
const status_1 = __importDefault(require("./cmds/agentInstaller/status"));
const openapi_1 = __importDefault(require("./cmds/openapi/openapi"));
const prune_1 = __importDefault(require("./cmds/prune/prune"));
const record_1 = __importDefault(require("./cmds/record/record"));
const handleWorkingDirectory_1 = require("./lib/handleWorkingDirectory");
const locateAppMapDir_1 = require("./lib/locateAppMapDir");
const OpenCommand = require('./cmds/open/open');
const InspectCommand = require('./cmds/inspect/inspect');
const SequenceDiagramCommand = require('./cmds/sequenceDiagram');
const SequenceDiagramDiffCommand = require('./cmds/sequenceDiagramDiff');
const StatsCommand = require('./cmds/stats/stats');
const ArchiveCommand = require('./cmds/archive/archive');
const RestoreCommand = require('./cmds/archive/restore');
const CompareCommand = require('./cmds/compare/compare');
const CompareReportCommand = require('./cmds/compare-report/compareReport');
const InventoryCommand = require('./cmds/inventory/inventory');
const InventoryReportCommand = require('./cmds/inventory-report/inventoryReport');
const SearchCommand = require('./cmds/search/search');
const RpcCommand = __importStar(require("./cmds/index/rpc"));
const NavieCommand = __importStar(require("./cmds/navie"));
const upload_1 = __importDefault(require("./cmds/upload"));
const sqlErrorLog_1 = __importDefault(require("./lib/sqlErrorLog"));
(0, models_1.setSQLErrorHandler)(sqlErrorLog_1.default);
// eslint-disable-next-line no-unused-expressions
yargs(process.argv.slice(2))
    .command('depends [files]', 'Compute a list of AppMaps that are out of date', (args) => {
    args.option('directory', {
        describe: 'program working directory',
        type: 'string',
        alias: 'd',
    });
    args.positional('files', {
        describe: 'provide an explicit list of dependency files',
    });
    args.option('appmap-dir', {
        describe: 'directory to recursively inspect for AppMaps',
    });
    args.option('base-dir', {
        describe: 'directory to prepend to each dependency source file',
        default: '.',
    });
    args.option('field', {
        describe: 'print a field from each matching AppMap',
    });
    args.option('stdin-files', {
        describe: 'read the list of changed files from stdin, one file per line',
        boolean: true,
    });
    return args.strict();
}, async (argv) => {
    verbose(argv.verbose);
    (0, handleWorkingDirectory_1.handleWorkingDirectory)(argv.directory);
    const appmapDir = await (0, locateAppMapDir_1.locateAppMapDir)(argv.appmapDir);
    let { files } = argv;
    if (argv.stdinFiles) {
        const stdinFileStr = readFileSync(0).toString();
        const stdinFiles = stdinFileStr.split('\n');
        files = (files || []).concat(stdinFiles);
        if (verbose()) {
            console.warn(`Computing depends on ${files.join(', ')}`);
        }
    }
    if (verbose()) {
        console.warn(`Testing AppMaps in ${appmapDir}`);
    }
    const depends = new Depends(appmapDir);
    if (argv.baseDir) {
        depends.baseDir = argv.baseDir;
    }
    if (files) {
        depends.files = files;
    }
    const appMapNames = await depends.depends();
    const values = [];
    if (argv.field) {
        const { field } = argv;
        const q = queue(async (appMapBaseName) => {
            const data = await fsp.readFile(join(appMapBaseName, 'metadata.json'));
            const metadata = JSON.parse(data);
            const value = metadata[field];
            if (value) {
                const tokens = value.split(':');
                values.push(tokens[0]);
            }
            else {
                console.warn(`No ${field} in ${appMapBaseName}`);
            }
        }, 2);
        appMapNames.forEach((name) => q.push(name));
        if (!q.idle())
            await q.drain();
    }
    else {
        appMapNames.forEach((name) => values.push(name));
    }
    console.log(Array.from(new Set(values)).sort().join('\n'));
})
    .command(IndexCommand)
    .command(openapi_1.default)
    .command(install_agent_1.default)
    .command(OpenCommand)
    .command(record_1.default)
    .command(status_1.default)
    .command(StatsCommand)
    .command(InspectCommand)
    .command(SequenceDiagramCommand)
    .command(SequenceDiagramDiffCommand)
    .command(prune_1.default)
    .command(upload_1.default)
    .command(ArchiveCommand)
    .command(RestoreCommand)
    .command(CompareCommand)
    .command(CompareReportCommand)
    .command(InventoryCommand)
    .command(InventoryReportCommand)
    .command(SearchCommand)
    .command(RpcCommand)
    .command(NavieCommand)
    .option('verbose', {
    alias: 'v',
    type: 'boolean',
    description: 'Run with verbose logging',
})
    .fail((msg, err, yargs) => {
    if (msg) {
        console.log(yargs.help());
        console.log(msg);
    }
    else if (err) {
        if (err.cause) {
            console.error(err.message);
            console.error(err.cause);
        }
        else {
            console.error(err);
        }
    }
    process.exit(1);
})
    .strict()
    .demandCommand()
    .help().argv;
//# sourceMappingURL=cli.js.map