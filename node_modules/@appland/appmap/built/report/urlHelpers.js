"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const handlebars_1 = require("handlebars");
const models_1 = require("@appland/models");
const assert_1 = __importDefault(require("assert"));
function buildUrlString(appmapURL, searchParams) {
    const url = new URL(appmapURL);
    Object.keys(searchParams).forEach((key) => url.searchParams.append(key, searchParams[key]));
    return url.toString();
}
function urlHelpers(options) {
    let { baseDir } = options;
    if (!baseDir)
        baseDir = process.cwd();
    const source_url = (location, fileLinenoSeparator = '#L') => {
        // source_location is optional in AppMap spec. Since this helper
        // is called directly from Handlebars templates, declaring location
        // as "location: string" does not guarantee its presence.
        if (!location)
            return;
        if (typeof fileLinenoSeparator === 'object') {
            fileLinenoSeparator = '#L';
        }
        const [path, lineno] = location.split(':');
        if ((0, path_1.isAbsolute)(path))
            return;
        if (path.startsWith('vendor/') || path.startsWith('node_modules/'))
            return;
        if (options.sourceURL) {
            const url = new URL(options.sourceURL.toString());
            if (url.protocol === 'file:') {
                (0, assert_1.default)(baseDir);
                const sourcePath = (0, path_1.relative)(baseDir, (0, path_1.join)(url.pathname, path));
                return new handlebars_1.SafeString([sourcePath, lineno].filter(Boolean).join(fileLinenoSeparator));
            }
            else {
                url.pathname = (0, path_1.join)(url.pathname, path);
                if (lineno)
                    url.hash = `L${lineno}`;
                return new handlebars_1.SafeString(url.toString());
            }
        }
        else {
            return new handlebars_1.SafeString(location);
        }
    };
    const appmap_url = (revisionName, appmap) => {
        let { id } = appmap;
        const path = [revisionName, `${id}.appmap.json`].join('/');
        let url = path;
        if (options.appmapURL)
            url = buildUrlString(options.appmapURL, { path });
        return new handlebars_1.SafeString(url);
    };
    const appmap_diff_url = (appmap) => {
        const path = ['diff', `${appmap.id}.diff.sequence.json`].join('/');
        let url = path;
        if (options.appmapURL)
            url = buildUrlString(options.appmapURL, { path });
        return new handlebars_1.SafeString(url);
    };
    const appmap_url_with_finding = (revisionName, appmap, findingHash) => {
        let { id } = appmap;
        const path = [revisionName, `${id}.appmap.json`].join('/');
        let url = path;
        if (options.appmapURL) {
            const searchParams = { path };
            try {
                const stateObject = { selectedObject: `analysis-finding:${findingHash}` };
                const state = (0, models_1.base64UrlEncode)(JSON.stringify(stateObject));
                searchParams.state = state;
            }
            catch (e) {
                // do not add state
            }
            url = buildUrlString(options.appmapURL, searchParams);
        }
        return new handlebars_1.SafeString(url);
    };
    const source_link = (location, fileLinenoSeparator = '#L') => {
        const label = location;
        const url = source_url(location, fileLinenoSeparator);
        return url ? new handlebars_1.SafeString(`[\`${label}\`](${url})`) : new handlebars_1.SafeString(`\`${label}\``);
    };
    const first_source_link = (locations, fileLinenoSeparator = '#L') => {
        const location = locations.find((loc) => source_url(loc, fileLinenoSeparator));
        if (!location)
            return;
        return source_link(location, fileLinenoSeparator);
    };
    const source_link_html = (location, fileLinenoSeparator = '#L') => {
        const label = location;
        const url = source_url(location, fileLinenoSeparator);
        return url
            ? new handlebars_1.SafeString(`<a href="${url}"><code>${label}</code></a>`)
            : new handlebars_1.SafeString(label);
    };
    return {
        appmap_url,
        appmap_diff_url,
        appmap_url_with_finding,
        first_source_link,
        source_link,
        source_link_html,
        source_url,
    };
}
exports.default = urlHelpers;
//# sourceMappingURL=urlHelpers.js.map