"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const handlebars_1 = __importDefault(require("handlebars"));
const js_yaml_1 = require("js-yaml");
const inspect = (value) => {
    return new handlebars_1.default.SafeString(JSON.stringify(value, null, 2));
};
const length = (...list) => {
    /* const _fn = */ list.pop();
    let result = 0;
    for (const item of list) {
        if (item === undefined || item === null) {
            // pass
        }
        else if (Array.isArray(item)) {
            result += item.length;
        }
        else if (item.constructor === Map) {
            result += item.size;
        }
        else if (typeof item === 'object') {
            result += Object.keys(item).length;
        }
    }
    return result;
};
const coalesce = (...list) => {
    /* const _fn = */ list.pop();
    return list.find((item) => item !== undefined && item !== null && item !== '');
};
const first = (list) => list[0];
const extractArrayValue = (args) => (Array.isArray(args[0]) ? args[0] : args);
const every = (...args) => {
    args = [...args];
    /* const _fn = */ args.pop();
    return args.every((value) => !!value);
};
const eq = (...args) => {
    args = [...args];
    /* const _fn = */ args.pop();
    if (args.length === 0)
        return false;
    const first = args[0];
    return args.every((value) => value === first);
};
const gt = (a, b) => a > b;
const lt = (a, b) => a < b;
const pluralize = (count, singular, plural) => {
    if (typeof plural !== 'string')
        plural = undefined;
    if (count === 1)
        return singular;
    else if (plural)
        return plural;
    else
        return [singular, 's'].join('');
};
const format_as_yaml = (value) => new handlebars_1.default.SafeString((0, js_yaml_1.dump)(value));
const sum = (...args) => {
    args = [...args];
    /* const _fn = */ args.pop();
    const values = extractArrayValue(args);
    return values.reduce((a, b) => a + (b || 0), 0);
};
const subtract = (...args) => {
    args = [...args];
    /* const _fn = */ args.pop();
    const initial = args.shift() || 0;
    return args.reduce((a, b) => a - (b || 0), initial);
};
const divide = (...args) => {
    args = [...args];
    /* const _fn = */ args.pop();
    const values = extractArrayValue(args);
    const initial = values.shift() || 0;
    return values.reduce((a, b) => a / (b || 1), initial);
};
const format_as_percentage = (value, precision) => {
    return `${(value * 100).toFixed(precision)}%`;
};
// TODO: Customize this per-language, e.g. 'module' for Ruby.
const lang_package_alias = () => 'package';
const keys = (obj) => {
    if (Array.isArray(obj))
        return obj;
    if (obj.constructor === Map)
        return Array.from(obj.keys());
    if (typeof obj === 'object')
        return Object.keys(obj);
    return [];
};
const values = (obj) => {
    if (Array.isArray(obj))
        return obj;
    if (obj.constructor === Map)
        return Array.from(obj.values());
    if (typeof obj === 'object')
        return Object.values(obj);
    return [];
};
const words = (text, count) => {
    if (typeof count === 'object')
        count = 3;
    const tokens = text.split(/\s+/);
    if (tokens.length < 3)
        return tokens.join(' ');
    else
        return tokens.slice(0, count).join(' ') + ' ...';
};
exports.default = {
    divide,
    first,
    format_as_percentage,
    format_as_yaml,
    keys,
    inspect,
    lang_package_alias,
    length,
    coalesce,
    every,
    eq,
    gt,
    lt,
    pluralize,
    subtract,
    sum,
    values,
    words,
};
//# sourceMappingURL=helpers.js.map