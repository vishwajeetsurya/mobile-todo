"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const events_1 = __importDefault(require("events"));
const functionStats_1 = __importDefault(require("../functionStats"));
const findCodeObjects_1 = __importDefault(require("../search/findCodeObjects"));
const findEvents_1 = __importDefault(require("../search/findEvents"));
class Context extends events_1.default {
    constructor(appmapDir, codeObjectId) {
        super();
        this.appmapDir = appmapDir;
        this.filters = [];
        this.saves = [];
        this._codeObjectId = codeObjectId;
    }
    get codeObjectId() {
        return this._codeObjectId;
    }
    set codeObjectId(codeObjectId) {
        this._codeObjectId = codeObjectId;
        this.codeObjectMatches = undefined;
        this.stats = undefined;
    }
    async findCodeObjects() {
        const finder = new findCodeObjects_1.default(this.appmapDir, this.codeObjectId);
        this.codeObjectMatches = await finder.find((count) => this.emit('start', count), () => this.emit('increment'));
        this.emit('stop');
    }
    async buildStats() {
        (0, assert_1.default)(this.codeObjectMatches, `codeObjectMatches is not yet computed`);
        this.emit('start', this.codeObjectMatches.length);
        const result = [];
        await Promise.all(this.codeObjectMatches.map(async (codeObjectMatch) => {
            const findEvents = new findEvents_1.default(codeObjectMatch.appmap, codeObjectMatch.codeObject);
            findEvents.filter(this.filters);
            const events = await findEvents.matches();
            result.push(...events);
            this.emit('increment');
        }));
        this.emit('stop');
        this.emit('collate');
        this.stats = new functionStats_1.default(result);
    }
    save() {
        this.saves.push(this.codeObjectId);
    }
    async filter(filter) {
        this.filters.push(filter);
        await this.buildStats();
    }
    async clearFilters() {
        this.filters = [];
        await this.buildStats();
    }
    async undoFilter() {
        if (this.filters.length > 0) {
            this.filters.pop();
        }
        await this.buildStats();
    }
}
exports.default = Context;
//# sourceMappingURL=context.js.map