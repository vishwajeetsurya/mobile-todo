"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfigurationV2 = exports.setConfigurationV2 = exports.getConfigurationV1 = exports.setConfigurationV1 = exports.Configuration = void 0;
const rpc_1 = require("@appland/rpc");
const path_1 = require("path");
const loadAppMapConfig_1 = __importDefault(require("../lib/loadAppMapConfig"));
const llmConfiguration_1 = require("./llmConfiguration");
const console_1 = require("console");
class Configuration {
    constructor(projectDirectories, appmapConfigFilePaths) {
        this.projectDirectories = projectDirectories;
        this.appmapConfigFilePaths = appmapConfigFilePaths;
    }
    async appmapDirectories() {
        const appmapDirectories = new Array();
        for (const appmapConfigFile of this.appmapConfigFilePaths) {
            const directory = (0, path_1.dirname)(appmapConfigFile);
            const appmapConfig = await (0, loadAppMapConfig_1.default)(appmapConfigFile);
            if (appmapConfig)
                appmapDirectories.push({ directory, appmapConfig });
        }
        return appmapDirectories;
    }
    static async buildFromRpcParams(params) {
        return new Configuration(params.projectDirectories || [], params.appmapConfigFiles || []);
    }
}
exports.Configuration = Configuration;
let config = new Configuration([], []);
function configuration() {
    return config;
}
exports.default = configuration;
function setConfigurationV1() {
    return {
        name: rpc_1.ConfigurationRpc.V1.Set.Method,
        handler: async ({ appmapConfigFiles }) => {
            // For V1, the project directories will be inferred from the available appmap.yml files.
            // Each appmap.yml file is assumed to be in the root of a project directory.
            const projectDirectories = appmapConfigFiles.map((file) => (0, path_1.dirname)(file));
            config = await Configuration.buildFromRpcParams({
                appmapConfigFiles,
                projectDirectories,
            });
            return undefined;
        },
    };
}
exports.setConfigurationV1 = setConfigurationV1;
function getConfigurationV1() {
    return {
        name: rpc_1.ConfigurationRpc.V1.Get.Method,
        handler: () => {
            return {
                appmapConfigFiles: config.appmapConfigFilePaths,
            };
        },
    };
}
exports.getConfigurationV1 = getConfigurationV1;
function setConfigurationV2() {
    return {
        name: rpc_1.ConfigurationRpc.V2.Set.Method,
        handler: async (params) => {
            (0, console_1.warn)(`Setting RPC configuration: ${JSON.stringify(params)}`);
            config = await Configuration.buildFromRpcParams(params);
            return undefined;
        },
    };
}
exports.setConfigurationV2 = setConfigurationV2;
function getConfigurationV2() {
    return {
        name: rpc_1.ConfigurationRpc.V2.Get.Method,
        handler: () => (Object.assign({ appmapConfigFiles: config.appmapConfigFilePaths, projectDirectories: config.projectDirectories }, (0, llmConfiguration_1.getLLMConfiguration)())),
    };
}
exports.getConfigurationV2 = getConfigurationV2;
//# sourceMappingURL=configuration.js.map