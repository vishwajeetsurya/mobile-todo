"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorMessage = exports.isRpcError = exports.RpcError = void 0;
const console_1 = require("console");
const util_1 = require("util");
class RpcError extends Error {
    static fromException(err) {
        let rpcError;
        (0, console_1.warn)(`Handling exception: ${(0, util_1.inspect)(err)}`);
        if (err.stack)
            (0, console_1.warn)(`Stack trace: ${err.stack}`);
        if (err.cause)
            (0, console_1.warn)(`Cause: ${String(err.cause)}`);
        if (isRpcError(err)) {
            rpcError = { code: err.code, message: err.message };
            const data = {};
            if (err.data) {
                (0, console_1.warn)(`Data: ${err.data}`);
                try {
                    data.data = JSON.parse(JSON.stringify(err.data));
                }
                catch (_a) {
                    // fallthrough
                }
            }
            if (err.cause) {
                try {
                    data.cause = JSON.parse(JSON.stringify(err.cause));
                }
                catch (_b) {
                    // fallthrough
                }
            }
            if (err.stack)
                data.stack = err.stack;
            if (Object.keys(data).length !== 0)
                rpcError.data = data;
        }
        else {
            rpcError = { code: 500, message: errorMessage(err) };
        }
        return rpcError;
    }
    constructor(code, message, data) {
        super(message);
        this.code = code;
        this.data = data;
    }
}
exports.RpcError = RpcError;
function isRpcError(err) {
    return err.code !== undefined;
}
exports.isRpcError = isRpcError;
function errorMessage(err) {
    if (err instanceof Error) {
        return err.message;
    }
    else if (typeof err === 'string') {
        return err;
    }
    else {
        return `Unknown error: ${err}`;
    }
}
exports.errorMessage = errorMessage;
//# sourceMappingURL=rpc.js.map