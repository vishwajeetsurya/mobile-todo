"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const rpc_1 = require("@appland/rpc");
const sequence_diagram_1 = require("@appland/sequence-diagram");
const models_1 = require("@appland/models");
const promises_1 = require("fs/promises");
const appmapFile_1 = require("./appmapFile");
const interpretFilter_1 = __importDefault(require("./interpretFilter"));
const path_1 = require("path");
const configuration_1 = __importDefault(require("../configuration"));
async function handler(appmapId, options) {
    let { filter: filterArg, diagramOptions: diagramOptionsArg, format: formatArg, formatOptions: formatOptionsArg, } = options;
    const diagramFormat = (formatArg || sequence_diagram_1.FormatType.JSON);
    const diagramFormatOptions = formatOptionsArg || {};
    const filter = (0, interpretFilter_1.default)(filterArg);
    let filePath = (0, appmapFile_1.appmapFile)(appmapId);
    if (!(0, path_1.isAbsolute)(filePath)) {
        const directories = await (0, configuration_1.default)().appmapDirectories();
        if (directories.length === 1)
            filePath = (0, path_1.join)(directories[0].directory, filePath);
    }
    const appmapStr = await (0, promises_1.readFile)(filePath, 'utf8');
    let appmap = (0, models_1.buildAppMap)().source(appmapStr).build();
    if (filter) {
        appmap = filter.filter(appmap, []);
    }
    const sequenceDiagramOptions = diagramOptionsArg
        ? diagramOptionsArg
        : { loops: true };
    const specification = sequence_diagram_1.Specification.build(appmap, sequenceDiagramOptions);
    const diagram = (0, sequence_diagram_1.buildDiagram)((0, appmapFile_1.appmapFile)(appmapId), appmap, specification);
    let result = (0, sequence_diagram_1.format)(diagramFormat, diagram, (0, appmapFile_1.appmapFile)(appmapId), diagramFormatOptions).diagram;
    if (diagramFormat === sequence_diagram_1.FormatType.JSON)
        result = JSON.parse(result);
    return result;
}
exports.handler = handler;
function sequenceDiagram() {
    return {
        name: rpc_1.AppMapRpc.SequenceDiagramFunctionName,
        handler: (args) => handler(args.appmap, args),
    };
}
exports.default = sequenceDiagram;
//# sourceMappingURL=sequenceDiagram.js.map