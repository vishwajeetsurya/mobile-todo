"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const rpc_1 = require("@appland/rpc");
const promises_1 = require("fs/promises");
const rpc_2 = require("../rpc");
const path_1 = require("path");
const configuration_1 = __importDefault(require("../configuration"));
function metadata() {
    async function handler(args) {
        let { appmap: appmapArg } = args;
        let appmapId = appmapArg;
        if (appmapId.endsWith('.appmap.json'))
            appmapId = appmapId.slice(0, '.appmap.json'.length * -1);
        if (!(0, path_1.isAbsolute)(appmapId)) {
            const directories = await (0, configuration_1.default)().appmapDirectories();
            if (directories.length === 1)
                appmapId = (0, path_1.join)(directories[0].directory, appmapId);
        }
        let metadataStr;
        try {
            metadataStr = await (0, promises_1.readFile)((0, path_1.join)(appmapId, 'metadata.json'), 'utf8');
        }
        catch (_a) {
            throw new rpc_2.RpcError(404, `${appmapId} metadata not found`);
        }
        return JSON.parse(metadataStr);
    }
    return { name: rpc_1.AppMapRpc.MetadataFunctionName, handler };
}
exports.default = metadata;
//# sourceMappingURL=metadata.js.map