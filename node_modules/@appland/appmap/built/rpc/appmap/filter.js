"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.appmapFilterHandler = void 0;
const rpc_1 = require("@appland/rpc");
const models_1 = require("@appland/models");
const promises_1 = require("fs/promises");
const appmapFile_1 = require("./appmapFile");
const interpretFilter_1 = __importDefault(require("./interpretFilter"));
const console_1 = require("console");
const configuration_1 = __importDefault(require("../configuration"));
const path_1 = require("path");
async function appmapFilterHandler(args) {
    let { appmap: appmapId } = args;
    const { filter: filterArg } = args;
    let filter = (0, interpretFilter_1.default)(filterArg);
    if (!filter) {
        filter = new models_1.AppMapFilter();
    }
    let filePath = (0, appmapFile_1.appmapFile)(appmapId);
    if (!(0, path_1.isAbsolute)(filePath)) {
        const directories = await (0, configuration_1.default)().appmapDirectories();
        if (directories.length === 1)
            filePath = (0, path_1.join)(directories[0].directory, filePath);
    }
    const appmapStr = await (0, promises_1.readFile)(filePath, 'utf8');
    const appmap = (0, models_1.buildAppMap)().source(appmapStr).build();
    return filter.filter(appmap, []);
}
exports.appmapFilterHandler = appmapFilterHandler;
function appmapFilter() {
    (0, console_1.warn)(`RPC handler ${rpc_1.AppMapRpc.FilterFunctionName} is deprecated, use ${rpc_1.AppMapRpc.DataFunctionName} instead`);
    return { name: rpc_1.AppMapRpc.FilterFunctionName, handler: appmapFilterHandler };
}
exports.default = appmapFilter;
//# sourceMappingURL=filter.js.map