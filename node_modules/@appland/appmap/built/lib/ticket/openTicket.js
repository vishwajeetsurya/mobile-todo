"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_HELP_MSG = void 0;
const chalk_1 = __importDefault(require("chalk"));
const userInteraction_1 = __importDefault(require("../../cmds/userInteraction"));
const telemetry_1 = __importDefault(require("../../telemetry"));
const zendesk_1 = __importDefault(require("./zendesk"));
exports.DEFAULT_HELP_MSG = ' ';
const validation_1 = require("./validation");
async function openTicket(errors, helpMsg = exports.DEFAULT_HELP_MSG, prompt = true) {
    var _a;
    errors = !Array.isArray(errors) ? [errors] : errors;
    userInteraction_1.default.progress(`
Help is available from the AppMap support team!${helpMsg}
`);
    if (await userInteraction_1.default.confirm(`Details of the error will be provided to the support team.

Would you like to review the details here before submitting the support ticket?`)) {
        userInteraction_1.default.error(errors.join('\n'));
    }
    if (prompt) {
        const message = `Would you like to open a support request?`;
        const { openTicket } = await userInteraction_1.default.prompt({
            type: 'confirm',
            name: 'openTicket',
            default: true,
            message,
        });
        if (!openTicket) {
            userInteraction_1.default.progress([
                `
You've elected not to open a support request for this problem.

If you change your mind, you can always reach us by email: support@appmap.io
`,
            ].join('\n'));
            return;
        }
    }
    userInteraction_1.default.progress(`The AppMap team will respond to you by email. Please provide your name and email address to open the support request:
`);
    const { name, email } = await userInteraction_1.default.prompt([
        {
            name: 'name',
            message: `Your name`,
            validate: (v) => (0, validation_1.isValidName)(v) || 'Please enter your name',
        },
        {
            name: 'email',
            message: `Your email address`,
            validate: (v) => (0, validation_1.isValidEmail)(v) || 'Please enter a valid email address',
        },
    ]);
    try {
        const id = await (0, zendesk_1.default)(errors, name, email);
        userInteraction_1.default.success(`Thank you very much for reporting this problem.

Ticket ${id} has been successfully created on your behalf.

Please monitor your email for updates. Thank you for using AppMap!`, 'left');
    }
    catch (e) {
        const he = e;
        const response = he.response;
        let eventName;
        let error = undefined;
        if (response) {
            eventName = `open-ticket:${((_a = he.response) === null || _a === void 0 ? void 0 : _a.status) === 429 ? 'rate-limit' : 'error'}`;
            error = response.toString();
        }
        else {
            eventName = 'open-ticket:no-response';
        }
        telemetry_1.default.sendEvent({
            name: eventName,
            properties: {
                error,
            },
        });
        userInteraction_1.default.error(`${chalk_1.default.red('!')} A failure occurred attempting to create a ticket.

${chalk_1.default.red('!')} This problem has been reported to the AppMap team.`);
    }
}
exports.default = openTicket;
//# sourceMappingURL=openTicket.js.map