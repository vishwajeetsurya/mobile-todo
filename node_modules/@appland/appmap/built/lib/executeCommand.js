"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeCommand = void 0;
const chalk_1 = __importDefault(require("chalk"));
const child_process_1 = require("child_process");
const utils_1 = require("../utils");
function commandStyle(message) {
    return chalk_1.default.gray(`$ ${message}`);
}
function executeCommand(cmd, printCommand = (0, utils_1.verbose)(), printStdout = (0, utils_1.verbose)(), printStderr = (0, utils_1.verbose)(), okCodes = [0], cwd) {
    if (printCommand)
        console.warn(commandStyle(cmd));
    const commandOptions = {};
    if (cwd)
        commandOptions.cwd = cwd;
    const command = (0, child_process_1.exec)(cmd, commandOptions);
    const result = [];
    const stderr = [];
    if (command.stdout) {
        command.stdout.addListener('data', (data) => {
            if (printStdout)
                process.stdout.write(data);
            result.push(data);
        });
    }
    if (command.stderr) {
        if (printStderr)
            command.stderr.pipe(process.stdout);
        else
            command.stderr.addListener('data', (data) => stderr.push(data));
    }
    return new Promise((resolve, reject) => {
        command.addListener('exit', (code, signal) => {
            if (signal || (code !== null && okCodes.includes(code))) {
                if (signal) {
                    console.warn(`Command "${cmd}" killed by signal ${signal}, exited with code ${code}`);
                }
                resolve(result.join(''));
            }
            else {
                if (!printCommand)
                    console.warn(commandStyle(cmd));
                console.warn(stderr.join(''));
                reject(new Error(`Command failed with code ${code}`));
            }
        });
    });
}
exports.executeCommand = executeCommand;
//# sourceMappingURL=executeCommand.js.map