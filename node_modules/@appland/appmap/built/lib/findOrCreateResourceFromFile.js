"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const INDEXES = new Map();
async function buildResource(resourceFile, buildFn) {
    const resource = INDEXES.get(resourceFile);
    if (resource === null || resource === void 0 ? void 0 : resource.index)
        return resource.index;
    if (resource === null || resource === void 0 ? void 0 : resource.indexBuildingPromise) {
        return (await resource.indexBuildingPromise);
    }
    const indexBuildingPromise = buildFn().then((index) => {
        INDEXES.set(resourceFile, { index, indexBuildingPromise: null });
        return index;
    });
    INDEXES.set(resourceFile, { index: null, indexBuildingPromise });
    return await indexBuildingPromise;
}
async function findOrCreateResourceFromFile(resourceFile, clobber, restoreFn, buildFn) {
    if ((0, fs_1.existsSync)(resourceFile)) {
        if (clobber) {
            console.warn(`File ${resourceFile} already exists and --clobber option is set, so it will be rebuilt.`);
            (0, fs_1.rmSync)(resourceFile, { recursive: true, force: true });
        }
    }
    let result;
    if (!(0, fs_1.existsSync)(resourceFile)) {
        console.log(`Building index in file: ${resourceFile}`);
        result = await buildResource(resourceFile, buildFn);
    }
    else {
        console.log(`Using existing index from file: ${resourceFile}`);
        result = restoreFn();
    }
    return result;
}
exports.default = findOrCreateResourceFromFile;
//# sourceMappingURL=findOrCreateResourceFromFile.js.map