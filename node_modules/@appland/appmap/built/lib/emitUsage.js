"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const telemetry_1 = require("../telemetry");
const repositoryInfo_1 = __importDefault(require("./repositoryInfo"));
const promises_1 = require("node:fs/promises");
const node_path_1 = require("node:path");
const loadAppMapConfig_1 = __importDefault(require("./loadAppMapConfig"));
const node_console_1 = require("node:console");
async function buildMetadata(appmapDir, metadata) {
    const repository = await telemetry_1.Git.repository(appmapDir);
    const result = {
        name: metadata.name,
        app: metadata.app,
        language: metadata.language,
        client: metadata.client,
        frameworks: metadata.frameworks,
        recorder: metadata.recorder,
    };
    if (repository) {
        const branch = await telemetry_1.Git.branch(appmapDir);
        const commit = await telemetry_1.Git.commit(appmapDir);
        const git = {
            repository: (0, repositoryInfo_1.default)(repository),
        }; // Technically, branch and commit are required
        if (branch)
            git.branch = branch;
        if (commit)
            git.commit = commit;
        result.git = git;
    }
    return result;
}
async function emitUsage(appmapDir, numEvents, numAppMaps, sampleMetadata) {
    let metadata;
    if (sampleMetadata)
        metadata = await buildMetadata(appmapDir, sampleMetadata);
    const appmapConfig = await (0, loadAppMapConfig_1.default)();
    if (!appmapConfig)
        (0, node_console_1.warn)(`Unable to load appmap.yml config file`);
    const dto = {
        events: numEvents,
        appmaps: numAppMaps,
        metadata,
        ci: process.env.CI !== undefined,
        appmapConfig,
    };
    try {
        const stats = await (0, promises_1.stat)('.appmap');
        if (stats.isDirectory()) {
            const runStatsDirectory = (0, node_path_1.join)('.appmap', 'run-stats');
            await (0, promises_1.mkdir)(runStatsDirectory, { recursive: true });
            const statsFilePath = (0, node_path_1.join)(runStatsDirectory, `${Date.now().toString()}.json`);
            await (0, promises_1.writeFile)(statsFilePath, JSON.stringify(dto));
            return statsFilePath;
        }
    }
    catch (e) {
        if (e instanceof Error && 'code' in e && e.code !== 'ENOENT') {
            console.warn(`Unable to write run stats: ${e}`);
        }
    }
}
exports.default = emitUsage;
//# sourceMappingURL=emitUsage.js.map