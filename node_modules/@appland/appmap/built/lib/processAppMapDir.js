"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const console_1 = require("console");
const utils_1 = require("../utils");
const assert_1 = __importDefault(require("assert"));
async function processAppMapDir(name, pool, taskFunction, appmapDir, appmapFiles, resultHandler) {
    console.log([name, '...'].join(''));
    let files;
    if (appmapFiles) {
        files = appmapFiles;
    }
    else {
        (0, assert_1.default)(appmapDir, 'appmapDir must be specified if appmapFiles is not specified');
        files = await (0, utils_1.findFiles)(appmapDir, '.appmap.json');
    }
    const oversized = new Set();
    const unhandledErrors = new Array();
    const errors = new Array();
    await Promise.all(files.map(async (file) => new Promise((resolve) => pool.runTask(taskFunction(file), async (err, result) => {
        if (err) {
            (0, console_1.warn)(`Unhandled error: ${err}`);
            unhandledErrors.push(err);
            errors.push(err);
        }
        else if (result.oversized) {
            (0, console_1.warn)(`Skipping oversized AppMap ${file}`);
            oversized.add(file);
        }
        else if (result.error) {
            (0, console_1.warn)(`${name} failed to process ${file}: ${result.error}`);
            errors.push(result.error);
        }
        else {
            if (resultHandler) {
                try {
                    await resultHandler(file, result);
                }
                catch (err) {
                    (0, console_1.warn)(`${name} failed to handle processed result from ${file}: ${err.message}`);
                }
            }
        }
        resolve();
    }))));
    return { oversized, errors, unhandledErrors, numProcessed: files.length };
}
exports.default = processAppMapDir;
//# sourceMappingURL=processAppMapDir.js.map