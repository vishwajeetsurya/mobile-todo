##  AppMap configuration report

Success! Your project has been successfully configured to record AppMaps when
you run your tests.

> **[Continue with AppMap Setup >>](https://getappmap.com/github/configuration_report)**

<hr/>

The following sections contain detailed information about the AppMap integration with your project.

<details>
<summary>
<h3><a id="data-sources">AppMap data sources</a></h3>
</summary>

In GitHub Actions and other CI systems, AppMaps are created by recording
test cases. Here's how the AppMaps in this project were created:

{{#if (eq (length appmapCountByRecorderName) 1) }}
| Number of AppMaps | Type of recording |
| --- | --- |
{{#each appmapCountByRecorderName}}
| {{@this}} | {{@key}} |
{{/each}}
{{else}}
```mermaid
pie showData
  title Sources of AppMap data in this project
{{#each appmapCountByRecorderName}}
  "{{@key}}" : {{@this}}
{{/each}}
```
{{/if}}

</details>

<details>
<summary>
<h3><a id="code-profile">Code recording settings</a></h3>
</summary>

Your _appmap.yml_ configuration file specifies all the code that you want AppMap to instrument and record.
By default, sub-modules of any requested code are recorded as well. In this project, the packages specified
in _appmap.yml_ are:

```yaml
{{{ format_as_yaml appmapConfig.packages }}}```

By applying this configuration to your {{ appmapConfig.language }} project, AppMap has recorded the 
following packages and modules:

{{#each (packages_matching_configuration packages appmapConfig.packages) }}`{{ @this }}` {{/each}}

</details>

<details>
<summary>
<h3><a id="ws-api-profile">Web service API profile</a></h3>
</summary>

When you record AppMaps that include HTTP server requests, AppMap automatically generates OpenAPI definitions
based on the observed data.

{{#if (length appmapCountByHTTPServerRequestCount) }}

**{{ format_as_percentage 
  (divide
    (subtract 
      (sum (values appmapCountByRecorderName))
      (coalesce appmapCountByHTTPServerRequestCount.[0] 0)
    )
    (sum (values appmapCountByRecorderName))
  ) 
  }}** of the AppMaps in this project contain **at least one** HTTP server request.


**{{ format_as_percentage 
  (divide
    (subtract 
      (sum (values appmapCountByRecorderName))
      (coalesce appmapCountByHTTPServerRequestCount.[0] 0)
      (coalesce appmapCountByHTTPServerRequestCount.[1] 0)
    )
    (sum (values appmapCountByRecorderName))
  ) 
  }}** of the AppMaps in this project contain **more than one** HTTP server request.

Here's **a summary of the web service routes** that are provided by this project:

{{#each routeCountByResource}}`{{@key}}` {{/each}}

And here are the different content types served by the API:

| Response Content Type | Number of Routes |
| --- | --- |
  {{#each routeCountByContentType}}
| {{@key}} | {{@this}} |
  {{/each}}

As you change your code and tests, AppMap will automatically update the OpenAPI definitions. 
You'll see a summary of the REST API changes in each pull request.

{{~else~}}
This project doesn't have any AppMaps that contain HTTP server requests. If your app provides
web service APIs, and you don't see any HTTP server requests here, you can add some test cases that 
exercise the HTTP server. The more of these type of tests you add,
the better the AppMap data will be for generating OpenAPI definitions and comparing the API
changes in each pull request.
{{/if}}

</details>

<details>
<summary>
<h3><a id="sql-profile">SQL profile</a></h3>
</summary>

When your code makes a SQL query, AppMap records the SQL query in detail. It even parses the queries
to figure out which tables your app is using, and how it's using them.

{{#if (length appmapCountBySQLQueryCount) }}


**{{ format_as_percentage 
  (divide
    (subtract 
      (sum (values appmapCountByRecorderName))
      (coalesce appmapCountBySQLQueryCount.[0] 0)
    )
    (sum (values appmapCountByRecorderName))
  ) 
  }}** of the AppMaps in this project contain **at least one** SQL query.


**{{ format_as_percentage 
  (divide
    (subtract 
      (sum (values appmapCountByRecorderName))
      (coalesce appmapCountBySQLQueryCount.[0] 0)
      (coalesce appmapCountBySQLQueryCount.[1] 0)
    )
    (sum (values appmapCountByRecorderName))
  ) 
  }}** of the AppMaps in this project contain **more than one** SQL query.

{{#if (length sqlTables) }}

Here are the SQL tables that are present in the observed queries:

{{#each sqlTables}}`{{@this}}` {{/each}}
{{/if}}

{{~else~}}
This project doesn't have any AppMaps of SQL queries. If your app uses a database,
and you don't see SQL queries here, you can add some test cases that interact with the database. The more of these type of tests you add,
the better the AppMap data will be for analyzing the SQL changes in each pull request.
{{/if}}

</details>

<details>
<summary>
<h3><a id="large-appmaps">Large AppMaps</a></h3>
</summary>

Some tests can produce large AppMaps, because they exercise longer or highly repeated code paths. 
AppMap runtime code review is optimized for AppMaps that 
are less than 10 MB in size. You may want to consider disabling AppMap for tests that produce
large AppMaps, since they can slow down your CI job and they are hard to analyze. Also, note that
AppMaps greater than 50 MB in size will not be analyzed at all.

You can disable recording of a test case by adding a code comment or annotation to the test case file.
Learn how by visiting the 
[reference documentation for `appmap-{{ appmapConfig.language }}`](https://appmap.io/docs/reference/appmap-{{ agent_reference_name appmapConfig.language }}.html).

{{#if (length largeAppMaps)}}
Here are the largest AppMaps that are greater than 1 MB:

| Size | Location | Test name | AppMap path |
| --- | --- | --- | --- |
{{#each largeAppMaps}}
| {{ format_mb size }} | {{ sourceLocation }} | {{ name }} | {{ @key}} |
{{/each}}
{{else}}
This project doesn't have any AppMaps that are greater than 1 MB in size.
{{/if}}

</details>

<details>
<summary>
<h3><a id="frequent-functions">Frequently recorded functions</a></h3>
</summary>

The AppMap configuration file _appmap.yml_ specifies which functions to record. 
Some functions may be called very frequently, adding little to the understandability of the code
while adding a lot of overhead to the AppMap recording process. 

Note that some functions are automatically added to the recording by
the AppMap agent. For example, the AppMap agent automatically records functions that are
relevant to detecting security flaws and performance problems. If you disable recording of these
functions, then some problems may become undetectable.

You can disable recording of a class or function by updating the _appmap.yml_ configuration file.
Learn how by visiting the 
[reference documentation for `appmap-{{ appmapConfig.language }}`](https://appmap.io/docs/reference/appmap-{{ agent_reference_name appmapConfig.language }}.html).

{{#if (length frequentFunctions)}}
Here are some of the most frequently recorded functions in this project:

| Number of occurrences | Function name | Source location |
| --- | --- | --- |
{{#each frequentFunctions}}
| {{ count }} | {{ function_name @key }} | {{ location }} |
{{/each}}
{{else}}
This project doesn't have any recorded functions that occur more than 1000 times.
{{/if}}

</details>

### Learn more

To learn more about AppMap, visit
[appmap.io/docs](https://appmap.io/docs).
