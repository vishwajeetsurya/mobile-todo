import AgentSelectionService from '../services/agent-selection-service';
import ClassificationService from '../services/classification-service';
import CodeSelectionService from '../services/code-selection-service';
import CompletionService from '../services/completion-service';
import MemoryService from '../services/memory-service';
import ProjectInfoService from '../services/project-info-service';
import InteractionHistory from '../interaction-history';
import Command from '../command';
import { ChatHistory, ClientRequest } from '../navie';
export type ExplainOptions = {
    tokenLimit: number;
    responseTokens: number;
};
export default class ExplainCommand implements Command {
    private readonly options;
    readonly interactionHistory: InteractionHistory;
    private readonly completionService;
    private readonly classifierService;
    private readonly agentSelectionService;
    private readonly codeSelectionService;
    private readonly projectInfoService;
    private readonly memoryService;
    constructor(options: ExplainOptions, interactionHistory: InteractionHistory, completionService: CompletionService, classifierService: ClassificationService, agentSelectionService: AgentSelectionService, codeSelectionService: CodeSelectionService, projectInfoService: ProjectInfoService, memoryService: MemoryService);
    execute(clientRequest: ClientRequest, chatHistory?: ChatHistory): AsyncIterable<string>;
}
