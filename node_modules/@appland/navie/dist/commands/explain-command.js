"use strict";
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const console_1 = require("console");
const agent_1 = require("../agent");
class ExplainCommand {
    constructor(options, interactionHistory, completionService, classifierService, agentSelectionService, codeSelectionService, projectInfoService, memoryService) {
        this.options = options;
        this.interactionHistory = interactionHistory;
        this.completionService = completionService;
        this.classifierService = classifierService;
        this.agentSelectionService = agentSelectionService;
        this.codeSelectionService = codeSelectionService;
        this.projectInfoService = projectInfoService;
        this.memoryService = memoryService;
    }
    execute(clientRequest, chatHistory) {
        return __asyncGenerator(this, arguments, function* execute_1() {
            var _a, e_1, _b, _c;
            const { question: baseQuestion, codeSelection } = clientRequest;
            const contextLabelsFn = this.classifierService.classifyQuestion(baseQuestion, chatHistory);
            const projectInfoResponse = yield __await(this.projectInfoService.lookupProjectInfo());
            const projectInfo = Array.isArray(projectInfoResponse)
                ? projectInfoResponse
                : [projectInfoResponse];
            const contextLabels = yield __await(contextLabelsFn);
            (0, console_1.warn)(`Classification: ${contextLabels
                .map((label) => [label.name, label.weight].join('='))
                .join(', ')}`);
            const { question, agent: mode } = this.agentSelectionService.selectAgent(baseQuestion, contextLabels);
            const tokensAvailable = () => this.options.tokenLimit -
                this.options.responseTokens -
                this.interactionHistory.computeTokenSize();
            const aggregateQuestion = [
                ...(chatHistory || [])
                    .filter((message) => message.role === 'user')
                    .map((message) => message.content),
                question,
                codeSelection,
            ]
                .filter(Boolean)
                .join('\n\n');
            const agentOptions = new agent_1.AgentOptions(question, aggregateQuestion, (chatHistory === null || chatHistory === void 0 ? void 0 : chatHistory.map((message) => message.content)) || [], projectInfo, codeSelection, contextLabels);
            const isArchitecture = contextLabels === null || contextLabels === void 0 ? void 0 : contextLabels.filter((label) => label.weight === 'high').some((label) => label.name === 'architecture' || label.name === 'overview');
            this.projectInfoService.promptProjectInfo(isArchitecture, projectInfo);
            const agentResponse = yield __await(mode.perform(agentOptions, tokensAvailable));
            if (agentResponse) {
                yield yield __await(agentResponse.response);
                if (agentResponse.abort)
                    return yield __await(void 0);
            }
            if (codeSelection)
                this.codeSelectionService.addSystemPrompt();
            const hasChatHistory = chatHistory && chatHistory.length > 0;
            if (hasChatHistory) {
                yield __await(this.memoryService.predictSummary(chatHistory));
            }
            if (codeSelection)
                this.codeSelectionService.applyCodeSelection(codeSelection);
            mode.applyQuestionPrompt(question);
            const response = this.completionService.complete({ temperature: mode.temperature });
            try {
                for (var _d = true, response_1 = __asyncValues(response), response_1_1; response_1_1 = yield __await(response_1.next()), _a = response_1_1.done, !_a;) {
                    _c = response_1_1.value;
                    _d = false;
                    try {
                        const token = _c;
                        yield yield __await(token);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = response_1.return)) yield __await(_b.call(response_1));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
}
exports.default = ExplainCommand;
