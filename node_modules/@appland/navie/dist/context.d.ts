export declare namespace ContextV1 {
    type ContextRequest = {
        tokenCount: number;
        vectorTerms: string[];
    };
    type ContextItem = {
        name: string;
        score?: number;
        content: string;
    };
    type ContextResponse = {
        sequenceDiagrams: string[];
        codeSnippets: {
            [key: string]: string;
        };
        codeObjects: string[];
    };
    type ContextProvider = (request: ContextRequest & {
        version: 1;
        type: 'search';
    }) => Promise<ContextResponse>;
}
export declare namespace ContextV2 {
    enum ContextItemType {
        SequenceDiagram = "sequence-diagram",
        CodeSnippet = "code-snippet",
        DataRequest = "data-request",
        HelpDoc = "help-doc"
    }
    type ContextItem = {
        type: ContextItemType;
        content: string;
        score?: number;
    };
    type FileContextItem = ContextItem & {
        type: ContextItemType.CodeSnippet | ContextItemType.SequenceDiagram | ContextItemType.DataRequest;
        directory: string;
        location: string;
    };
    function isFileContextItem(contextItem: ContextItem): contextItem is FileContextItem;
    enum ContextLabelName {
        HelpWithAppMap = "help-with-appmap",
        Architecture = "architecture",
        Feature = "feature",
        Overview = "overview",
        Troubleshoot = "troubleshoot",
        Explain = "explain",
        Generate = "generate"
    }
    enum ContextLabelWeight {
        High = "high",
        Medium = "medium"
    }
    type ContextLabel = {
        name: ContextLabelName | string;
        weight: ContextLabelWeight | string;
    };
    type ContextRequest = ContextV1.ContextRequest & {
        recent?: boolean;
        locations?: string[];
        itemTypes?: ContextItemType[];
        labels?: ContextLabel[];
    };
    type ContextResponse = Array<ContextItem | FileContextItem>;
    type ContextProvider = (request: ContextRequest & {
        version: 2;
        type: 'search';
    }) => Promise<ContextResponse>;
}
