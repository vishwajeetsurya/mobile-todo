/// <reference types="node" />
import EventEmitter from 'events';
import InteractionState from './interaction-state';
import { ContextV2 } from './context';
import { PromptType } from './prompt';
import { HelpDoc } from './help';
import { AgentMode } from './agent';
export declare abstract class InteractionEvent {
    type: string;
    constructor(type: string);
    abstract get metadata(): Record<string, string | number | boolean | string[] | Record<string, string>>;
    abstract get message(): string;
    abstract updateState(state: InteractionState): void;
}
export declare function isPromptEvent(event: InteractionEvent): event is PromptInteractionEvent;
export declare class AgentSelectionEvent extends InteractionEvent {
    agent: AgentMode;
    constructor(agent: AgentMode);
    get metadata(): {
        type: string;
        agent: AgentMode;
    };
    get message(): string;
    updateState(_state: InteractionState): void;
}
export declare class ClassificationEvent extends InteractionEvent {
    classification: ContextV2.ContextLabel[];
    constructor(classification: ContextV2.ContextLabel[]);
    get metadata(): {
        type: string;
        classification: string[];
    };
    get message(): string;
    updateState(_state: InteractionState): void;
}
export declare class PromptInteractionEvent extends InteractionEvent {
    name: PromptType | string;
    role: 'user' | 'system';
    content: string;
    prefix?: string | undefined;
    constructor(name: PromptType | string, role: 'user' | 'system', content: string, prefix?: string | undefined);
    get metadata(): {
        type: string;
        role: "user" | "system";
        name: string;
    };
    get message(): string;
    get fullContent(): string;
    updateState(state: InteractionState): void;
}
export declare class VectorTermsInteractionEvent extends InteractionEvent {
    terms: string[];
    constructor(terms: string[]);
    get metadata(): {
        type: string;
        termCount: number;
    };
    get message(): string;
    updateState(state: InteractionState): void;
}
export declare class CompletionEvent extends InteractionEvent {
    model: string;
    temperature: number;
    constructor(model: string, temperature: number);
    get metadata(): {
        type: string;
        model: string;
        temperature: number;
    };
    get message(): string;
    updateState(state: InteractionState): void;
}
export declare class ContextLookupEvent extends InteractionEvent {
    context: ContextV2.ContextResponse | undefined;
    constructor(context: ContextV2.ContextResponse | undefined);
    get contextAvailable(): boolean;
    get metadata(): {
        type: string;
        contextAvailable: boolean;
    };
    get message(): string;
    updateState(state: InteractionState): void;
}
export declare class HelpLookupEvent extends InteractionEvent {
    help: HelpDoc[] | undefined;
    constructor(help: HelpDoc[] | undefined);
    get helpAvailable(): boolean;
    get metadata(): {
        type: string;
        helpAvailable: boolean;
    };
    get message(): string;
    updateState(state: InteractionState): void;
}
export declare class ContextItemEvent extends InteractionEvent {
    promptType: PromptType;
    content: string;
    location?: string | undefined;
    constructor(promptType: PromptType, content: string, location?: string | undefined);
    get promptPrefix(): string;
    get metadata(): Record<string, string>;
    get message(): string;
    updateState(state: InteractionState): void;
}
export declare class TechStackEvent extends InteractionEvent {
    terms: string[];
    constructor(terms: string[]);
    get metadata(): {
        type: string;
        terms: string[];
    };
    get message(): string;
    updateState(state: InteractionState): void;
}
export interface InteractionHistoryEvents {
    on(event: 'event', listener: (event: InteractionEvent) => void): void;
}
export default class InteractionHistory extends EventEmitter implements InteractionHistoryEvents {
    readonly events: InteractionEvent[];
    log(message: string): void;
    addEvent(event: InteractionEvent): void;
    clear(): void;
    computeTokenSize(): number;
    buildState(): InteractionState;
}
