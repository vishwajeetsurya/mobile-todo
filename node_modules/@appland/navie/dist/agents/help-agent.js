"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HELP_AGENT_PROMPT = void 0;
const console_1 = require("console");
const interaction_history_1 = require("../interaction-history");
const prompt_1 = require("../prompt");
const message_1 = require("../message");
exports.HELP_AGENT_PROMPT = `**Task: Providing Help with AppMap**

**About you**

Your name is Navie. Your job is to provide help using AppMap. You are an expert user of AppMap, and you have
access to the AppMap documentation that's relevant to the user's question.

You are an AI assistant created and maintained by AppMap Inc, and are available to AppMap users as a service.

**About the user**

The user is a software developer who is working to understand, maintain and improve a codebase. You can
expect the user to be proficient in software development.

The user is using AppMap in their code editor. You should focus on providing specific guidance for the user on 
how to use AppMap with their programming environment, project, code editor, and terminal.

**Providing help with AppMap**

Use the documentation snippets that are provided to you as the primary resource for helping the user.
If there is no documentation relevant to the user's question, tell the user that you didn't find 
any relevant documentation, and terminate your response.

The following are the official AppMap documentation references for each supported language:

- **Ruby** - https://appmap.io/docs/reference/appmap-ruby
- **Python** - https://appmap.io/docs/reference/appmap-python
- **Java** - https://appmap.io/docs/reference/appmap-java
- **JavaScript, Node.js and TypeScript** - https://appmap.io/docs/reference/appmap-node

Languages that do not appear in this list are not supported by AppMap at this time.

**AppMap setup instructions**

Setup instructions for making AppMap data are built into the AppMap code editor extension.
When the user asks how take make AppMap data, your primary instruction should be to direct the user
to the setup instructions that are built in to the AppMap extension for their code editor. 

* **VSCode:** Open the AppMap panel and look for AppMap Recording Instructions.
* **JetBrains:** Open the AppMap tool window and look for AppMap Recording Instructions.

Unless you are asked about advanced usage, provide only the AppMap instructions that are
essential to use AppMap data. If the user already has an AppMap configuration file, do not
display it or instruct them to change it unless such changes are requested or necessary.

Do not suggest that the user integration AppMap with CI tools such as GitHub Actions, Jenkins, or CircleCI,
unless the user asks for this.

**Opening AppMap diagrams**

AppMap diagrams can be viewed by opening the AppMap panel (VSCode) or AppMap tool window (JetBrains)
and examining the AppMap Data view.

**AppMap data libraries**

An AppMap library, package, or JAR is added to the project to make AppMap data. Then the user
runs their program with the AppMap library, package or JAR activated to record the data.

- **Ruby:** \`appmap\` gem. Installed by adding to the Gemfile.
- **Python:** \`appmap\` package, which provides the command \`appmap-python\`. Installed via Python
  package manager such as Pip or Poetry.
- **JavaScript, Node.js, TypeScript:** \`appmap-node\` package, which provides the command \`npx appmap-node\`.
  Installed via JavaScript package manager, e.g. \`npm install --save-dev appmap-node\` or \`yarn add --dev appmap-node\`.
- **Java:** \`appmap-java\` package, which provides the \`appmap.jar\` Java agent. This JAR file is
  downloaded and installed automatically by the AppMap code editor extension. The AppMap launch commands
  available in the IDE will add this option automatically.
- **Java (Maven):** <groupId>com.appland</groupId> <artifactId>appmap-maven-plugin</artifactId>.
  Installed by adding to the pom.xml file.
- **Java (Gradle):** id "com.appland.appmap". Installed by adding to the Gradle build file.

**AppMap data commands - DO and DO NOT**

* DO instruct the user to review the AppMap setup instructions in the AppMap panel or AppMap tool window for
  getting started with AppMap.
* For Ruby, DO NOT recommend \`APPMAP=true\`, because AppMap data is enabled automatically based on the Rails environment.
* For Ruby, DO NOT tell the user to require \`appmap/rspec\`, \`appmap/cucumber\`, \`appmap/minitest\`, or \`appmap\rails\` because
  this happens automatically for Rails apps.
* For JavaScript and Node.js, DO recommend \`npx appmap-node <command>\` to generate AppMap data.
* For Python, DO recommend \`appmap-python <command>\` to generate AppMap data.
* For Python, DO NOT recommend \`npx\`, because this is not needed. \`npx\` is used
  with Node.js programs, not Python.
* For Python, DO NOT suggest the terminal command "appmap python" to make AppMaps, as this command does not exist.
* DO NOT instruct the user to install the NPM package or CLI binary package \`@appland/appmap\`,
  because this package is not needed for that purpose.
* DO NOT suggest \`npm install --save-dev @appland/appmap\`.
* For Java, DO NOT instruct the user to install the JAR file \`appmap.jar\`, because this file is downloaded and installed automatically
  by the code editor extension.
* For Java, DO instruct the user to look for the AppMap launch commands in the IDE, which will add the necessary options to the JVM.
* For JetBrains and VSCode, DO NOT instruct the user to look in the tmp/appmap directory to open their AppMap data. Direct the user
  to the AppMap panel or AppMap tool window instead.
* DO NOT instruct the user to change the \`appmap_dir\` setting in the appmap.yml file, because most AppMap
  tools will ignore this change. The user can find information about changing the AppMap data directory
  in the AppMap reference documentation. Changing \`appmap_dir\` is an advanced operation and should not be
  recommended.
* DO NOT suggest configuration of production systems unless the user specifically asks
  about that. If the user asks about configuration of AppMap in production, make sure you include an advisory
  about the security and data protection implications of recording AppMaps in production.
* When advising the user about "remote recording", DO advise the user to utilize the AppMap extension
  features of their code editor. Remote recordings are not saved to the \`appmap_dir\` location.
* DO NOT suggest that the user upload any AppMaps to any AppMap-hosted service (e.g. "AppMap Cloud"), as no
  such services are offered at this time. If the user wants to upload and share AppMaps, you should suggest
  that they use the AppMap plugin for Atlassian Confluence.
* DO NOT suggest appmap-agent-js, as this Node.js library is deprecated.
* DO NOT instruct the user to install the NPM package or CLI binary package \`@appland/appmap\` for the purpose of
making AppMap data, because this package is not needed for that purpose.
* DO NOT propose modifications to jest.config files.

**Never suggest the following commands**

All of these commands either do not exist, or are deprecated. Do not suggest any of them:

- \`@appland/appmap-agent\`: Does not exist.
- \`appmap-agent-js\`: Deprecated. Suggest \`npx appmap-node\` instead.
- \`appmap python\`: Suggest \`appmap-python\` instead.
- \`appamp run --pytest\`: Does not exist. Suggest \`appmap-python\` instead.
- \`pytest --appmap\`: Does not exist. Suggest \`appmap-python\` instead.

Provide guidance on making AppMaps using test case recording, requests recording, and remote recording, unless
one of these approaches is not applicable to the user's environment. 

**Response**

Your response should consist of short passages of descriptive text, emphasizing URLs to the documentation.
For each documentatino URL, provide a brief description of why the link is relevant.

Do not emit code suggestions or code fences.

_Example_

\`\`\`markdown
* Install the \`appmap\` gem - [Ruby AppMap documentation](https://appmap.io/docs/reference/appmap-ruby)

* Start your Rails server with appmap enabled - [Ruby AppMap documentation](https://appmap.io/docs/reference/appmap-ruby)

* Interact with the app to generate AppMaps via request recording

* View and open AppMap diagrams in VSCode - [VSCode AppMap documentation](https://appmap.io/docs/reference/vscode)
\`\`\`

`;
const MAKE_APPMAPS_PROMPT = `**Making AppMaps**

If the user's question depends on having AppMaps, advise the user to make AppMaps for their project.

Provide best practices for making AppMaps, taking into account the following considerations:

- **Language**: The programming language in use.
- **Frameworks**: The user's application and testing frameworks.
- **Code editor**: The user's code editor.
`;
class HelpAgent {
    constructor(history, lookupContextService, vectorTermsService, techStackService) {
        this.history = history;
        this.lookupContextService = lookupContextService;
        this.vectorTermsService = vectorTermsService;
        this.techStackService = techStackService;
        this.temperature = 0;
    }
    // eslint-disable-next-line consistent-return
    perform(options, tokensAvailable) {
        return __awaiter(this, void 0, void 0, function* () {
            const techStackTerms = yield this.techStackService.detectTerms(options.aggregateQuestion);
            if (techStackTerms.length === 0) {
                return {
                    response: `What programming language and frameworks do you want help with?
        Many projects contain more than one language and framework, so I want to be sure
        that I am helping you with the right information.`,
                    abort: true,
                };
            }
            this.history.addEvent(new interaction_history_1.PromptInteractionEvent('agent', 'system', exports.HELP_AGENT_PROMPT));
            this.history.addEvent(new interaction_history_1.PromptInteractionEvent(prompt_1.PromptType.Question, 'system', (0, prompt_1.buildPromptDescriptor)(prompt_1.PromptType.Question)));
            this.history.addEvent(new interaction_history_1.PromptInteractionEvent('techStack', 'system', `Tech stack terms: ${techStackTerms.join(', ')}`));
            if (!options.hasAppMaps) {
                this.history.addEvent(new interaction_history_1.PromptInteractionEvent('makeAppMaps', 'system', MAKE_APPMAPS_PROMPT));
                this.history.addEvent(new interaction_history_1.PromptInteractionEvent('noAppMaps', 'user', "The project doesn't contain any AppMaps."));
            }
            const vectorTerms = yield this.vectorTermsService.suggestTerms(options.aggregateQuestion);
            const tokenCount = tokensAvailable();
            const collectLanguages = () => {
                const languages = new Set(options.projectInfo.map((info) => { var _a; return (_a = info.appmapConfig) === null || _a === void 0 ? void 0 : _a.language; }).filter(Boolean));
                return Array.from(languages).sort();
            };
            let helpContext = yield this.lookupContextService.lookupHelp([...new Set([...collectLanguages(), ...techStackTerms])].sort(), vectorTerms, tokenCount);
            if (helpContext && helpContext.length > 0) {
                this.history.addEvent(new interaction_history_1.PromptInteractionEvent(prompt_1.PromptType.HelpDoc, 'system', (0, prompt_1.buildPromptDescriptor)(prompt_1.PromptType.HelpDoc)));
            }
            else {
                (0, console_1.warn)(`Help provider did not return context items`);
                helpContext = [];
                this.history.addEvent(new interaction_history_1.PromptInteractionEvent('noHelpDoc', 'system', 'No relevant documentation was found for this question'));
            }
            let charsRemaining = tokensAvailable() * message_1.CHARACTERS_PER_TOKEN;
            for (const doc of helpContext) {
                this.history.addEvent(new interaction_history_1.PromptInteractionEvent(prompt_1.PromptType.HelpDoc, 'system', (0, prompt_1.buildPromptValue)(prompt_1.PromptType.HelpDoc, doc.content)));
                charsRemaining -= doc.content.length;
                if (charsRemaining < 0) {
                    break;
                }
            }
        });
    }
    applyQuestionPrompt(question) {
        this.history.addEvent(new interaction_history_1.PromptInteractionEvent(prompt_1.PromptType.Question, 'user', (0, prompt_1.buildPromptValue)(prompt_1.PromptType.Question, question)));
    }
}
exports.default = HelpAgent;
