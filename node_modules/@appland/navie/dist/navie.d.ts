import { InteractionEvent, InteractionHistoryEvents } from './interaction-history';
import { ContextV2 } from './context';
import { ProjectInfoProvider } from './project-info';
import { HelpProvider } from './help';
import Message from './message';
export type ChatHistory = Message[];
export interface ClientRequest {
    question: string;
    codeSelection?: string;
}
export interface INavie extends InteractionHistoryEvents {
    on(event: 'event', listener: (event: InteractionEvent) => void): void;
    on(event: 'agent', listener: (agent: string) => void): void;
    on(event: 'classification', listener: (labels: ContextV2.ContextLabel[]) => void): void;
    execute(): AsyncIterable<string>;
}
export declare const DEFAULT_TOKEN_LIMIT = 8000;
export declare const DEFAULT_TEMPERATURE = 0.2;
export declare class NavieOptions {
    modelName: string;
    tokenLimit: number;
    temperature: number;
    responseTokens: number;
}
export default function navie(clientRequest: ClientRequest, contextProvider: ContextV2.ContextProvider, projectInfoProvider: ProjectInfoProvider, helpProvider: HelpProvider, options: NavieOptions, chatHistory?: ChatHistory): INavie;
