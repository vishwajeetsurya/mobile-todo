"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncDelegator = (this && this.__asyncDelegator) || function (o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
};
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NavieOptions = exports.DEFAULT_TEMPERATURE = exports.DEFAULT_TOKEN_LIMIT = void 0;
const assert_1 = __importDefault(require("assert"));
const events_1 = __importDefault(require("events"));
const memory_service_1 = __importDefault(require("./services/memory-service"));
const vector_terms_service_1 = __importDefault(require("./services/vector-terms-service"));
const completion_service_1 = require("./services/completion-service");
const interaction_history_1 = __importStar(require("./interaction-history"));
const project_info_service_1 = __importDefault(require("./services/project-info-service"));
const code_selection_service_1 = __importDefault(require("./services/code-selection-service"));
const agent_selection_service_1 = __importDefault(require("./services/agent-selection-service"));
const lookup_context_service_1 = __importDefault(require("./services/lookup-context-service"));
const apply_context_service_1 = __importDefault(require("./services/apply-context-service"));
const classification_service_1 = __importDefault(require("./services/classification-service"));
const command_1 = require("./command");
const explain_command_1 = __importDefault(require("./commands/explain-command"));
const classify_command_1 = __importDefault(require("./commands/classify-command"));
const vector_terms_command_1 = __importDefault(require("./commands/vector-terms-command"));
const tech_stack_service_1 = __importDefault(require("./services/tech-stack-service"));
const tech_stack_command_1 = __importDefault(require("./commands/tech-stack-command"));
exports.DEFAULT_TOKEN_LIMIT = 8000;
exports.DEFAULT_TEMPERATURE = 0.2;
class NavieOptions {
    constructor() {
        var _a, _b, _c;
        this.modelName = (_a = process.env.APPMAP_NAVIE_MODEL) !== null && _a !== void 0 ? _a : 'gpt-4o';
        this.tokenLimit = Number((_b = process.env.APPMAP_NAVIE_TOKEN_LIMIT) !== null && _b !== void 0 ? _b : exports.DEFAULT_TOKEN_LIMIT);
        this.temperature = Number((_c = process.env.APPMAP_NAVIE_TEMPERATURE) !== null && _c !== void 0 ? _c : exports.DEFAULT_TEMPERATURE);
        this.responseTokens = 1000;
    }
}
exports.NavieOptions = NavieOptions;
function navie(clientRequest, contextProvider, projectInfoProvider, helpProvider, options, chatHistory) {
    const interactionHistory = new interaction_history_1.default();
    const completionService = new completion_service_1.OpenAICompletionService(interactionHistory, options.modelName, options.temperature);
    const classificationService = new classification_service_1.default(interactionHistory, options.modelName, options.temperature);
    const vectorTermsService = new vector_terms_service_1.default(interactionHistory, options.modelName, options.temperature);
    const techStackService = new tech_stack_service_1.default(interactionHistory, options.modelName, options.temperature);
    const buildExplainCommand = () => {
        const codeSelectionService = new code_selection_service_1.default(interactionHistory);
        const contextProviderV2 = (request) => __awaiter(this, void 0, void 0, function* () { return contextProvider(Object.assign(Object.assign({}, request), { version: 2, type: 'search' })); });
        const lookupContextService = new lookup_context_service_1.default(interactionHistory, contextProviderV2, helpProvider);
        const applyContextService = new apply_context_service_1.default(interactionHistory);
        const agentSelectionService = new agent_selection_service_1.default(interactionHistory, vectorTermsService, lookupContextService, applyContextService, techStackService);
        const projectInfoService = new project_info_service_1.default(interactionHistory, projectInfoProvider);
        const memoryService = new memory_service_1.default(interactionHistory, options.modelName, options.temperature);
        return new explain_command_1.default(options, interactionHistory, completionService, classificationService, agentSelectionService, codeSelectionService, projectInfoService, memoryService);
    };
    const buildClassifyCommand = () => new classify_command_1.default(classificationService);
    const buildVectorTermsCommand = () => new vector_terms_command_1.default(vectorTermsService);
    const buildTechStackCommand = () => new tech_stack_command_1.default(techStackService);
    const commandBuilders = {
        [command_1.CommandMode.Explain]: buildExplainCommand,
        [command_1.CommandMode.Classify]: buildClassifyCommand,
        [command_1.CommandMode.VectorTerms]: buildVectorTermsCommand,
        [command_1.CommandMode.TechStack]: buildTechStackCommand,
    };
    let { question } = clientRequest;
    question = question.trim();
    let command;
    for (const commandMode of Object.values(command_1.CommandMode)) {
        const prefix = `@${commandMode} `;
        if (question.startsWith(prefix)) {
            command = commandBuilders[commandMode]();
            question = question.slice(prefix.length);
            break;
        }
    }
    if (!command)
        command = buildExplainCommand();
    clientRequest.question = question;
    class Navie extends events_1.default {
        constructor() {
            super();
            interactionHistory.on('event', (event) => {
                this.emit('event', event);
                if (event instanceof interaction_history_1.AgentSelectionEvent) {
                    this.emit('agent', event.agent);
                }
                if (event instanceof interaction_history_1.ClassificationEvent) {
                    this.emit('classification', event.classification);
                }
            });
        }
        // eslint-disable-next-line class-methods-use-this
        execute() {
            return __asyncGenerator(this, arguments, function* execute_1() {
                (0, assert_1.default)(command, 'Command not specified');
                yield __await(yield* __asyncDelegator(__asyncValues(command.execute(clientRequest, chatHistory))));
            });
        }
    }
    return new Navie();
}
exports.default = navie;
