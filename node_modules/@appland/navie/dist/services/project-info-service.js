"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const js_yaml_1 = require("js-yaml");
const assert_1 = __importDefault(require("assert"));
const interaction_history_1 = require("../interaction-history");
const prompt_1 = require("../prompt");
class ProjectInfoService {
    constructor(interactionHistory, projectInfoProvider) {
        this.interactionHistory = interactionHistory;
        this.projectInfoProvider = projectInfoProvider;
    }
    lookupProjectInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.projectInfoProvider({ type: 'projectInfo' });
            if (!response) {
                this.interactionHistory.log('No project info found');
                return [];
            }
            const projectInfo = Array.isArray(response) ? response : [response];
            this.interactionHistory.log('Project info obtained');
            return projectInfo;
        });
    }
    promptProjectInfo(isArchitecture, projectInfo) {
        const isLargeProject = (appmapStats) => appmapStats.packages.length > 20 ||
            appmapStats.routes.length > 20 ||
            appmapStats.tables.length > 20;
        const pruneStats = (stats) => {
            if (isArchitecture || !isLargeProject(stats))
                return stats;
            return {
                numAppMaps: stats.numAppMaps,
            };
        };
        const appmapConfigs = projectInfo
            .map((info) => info.appmapConfig)
            .filter(Boolean);
        const appmapStats = projectInfo
            .map((info) => info.appmapStats)
            .filter(Boolean)
            .map((stats) => ((0, assert_1.default)(stats), pruneStats(stats)));
        const codeEditors = projectInfo
            .map((info) => info.codeEditor)
            .filter(Boolean);
        if (appmapConfigs.length > 0) {
            this.interactionHistory.addEvent(new interaction_history_1.PromptInteractionEvent(prompt_1.PromptType.AppMapConfig, 'system', (0, prompt_1.buildPromptDescriptor)(prompt_1.PromptType.AppMapConfig)));
            this.interactionHistory.addEvent(new interaction_history_1.PromptInteractionEvent(prompt_1.PromptType.AppMapConfig, 'user', (0, prompt_1.buildPromptValue)(prompt_1.PromptType.AppMapConfig, (0, js_yaml_1.dump)(appmapConfigs))));
        }
        else {
            this.interactionHistory.addEvent(new interaction_history_1.PromptInteractionEvent(prompt_1.PromptType.AppMapConfig, 'user', 'The project does not contain an AppMap config file (appmap.yml). This file is automatically generated by the AppMap recording agent and does not need to be created by the user.'));
        }
        if (appmapStats.map((stats) => stats.numAppMaps).reduce((a, b) => a + b, 0) > 0) {
            this.interactionHistory.addEvent(new interaction_history_1.PromptInteractionEvent(prompt_1.PromptType.AppMapStats, 'system', (0, prompt_1.buildPromptDescriptor)(prompt_1.PromptType.AppMapStats)));
            this.interactionHistory.addEvent(new interaction_history_1.PromptInteractionEvent(prompt_1.PromptType.AppMapStats, 'user', (0, prompt_1.buildPromptValue)(prompt_1.PromptType.AppMapStats, (0, js_yaml_1.dump)(appmapStats))));
        }
        else {
            this.interactionHistory.addEvent(new interaction_history_1.PromptInteractionEvent(prompt_1.PromptType.AppMapStats, 'user', 'The project does not contain any AppMaps.'));
        }
        if (codeEditors.length > 0) {
            this.interactionHistory.addEvent(new interaction_history_1.PromptInteractionEvent(prompt_1.PromptType.CodeEditor, 'system', (0, prompt_1.buildPromptDescriptor)(prompt_1.PromptType.CodeEditor)));
            this.interactionHistory.addEvent(new interaction_history_1.PromptInteractionEvent(prompt_1.PromptType.CodeEditor, 'user', (0, prompt_1.buildPromptValue)(prompt_1.PromptType.CodeEditor, (0, js_yaml_1.dump)(codeEditors.map(({ name }) => ({ name, installed: true, activated: true }))))));
        }
        else {
            this.interactionHistory.addEvent(new interaction_history_1.PromptInteractionEvent(prompt_1.PromptType.CodeEditor, 'user', 'The code editor is not specified.'));
        }
    }
}
exports.default = ProjectInfoService;
