"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable default-case */
/* eslint-disable consistent-return */
const interaction_history_1 = require("../interaction-history");
const agent_1 = require("../agent");
const help_agent_1 = __importDefault(require("../agents/help-agent"));
const generate_agent_1 = __importDefault(require("../agents/generate-agent"));
const explain_agent_1 = __importDefault(require("../agents/explain-agent"));
const context_1 = require("../context");
const MODE_PREFIXES = {
    '@explain ': agent_1.AgentMode.Explain,
    '@generate ': agent_1.AgentMode.Generate,
    '@help ': agent_1.AgentMode.Help,
};
class AgentSelectionService {
    constructor(history, vectorTermsService, lookupContextService, applyContextService, techStackService) {
        this.history = history;
        this.vectorTermsService = vectorTermsService;
        this.lookupContextService = lookupContextService;
        this.applyContextService = applyContextService;
        this.techStackService = techStackService;
    }
    selectAgent(question, classification) {
        let modifiedQuestion = question;
        const helpAgent = () => new help_agent_1.default(this.history, this.lookupContextService, this.vectorTermsService, this.techStackService);
        const generateAgent = () => new generate_agent_1.default(this.history, this.vectorTermsService, this.lookupContextService, this.applyContextService);
        const explainAgent = () => new explain_agent_1.default(this.history, this.vectorTermsService, this.lookupContextService, this.applyContextService);
        const buildAgent = {
            [agent_1.AgentMode.Help]: helpAgent,
            [agent_1.AgentMode.Generate]: generateAgent,
            [agent_1.AgentMode.Explain]: explainAgent,
        };
        const questionPrefixMode = () => {
            for (const [prefix, mode] of Object.entries(MODE_PREFIXES)) {
                if (question.startsWith(prefix)) {
                    modifiedQuestion = question.slice(prefix.length);
                    this.history.log(`[mode-selection] Activating agent due to question prefix: ${mode}`);
                    const agent = buildAgent[mode]();
                    return { agentMode: mode, question: modifiedQuestion, agent };
                }
            }
        };
        const classifierMode = () => {
            const isHelp = classification.some((label) => label.name === context_1.ContextV2.ContextLabelName.HelpWithAppMap &&
                label.weight === context_1.ContextV2.ContextLabelWeight.High);
            if (isHelp) {
                this.history.log(`[mode-selection] Activating agent due to classifier: ${agent_1.AgentMode.Help}`);
                return { agentMode: agent_1.AgentMode.Help, question, agent: helpAgent() };
            }
        };
        const defaultMode = () => {
            this.history.log(`[mode-selection] Using default mode: ${agent_1.AgentMode.Explain}`);
            return { agentMode: agent_1.AgentMode.Explain, question, agent: explainAgent() };
        };
        const result = questionPrefixMode() || classifierMode() || defaultMode();
        this.history.addEvent(new interaction_history_1.AgentSelectionEvent(result.agentMode));
        return result;
    }
}
exports.default = AgentSelectionService;
