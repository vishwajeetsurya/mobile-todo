"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const console_1 = require("console");
const context_1 = require("../context");
const interaction_history_1 = require("../interaction-history");
const prompt_1 = require("../prompt");
const apply_context_1 = __importDefault(require("../lib/apply-context"));
class ApplyContextService {
    constructor(interactionHistory) {
        this.interactionHistory = interactionHistory;
    }
    applyContext(context, help, characterLimit, maxContentLength = characterLimit / 5) {
        if (!context) {
            this.interactionHistory.addEvent(new interaction_history_1.PromptInteractionEvent('contextLookup', 'system', 'No matching context information was found'));
            return;
        }
        const contextItems = [
            ...context,
            ...help.map((item) => ({
                type: context_1.ContextV2.ContextItemType.HelpDoc,
                content: item.content,
                score: item.score,
                location: item.filePath,
            })),
        ];
        const appliedContextItems = (0, apply_context_1.default)(contextItems, characterLimit, maxContentLength);
        const charsApplied = appliedContextItems.reduce((acc, item) => acc + item.content.length, 0);
        const charsRemaining = characterLimit - charsApplied;
        for (const item of appliedContextItems) {
            let promptType;
            switch (item.type) {
                case context_1.ContextV2.ContextItemType.SequenceDiagram:
                    promptType = prompt_1.PromptType.SequenceDiagram;
                    break;
                case context_1.ContextV2.ContextItemType.CodeSnippet:
                    promptType = prompt_1.PromptType.CodeSnippet;
                    break;
                case context_1.ContextV2.ContextItemType.DataRequest:
                    promptType = prompt_1.PromptType.DataRequest;
                    break;
                case context_1.ContextV2.ContextItemType.HelpDoc:
                    promptType = prompt_1.PromptType.HelpDoc;
                    break;
                default:
            }
            if (promptType) {
                this.interactionHistory.addEvent(new interaction_history_1.ContextItemEvent(promptType, item.content, context_1.ContextV2.isFileContextItem(item) ? item.location : undefined));
            }
            else {
                (0, console_1.warn)(`Unknown context item type: ${item.type} for content: ${item.content}`);
            }
        }
        this.interactionHistory.log(`Remaining characters after context: ${charsRemaining}`);
    }
    addSystemPrompts(context, help) {
        const hasSequenceDiagram = context.some((item) => item.type === context_1.ContextV2.ContextItemType.SequenceDiagram);
        const hasCodeSnippet = context.some((item) => item.type === context_1.ContextV2.ContextItemType.CodeSnippet);
        const hasDataRequest = context.some((item) => item.type === context_1.ContextV2.ContextItemType.DataRequest);
        if (hasSequenceDiagram)
            this.interactionHistory.addEvent(new interaction_history_1.PromptInteractionEvent(prompt_1.PromptType.SequenceDiagram, 'system', (0, prompt_1.buildPromptDescriptor)(prompt_1.PromptType.SequenceDiagram)));
        if (hasCodeSnippet)
            this.interactionHistory.addEvent(new interaction_history_1.PromptInteractionEvent(prompt_1.PromptType.CodeSnippet, 'system', (0, prompt_1.buildPromptDescriptor)(prompt_1.PromptType.CodeSnippet)));
        if (hasDataRequest)
            this.interactionHistory.addEvent(new interaction_history_1.PromptInteractionEvent(prompt_1.PromptType.DataRequest, 'system', (0, prompt_1.buildPromptDescriptor)(prompt_1.PromptType.DataRequest)));
        if (help.length > 0)
            this.interactionHistory.addEvent(new interaction_history_1.PromptInteractionEvent(prompt_1.PromptType.HelpDoc, 'system', (0, prompt_1.buildPromptDescriptor)(prompt_1.PromptType.HelpDoc)));
    }
}
exports.default = ApplyContextService;
