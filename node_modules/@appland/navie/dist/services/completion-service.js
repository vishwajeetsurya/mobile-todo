"use strict";
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenAICompletionService = void 0;
const openai_1 = require("@langchain/openai");
const interaction_history_1 = require("../interaction-history");
// Some LLMs only accept a single system message.
// This functions merges all system messages into a single message
// at the start of the list.
function mergeSystemMessages(messages) {
    const systemMessages = messages.filter((message) => message.role === 'system');
    const nonSystemMessages = messages.filter((message) => message.role !== 'system');
    const mergedSystemMessage = {
        role: 'system',
        content: systemMessages.map((message) => message.content).join('\n'),
    };
    return [mergedSystemMessage, ...nonSystemMessages];
}
class OpenAICompletionService {
    constructor(interactionHistory, modelName, temperature) {
        this.interactionHistory = interactionHistory;
        this.modelName = modelName;
        this.temperature = temperature;
    }
    complete(options) {
        return __asyncGenerator(this, arguments, function* complete_1() {
            var _a, e_1, _b, _c;
            const { messages } = this.interactionHistory.buildState();
            const chatAI = new openai_1.ChatOpenAI({
                modelName: this.modelName,
                temperature: options.temperature || this.temperature,
                streaming: true,
            });
            this.interactionHistory.addEvent(new interaction_history_1.CompletionEvent(this.modelName, options.temperature || this.temperature));
            const response = yield __await(chatAI.completionWithRetry({
                messages: mergeSystemMessages(messages),
                model: this.modelName,
                stream: true,
            }));
            try {
                for (var _d = true, response_1 = __asyncValues(response), response_1_1; response_1_1 = yield __await(response_1.next()), _a = response_1_1.done, !_a;) {
                    _c = response_1_1.value;
                    _d = false;
                    try {
                        const token = _c;
                        const content = token.choices.map((choice) => choice.delta.content).join('');
                        yield yield __await(content);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = response_1.return)) yield __await(_b.call(response_1));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
}
exports.OpenAICompletionService = OpenAICompletionService;
