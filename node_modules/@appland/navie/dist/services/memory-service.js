"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const memory_1 = require("langchain/memory");
const messages_1 = require("@langchain/core/messages");
const openai_1 = require("@langchain/openai");
const interaction_history_1 = require("../interaction-history");
class MemoryService {
    constructor(interactionHistory, modelName, temperature) {
        this.interactionHistory = interactionHistory;
        this.modelName = modelName;
        this.temperature = temperature;
    }
    predictSummary(messages) {
        return __awaiter(this, void 0, void 0, function* () {
            const predictAI = new openai_1.ChatOpenAI({
                modelName: this.modelName,
                temperature: this.temperature,
            });
            const memory = new memory_1.ConversationSummaryMemory({
                memoryKey: 'chat_history',
                llm: predictAI,
            });
            // eslint-disable-next-line arrow-body-style
            const lcMessages = messages.map((message) => {
                return message.role === 'user'
                    ? new messages_1.HumanMessage({ content: message.content })
                    : new messages_1.AIMessage({ content: message.content });
            });
            const summary = yield memory.predictNewSummary(lcMessages, '');
            this.interactionHistory.addEvent(new interaction_history_1.PromptInteractionEvent('summary', 'system', summary));
        });
    }
}
exports.default = MemoryService;
