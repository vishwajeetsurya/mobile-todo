/*!
 * @appland/sql-parser - v1.5.1
 * @copyright 2015-2022 Code School (http://codeschool.com)
 * @author Nick Wronski <nick@javascript.com>
 */
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.sqliteParser = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({"./streaming":[function(require,module,exports){
'use strict';Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var SqliteParserTransform=exports.SqliteParserTransform=function SqliteParserTransform(options){_classCallCheck(this,SqliteParserTransform);throw new Error('SqliteParserTransform is not available in this environment');};var SingleNodeTransform=exports.SingleNodeTransform=function SingleNodeTransform(options){_classCallCheck(this,SingleNodeTransform);throw new Error('SingleNodeTransform is not available in this environment');};

},{}],1:[function(require,module,exports){
'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=sqliteParser;var _parser=require('./parser');var _tracer=require('./tracer');var _streaming=require('./streaming');function sqliteParser(source,options,callback){var t=(0,_tracer.Tracer)();if(arguments.length===2){if(typeof options==='function'){callback=options;options={};}}var isAsync=typeof callback==='function';var opts={'tracer':t,'startRule':'start'};if(options&&options.streaming){opts['startRule']='start_streaming';}if(isAsync){setTimeout(function(){var result=void 0,err=void 0;try{result=(0,_parser.parse)(source,opts);}catch(e){err=e instanceof _parser.SyntaxError?t.smartError(e):e;}callback(err,result);},0);}else{try{return(0,_parser.parse)(source,opts);}catch(e){throw e instanceof _parser.SyntaxError?t.smartError(e):e;}}};sqliteParser['createParser']=function(){return new _streaming.SqliteParserTransform();};sqliteParser['createStitcher']=function(){return new _streaming.SingleNodeTransform();};sqliteParser['NAME']='sqlite-parser';sqliteParser['VERSION']='1.5.1';module.exports=exports['default'];

},{"./parser":2,"./streaming":"./streaming","./tracer":3}],2:[function(require,module,exports){
"use strict";var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"])_i["return"]();}finally{if(_d)throw _e;}}return _arr;}return function(arr,i){if(Array.isArray(arr)){return arr;}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i);}else{throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}function peg$subclass(child,parent){function ctor(){this.constructor=child;}ctor.prototype=parent.prototype;child.prototype=new ctor();}function peg$SyntaxError(message,expected,found,location){this.message=message;this.expected=expected;this.found=found;this.location=location;this.name="SyntaxError";if(typeof Error.captureStackTrace==="function"){Error.captureStackTrace(this,peg$SyntaxError);}}peg$subclass(peg$SyntaxError,Error);peg$SyntaxError.buildMessage=function(expected,found){var DESCRIBE_EXPECTATION_FNS={literal:function literal(expectation){return"\""+literalEscape(expectation.text)+"\"";},"class":function _class(expectation){var escapedParts=expectation.parts.map(function(part){return Array.isArray(part)?classEscape(part[0])+"-"+classEscape(part[1]):classEscape(part);});return"["+(expectation.inverted?"^":"")+escapedParts+"]";},any:function any(expectation){return"any character";},end:function end(expectation){return"end of input";},other:function other(expectation){return expectation.description;}};function hex(ch){return ch.charCodeAt(0).toString(16).toUpperCase();}function literalEscape(s){return s.replace(/\\/g,"\\\\").replace(/"/g,"\\\"").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(ch){return"\\x0"+hex(ch);}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(ch){return"\\x"+hex(ch);});}function classEscape(s){return s.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(ch){return"\\x0"+hex(ch);}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(ch){return"\\x"+hex(ch);});}function describeExpectation(expectation){return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);}function describeExpected(expected){var descriptions=expected.map(describeExpectation);var i,j;descriptions.sort();if(descriptions.length>0){for(i=1,j=1;i<descriptions.length;i++){if(descriptions[i-1]!==descriptions[i]){descriptions[j]=descriptions[i];j++;}}descriptions.length=j;}switch(descriptions.length){case 1:return descriptions[0];case 2:return descriptions[0]+" or "+descriptions[1];default:return descriptions.slice(0,-1).join(", ")+", or "+descriptions[descriptions.length-1];}}function describeFound(found){return found?"\""+literalEscape(found)+"\"":"end of input";}return"Expected "+describeExpected(expected)+" but "+describeFound(found)+" found.";};function peg$DefaultTracer(){this.indentLevel=0;}peg$DefaultTracer.prototype.trace=function(event){var that=this;function log(event){function repeat(string,n){var result="",i;for(i=0;i<n;i++){result+=string;}return result;}function pad(string,length){return string+repeat(" ",length-string.length);}if((typeof console==="undefined"?"undefined":_typeof(console))==="object"){console.log(event.location.start.line+":"+event.location.start.column+"-"+event.location.end.line+":"+event.location.end.column+" "+pad(event.type,10)+" "+repeat("  ",that.indentLevel)+event.rule);}}switch(event.type){case"rule.enter":log(event);this.indentLevel++;break;case"rule.match":this.indentLevel--;log(event);break;case"rule.fail":this.indentLevel--;log(event);break;default:throw new Error("Invalid event type: "+event.type+".");}};function peg$parse(input,options){options=options!==undefined?options:{};var peg$FAILED={};var peg$startRuleIndices={start:0,start_streaming:1};var peg$startRuleIndex=0;var peg$consts=[function(s){return s;},function(f,b){return{'type':'statement','variant':'list','statement':flattenAll([f,b])};},function(s){return s;},peg$otherExpectation("Type Definition"),function(t,a,b){return Object.assign(t,a,b);},peg$otherExpectation("Array bounds"),function(b,l){return{bounds:[b].concat(_toConsumableArray(l))};},function(b){return{bounds:[b]};},function(n){if(isOkay(n))return makeInteger(n);else return null;},function(n){return{'type':'datatype','variant':n[0],'affinity':n[1]};},peg$otherExpectation("Custom Datatype Name"),function(t,r){var variant=foldStringKey([t,r]);var affinity='numeric';if(/int/i.test(variant)){affinity='integer';}else if(/char|clob|text/i.test(variant)){affinity='text';}else if(/blob/i.test(variant)){affinity='blob';}else if(/real|floa|doub/i.test(variant)){affinity='real';}return{'type':'datatype','variant':variant,'affinity':affinity};},/^[\t ]/,peg$classExpectation(["\t"," "],false,false),function(w){return w;},peg$otherExpectation("Type Definition Arguments"),function(a1,a2){return{'args':{'type':'expression','variant':'list','expression':flattenAll([a1,a2])}};},function(n){return n;},peg$otherExpectation("Null Literal"),function(n){return{'type':'literal','variant':'null','value':keyNode(n)};},peg$otherExpectation("Date Literal"),function(d){return{'type':'literal','variant':'date','value':keyNode(d)};},peg$otherExpectation("String Literal"),function(n,s){return{'type':'literal','variant':'text','value':s};},peg$otherExpectation("Single-quoted String Literal"),function(s){return unescape(s,"'");},"''",peg$literalExpectation("''",false),/^[^']/,peg$classExpectation(["'"],true,false),peg$otherExpectation("Blob Literal"),/^[x]/i,peg$classExpectation(["x"],false,true),function(b){return{'type':'literal','variant':'blob','value':b};},peg$otherExpectation("Typed literal (or bind parameter)"),function(t,s){return{type:'expression',format:'unary',variant:'cast',expression:s,as:t};},function(n){return{'type':'literal','variant':'text','value':n};},peg$otherExpectation("Number Sign"),function(s,n){if(isOkay(s)){n['value']=foldStringWord([s,n['value']]);}return n;},function(d,e){return{'type':'literal','variant':'decimal','value':foldStringWord([d,e])};},peg$otherExpectation("Decimal Literal"),function(f,b){return foldStringWord([f,b]);},function(t,d){return foldStringWord([t,d]);},peg$otherExpectation("Decimal Literal Exponent"),"e",peg$literalExpectation("E",true),/^[+\-]/,peg$classExpectation(["+","-"],false,false),function(e,s,d){return foldStringWord([e,s,d]);},peg$otherExpectation("Hexidecimal Literal"),"0x",peg$literalExpectation("0x",true),function(f,b){return{'type':'literal','variant':'hexidecimal','value':foldStringWord([f,b])};},/^[0-9a-f]/i,peg$classExpectation([["0","9"],["a","f"]],false,true),/^[0-9]/,peg$classExpectation([["0","9"]],false,false),peg$otherExpectation("Bind Parameter"),function(b){return Object.assign({'type':'variable'},b);},peg$otherExpectation("Numbered Bind Parameter"),function(q,id){return{'format':'numbered','name':foldStringWord([q,id])};},/^[1-9]/,peg$classExpectation([["1","9"]],false,false),function(f,r){return foldStringWord([f,r]);},peg$otherExpectation("Named Bind Parameter"),/^[:@]/,peg$classExpectation([":","@"],false,false),function(s,name){return{'format':'named','name':foldStringWord([s,name])};},peg$otherExpectation("TCL Bind Parameter"),"$",peg$literalExpectation("$",false),":",peg$literalExpectation(":",false),function(d,name,s){return Object.assign({'format':'tcl','name':foldStringWord([d,name])},s);},function(sfx){return{'suffix':sfx};},peg$otherExpectation("EXISTS Expression"),function(n,e){if(isOkay(n)){return{'type':'expression','format':'unary','variant':'exists','expression':e,'operator':keyNode(n)};}return e;},peg$otherExpectation("EXISTS Keyword"),function(n,x){return foldStringKey([n,x]);},peg$otherExpectation("RAISE Expression"),function(s,a){return Object.assign({'type':'expression','format':'unary','variant':keyNode(s),'expression':a},a);},peg$otherExpectation("RAISE Expression Arguments"),function(a){return Object.assign({'type':'error'},a);},peg$otherExpectation("IGNORE Keyword"),function(f){return{'action':keyNode(f)};},function(f,m){return{'action':keyNode(f),'message':m};},function(n){return n;},peg$otherExpectation("ARRAY expression"),function(a){return a;},peg$otherExpectation("ARRAY SELECT expression"),function(s){return{type:'expression',variant:'array',expression:s};},peg$otherExpectation("array expression"),function(l){return{type:'expression',variant:'array',expression:l};},peg$otherExpectation("multi-dimensional array expression"),function(e,l){return{type:'expression',variant:'list',expression:[e].concat(_toConsumableArray(l))};},function(e){return e;},function(e,c){return Object.assign(c,{'expression':e});},peg$otherExpectation("PSQL-style cast"),"::",peg$literalExpectation("::",false),function(e,d){return{'type':'expression','format':'unary','variant':'cast','expression':e,'as':d};},function(op,e){return{'type':'expression','format':'unary','variant':'operation','expression':e,'operator':keyNode(op)};},peg$otherExpectation("COLLATE Expression"),function(c){return Object.assign({'type':'expression','format':'unary','variant':'operation','operator':'collate'},c);},function(f,rest){return composeBinary(f,rest);},function(i){return[null,i,null,{'type':'literal','variant':'null','value':'null'}];},"not ",peg$literalExpectation("NOT ",true),"null",peg$literalExpectation("NULL",true),function(){return'not';},function(){return'is';},peg$otherExpectation("CAST Expression"),function(s,e,a){return{'type':'expression','format':'unary','variant':keyNode(s),'expression':e,'as':a};},peg$otherExpectation("Type Alias"),function(d){return d;},peg$otherExpectation("CASE Expression"),function(t,e,w,s){return Object.assign({'type':'expression','variant':keyNode(t),'expression':flattenAll([w,s])},e);},function(e){return{'discriminant':e};},peg$otherExpectation("WHEN Clause"),function(s,w,t){return{'type':'condition','variant':keyNode(s),'condition':w,'consequent':t};},peg$otherExpectation("ELSE Clause"),function(s,e){return{'type':'condition','variant':keyNode(s),'consequent':e};},function(v,p){return Object.assign(p,{'left':v});},peg$otherExpectation("IS DISTINCT expression"),function(n,m,e){return{type:'expression',format:'binary',variant:'operation',operation:foldStringKey([n,m]),right:e};},peg$otherExpectation("Comparison Expression"),function(n,m,e,x){return Object.assign({'type':'expression','format':'binary','variant':'operation','operation':foldStringKey([n,m]),'right':e},x);},peg$otherExpectation("ESCAPE Expression"),function(s,e){return{'escape':e};},peg$otherExpectation("BETWEEN Expression"),function(n,b,tail){return{'type':'expression','format':'binary','variant':'operation','operation':foldStringKey([n,b]),'right':tail};},function(f,rest){return composeBinary(f,[rest]);},function(n){return keyNode(n);},peg$otherExpectation("IN Expression"),function(n,i,e){return{'type':'expression','format':'binary','variant':'operation','operation':foldStringKey([n,i]),'right':e};},peg$otherExpectation("Expression List"),function(l){return{'type':'expression','variant':'list','expression':isOkay(l)?l:[]};},function(f,rest){return flattenAll([f,rest]);},peg$otherExpectation("Function Call"),function(n,a,f,o){return Object.assign({'type':'function','name':n},a,o,f);},peg$otherExpectation("FILTER clause"),"filter",peg$literalExpectation("FILTER",true),function(e){return{filter:e};},peg$otherExpectation("Function Call Arguments"),function(s){return{'args':s};},function(d,e){return!isOkay(d)||e['expression'].length>0;},function(d,e){return{'args':Object.assign(e,d)};},function(s){return{'filter':keyNode(s)};},peg$otherExpectation("OVER clause"),function(w){return{over:w};},peg$otherExpectation("Window name"),function(n){return{'type':'identifier','variant':'window','name':n};},peg$otherExpectation("Window specification"),function(w,p,o){return Object.assign({type:'window'},w,p,o);},function(n){return{source:n};},peg$otherExpectation("window partition clause"),function(e){return{partition:e};},peg$otherExpectation("Error Message"),function(m){return m;},peg$otherExpectation("Statement"),function(m,s){return Object.assign(s,m);},peg$otherExpectation("QUERY PLAN"),function(e,q){return{'explain':isOkay(e)};},peg$otherExpectation("QUERY PLAN Keyword"),function(q,p){return foldStringKey([q,p]);},peg$otherExpectation("END Transaction Statement"),function(s,t){return{'type':'statement','variant':'transaction','action':'commit'};},peg$otherExpectation("BEGIN Transaction Statement"),function(s,m,t,n){return Object.assign({'type':'statement','variant':'transaction','action':'begin'},m,n);},function(t){return t;},function(m){return{'defer':keyNode(m)};},peg$otherExpectation("ROLLBACK Statement"),function(s,n){return Object.assign({'type':'statement','variant':'transaction','action':'rollback'},n);},peg$otherExpectation("TO Clause"),function(n){return{'savepoint':n};},function(s){return keyNode(s);},peg$otherExpectation("SAVEPOINT Statement"),function(s,n){return{'type':'statement','variant':s,'target':n};},peg$otherExpectation("RELEASE Statement"),function(s,a,n){return{'type':'statement','variant':keyNode(s),'target':n};},peg$otherExpectation("ALTER TABLE Statement"),function(s,n,e){return Object.assign({'type':'statement','variant':keyNode(s),'target':n},e);},peg$otherExpectation("ALTER TABLE Keyword"),function(a,t){return foldStringKey([a,t]);},peg$otherExpectation("RENAME TO Keyword"),function(s,n){return{'action':keyNode(s),'name':n};},peg$otherExpectation("ADD COLUMN Keyword"),function(s,d){return{'action':keyNode(s),'definition':d};},function(w,s){return Object.assign(s,w);},peg$otherExpectation("WITH Clause"),function(s,v,t){var recursive={'variant':isOkay(v)?'recursive':'common'};if(isArrayOkay(t)){t=t.map(function(elem){return Object.assign(elem,recursive);});}return{'with':t};},function(f,r){return flattenAll([f,r]);},peg$otherExpectation("Common Table Expression"),function(t,s){return Object.assign({'type':'expression','format':'table','variant':'common','target':t},s);},function(s){return{'expression':s};},function(w,s){return Object.assign(s,w);},peg$otherExpectation("SET statement"),function(l,v,r){return Object.assign({type:'statement',variant:'set',local:l||false,target:v},r);},"local",peg$literalExpectation("LOCAL",true),function(){return true;},"session",peg$literalExpectation("SESSION",true),function(){return false;},"current",peg$literalExpectation("CURRENT",true),function(){return{kind:'current'};},function(){return{kind:'default'};},function(l){return{kind:'value',args:l};},function(v,l){return{type:'expression',variant:'list',expression:[v].concat(_toConsumableArray(l))};},function(v){return v;},function(t){return{type:'statement',variant:'show',target:t};},"time",peg$literalExpectation("TIME",true),"zone",peg$literalExpectation("ZONE",true),function(){return{type:'identifier',variant:'variable',name:'timezone'};},"transaction",peg$literalExpectation("TRANSACTION",true),"isolation",peg$literalExpectation("ISOLATION",true),"level",peg$literalExpectation("LEVEL",true),function(){return{type:'identifier',variant:'variable',name:'transaction_isolation'};},"authorization",peg$literalExpectation("AUTHORIZATION",true),function(){return{type:'identifier',variant:'variable',name:'session_authorization'};},"all",peg$literalExpectation("ALL",true),function(){return{type:'identifier',variant:'variable',name:'all'};},peg$otherExpectation("ATTACH Statement"),function(a,b,e,n){return{'type':'statement','variant':keyNode(a),'target':n,'attach':e};},peg$otherExpectation("DETACH Statement"),function(d,b,n){return{'type':'statement','variant':keyNode(d),'target':n};},peg$otherExpectation("VACUUM Statement"),function(v,t){return Object.assign({'type':'statement','variant':'vacuum'},t);},function(t){return{'target':t};},peg$otherExpectation("ANALYZE Statement"),function(s,a){return Object.assign({'type':'statement','variant':keyNode(s)},a);},function(n){return{'target':n['name']};},peg$otherExpectation("REINDEX Statement"),function(a){return{'target':a['name']};},peg$otherExpectation("PRAGMA Statement"),function(s,n,v){return{'type':'statement','variant':keyNode(s),'target':n,'args':{'type':'expression','variant':'list','expression':v}};},function(v){return /^(yes|no|on|off|false|true|0|1)$/i.test(v);},function(v){return{'type':'literal','variant':'boolean','normalized':/^(yes|on|true|1)$/i.test(v)?'1':'0','value':v};},function(n){return keyNode(n);},function(n){return{'type':'identifier','variant':'name','name':n};},peg$otherExpectation("SELECT Statement"),function(s,o,l,f){return Object.assign(s,o,l,f);},function(s,o,f,l){return Object.assign(s,o,l,f);},peg$otherExpectation("SELECT ... FOR locking clause"),function(){return{};},function(i,r){return{locking:flattenAll([i,r])};},function(i){return i;},function(s,r,n){return Object.assign({type:'expression',variant:'locking',strength:foldStringWord(s).toLowerCase()},r,n);},function(l){return{target:l};},function(i,r){return flattenAll([i,r]);},function(p){return{policy:foldStringWord(p).toLowerCase()};},peg$otherExpectation("WINDOW clause"),function(l){return{window:l};},function(n,d){return Object.assign(d,{target:n});},peg$otherExpectation("ORDER BY Clause"),function(d){return{'order':d['result']};},peg$otherExpectation("LIMIT Clause"),function(s,e,d){return{'limit':Object.assign({'type':'expression','variant':'limit','start':e},d)};},function(e){return{'limit':{'type':'expression','variant':'limit','offset':e}};},peg$otherExpectation("OFFSET Clause"),function(o,e){return{'offset':e};},function(s,u){if(isArrayOkay(u)){return{'type':'statement','variant':'compound','statement':s,'compound':u};}else{return s;}},peg$otherExpectation("Union Operation"),function(c,s){return{'type':'compound','variant':c,'statement':s};},function(s,f,w,g,i){return Object.assign({'type':'statement','variant':'select'},s,f,w,g,i);},peg$otherExpectation("SELECT Results Clause"),function(d,t){return Object.assign({'result':t},d);},peg$otherExpectation("SELECT Results Modifier"),function(s){return{'distinct':true};},function(s){return{};},peg$otherExpectation("FROM Clause"),function(f,s){return{'from':s};},peg$otherExpectation("WHERE Clause"),function(f,e){return{'where':makeArray(e)};},peg$otherExpectation("GROUP BY Clause"),function(f,e,h){return Object.assign({'group':e},h);},peg$otherExpectation("HAVING Clause"),function(f,e){return{'having':e};},function(q,s){return{'type':'identifier','variant':'star','name':foldStringWord([q,s])};},function(n,s){return foldStringWord([n,s]);},function(e,a){return Object.assign(e,a);},function(f,t){if(isArrayOkay(t)){return{'type':'map','variant':'join','source':f,'map':t};}return f;},function(cl,c){return Object.assign(cl,c);},peg$otherExpectation("CROSS JOIN Operation"),function(n){return{'type':'join','variant':'cross join','source':n};},peg$otherExpectation("JOIN Operation"),function(o,n){return{'type':'join','variant':keyNode(o),'source':n};},function(l,t){return Object.assign(t,l);},function(n,l,a){return Object.assign({'type':'function','variant':'table','name':n,'args':l},a);},function(n,c){return{alias:n,columns:c};},function(c){return{columns:c};},function(f,b){return flattenAll([f,b]);},function(n,t,c){return Object.assign({type:'definition',variant:'column',name:n,datatype:t},c);},function(){return{lateral:true};},peg$otherExpectation("Qualified Table"),function(d,i){return Object.assign(d,i);},peg$otherExpectation("Qualified Table Identifier"),function(n,a){return Object.assign(n,a);},peg$otherExpectation("Qualfied Table Index"),function(s,n){return{'index':n};},function(n,i){return{'index':foldStringKey([n,i])};},peg$otherExpectation("SELECT Source"),function(l,a){return Object.assign(l,a);},peg$otherExpectation("Subquery"),function(s,a){return Object.assign(s,a);},peg$otherExpectation("Alias"),function(a,n,c){return Object.assign({'alias':n},c);},peg$otherExpectation("JOIN Operator"),function(n,t,j){return foldStringKey([n,t,j]);},function(t,o){return foldStringKey([t,o]);},function(t){return keyNode(t);},peg$otherExpectation("JOIN Constraint"),function(c){return{'constraint':Object.assign({'type':'constraint','variant':'join'},c)};},peg$otherExpectation("Join ON Clause"),function(s,e){return{'format':keyNode(s),'on':e};},peg$otherExpectation("Join USING Clause"),function(s,e){return{'format':keyNode(s),'using':e};},peg$otherExpectation("VALUES Clause"),function(s,l){return{'type':'statement','variant':'select','result':l};},function(f,b){return{'result':flattenAll([f,b])};},peg$otherExpectation("Ordering Expression"),function(e,d,n){if(isOkay(d)||isOkay(n)){return Object.assign({'type':'expression','variant':'order','expression':e},d,n);}return e;},function(d){return{nulls:keyNode(d)};},peg$otherExpectation("Star"),peg$otherExpectation("Fallback Type"),peg$otherExpectation("INSERT Statement"),function(k,t,c,r){return Object.assign({'type':'statement','variant':'insert'},k,t,c,r);},peg$otherExpectation("RETURNING clause"),function(t){return{returning:t};},peg$otherExpectation("INSERT Keyword"),function(a,m){return Object.assign({'action':keyNode(a)},m);},peg$otherExpectation("REPLACE Keyword"),function(a){return{'action':keyNode(a)};},peg$otherExpectation("INSERT OR Modifier"),function(s,m){return{'or':keyNode(m)};},function(i,r){return Object.assign({'into':i},r);},peg$otherExpectation("INTO Clause"),function(s,t){return t;},peg$otherExpectation("INTO Keyword"),function(r){return{'result':r};},peg$otherExpectation("PostgreSQL INSERT ON CONFLICT clause"),"do",peg$literalExpectation("DO",true),function(i,a){return{conflict:Object.assign(a,i)};},peg$otherExpectation("PostgreSQL ON CONFLICT action"),function(s,t,w){return Object.assign({action:s},t,w);},"nothing",peg$literalExpectation("NOTHING",true),function(s){return{action:keyNode(s)};},peg$otherExpectation("PostgreSQL ON CONFLICT expression"),function(i,w){return{on:Object.assign({columns:i},w)};},function(c){return{on:{constraint:c}};},peg$otherExpectation("Column List"),function(f,b){return{'columns':flattenAll([f,b])};},function(c){return c;},peg$otherExpectation("Column Name"),function(n){return{'type':'identifier','variant':'column','name':n};},function(s,r){return r;},peg$otherExpectation("VALUES Keyword"),peg$otherExpectation("Wrapped Expression List"),function(e){return e;},peg$otherExpectation("DEFAULT VALUES Clause"),function(d,v){return{'type':'values','variant':'default'};},peg$otherExpectation("Compound Operator"),peg$otherExpectation("UNION Operator"),function(s,a){return foldStringKey([s,a]);},function(a){return a;},peg$otherExpectation("UPDATE Statement"),function(s,f,t,u,w,o,l,r){return Object.assign({'type':'statement','variant':s,'into':t},f,u,w,o,l,r);},peg$otherExpectation("UPDATE Keyword"),peg$otherExpectation("UPDATE OR Modifier"),function(t){return{'or':keyNode(t)};},peg$otherExpectation("SET Clause"),function(c){return{'set':c};},peg$otherExpectation("Column Assignment"),function(f,e){return{'type':'assignment','target':f,'value':e};},peg$otherExpectation("UPDATE value expression"),function(){return{type:'literal',variant:'default',value:'default'};},peg$otherExpectation("DELETE Statement"),function(s,t,w,o,l,r){return Object.assign({'type':'statement','variant':s,'from':t},w,o,l,r);},peg$otherExpectation("DELETE Keyword"),peg$otherExpectation("CREATE Statement"),peg$otherExpectation("CREATE TABLE Statement"),function(s,ne,id,r){return Object.assign({'type':'statement','name':id},s,r,ne);},function(s,tmp,t){return Object.assign({'variant':s,'format':keyNode(t)},tmp);},function(t){return{'temporary':isOkay(t)};},peg$otherExpectation("IF NOT EXISTS Modifier"),function(i,n,e){return{'condition':makeArray({'type':'condition','variant':keyNode(i),'condition':{'type':'expression','variant':keyNode(e),'operator':foldStringKey([n,e])}})};},peg$otherExpectation("Table Definition"),function(s,t,r){return Object.assign({'definition':flattenAll([s,t])},r);},function(r,w){return{'optimization':[{'type':'optimization','value':foldStringKey([r,w])}]};},function(f){return f;},peg$otherExpectation("Column Definition"),function(n,t,c){return Object.assign({'type':'definition','variant':'column','name':n,'definition':isOkay(c)?c:[]},t);},peg$otherExpectation("Column Datatype"),function(t){return{'datatype':t};},peg$otherExpectation("Column Constraint"),function(n,c,ln){return Object.assign(c,n);},function(cl){return cl[cl.length-1];},peg$otherExpectation("CONSTRAINT Name"),function(n){return{'name':n};},peg$otherExpectation("FOREIGN KEY Column Constraint"),function(f){return Object.assign({'variant':'foreign key'},f);},peg$otherExpectation("PRIMARY KEY Column Constraint"),function(p,d,c,a){return Object.assign(p,c,d,a);},peg$otherExpectation("PRIMARY KEY Keyword"),function(s,k){return{'type':'constraint','variant':foldStringKey([s,k])};},peg$otherExpectation("AUTOINCREMENT Keyword"),function(a){return{'autoIncrement':true};},function(s,c){return Object.assign({'type':'constraint','variant':s},c);},peg$otherExpectation("UNIQUE Column Constraint"),peg$otherExpectation("NULL Column Constraint"),function(n,l){return foldStringKey([n,l]);},peg$otherExpectation("CHECK Column Constraint"),peg$otherExpectation("DEFAULT Column Constraint"),function(s,v){return{'type':'constraint','variant':keyNode(s),'value':v};},peg$otherExpectation("COLLATE Column Constraint"),function(c){return{'type':'constraint','variant':'collate','collate':c};},peg$otherExpectation("Table Constraint"),function(n,c,nl){return Object.assign({'type':'definition','variant':'constraint'},c,n);},peg$otherExpectation("CHECK Table Constraint"),function(c){return{'definition':makeArray(c)};},peg$otherExpectation("PRIMARY KEY Table Constraint"),function(k,c,t){return{'definition':makeArray(Object.assign(k,t,c[1])),'columns':c[0]};},function(s){return{'type':'constraint','variant':keyNode(s)};},function(p,k){return foldStringKey([p,k]);},peg$otherExpectation("UNIQUE Keyword"),function(u){return keyNode(u);},function(f,b){return[f].concat(b);},function(c){return c.map(function(_ref){var _ref2=_slicedToArray(_ref,1),res=_ref2[0];return res;});},function(c){var auto=c.find(function(_ref3){var _ref4=_slicedToArray(_ref3,2),res=_ref4[0],a=_ref4[1];return isOkay(a);});return[c.map(function(_ref5){var _ref6=_slicedToArray(_ref5,2),res=_ref6[0],a=_ref6[1];return res;}),auto?auto[1]:null];},peg$otherExpectation("Indexed Column"),function(e,d,a){var res=e;if(isOkay(d)){res=Object.assign({'type':'expression','variant':'order','expression':e},d);}return[res,a];},peg$otherExpectation("Collation"),function(c){return{'collate':makeArray(c)};},peg$otherExpectation("Column Direction"),function(t){return{'direction':keyNode(t)};},function(s,t){return{'conflict':keyNode(t)};},peg$otherExpectation("ON CONFLICT Keyword"),function(o,c){return foldStringKey([o,c]);},function(k,c){return{'type':'constraint','variant':keyNode(k),'expression':c};},peg$otherExpectation("FOREIGN KEY Table Constraint"),function(k,l,c){return Object.assign({'definition':makeArray(Object.assign(k,c))},l);},peg$otherExpectation("FOREIGN KEY Keyword"),function(f,k){return{'type':'constraint','variant':foldStringKey([f,k])};},function(r,a,d){return Object.assign({'type':'constraint'},r,a,d);},peg$otherExpectation("REFERENCES Clause"),function(s,t){return{'references':t};},function(f,b){return{'action':flattenAll([f,b])};},peg$otherExpectation("FOREIGN KEY Action Clause"),function(m,a,n){return{'type':'action','variant':keyNode(m),'action':keyNode(n)};},peg$otherExpectation("FOREIGN KEY Action"),function(s,v){return foldStringKey([s,v]);},function(c){return keyNode(c);},function(n,a){return foldStringKey([n,a]);},function(m,n){return{'type':'action','variant':keyNode(m),'action':n};},peg$otherExpectation("DEFERRABLE Clause"),function(n,d,i){return{'defer':foldStringKey([n,d,i])};},function(i,d){return foldStringKey([i,d]);},function(s){return{'definition':makeArray(s)};},peg$otherExpectation("CREATE INDEX Statement"),function(s,ne,n,o,w){return Object.assign({'type':'statement','target':n,'on':o},s,ne,w);},function(s,u,i){return Object.assign({'variant':keyNode(s),'format':keyNode(i)},u);},function(u){return{'unique':true};},peg$otherExpectation("ON Clause"),function(o,t,c){return{'type':'identifier','variant':'expression','format':'table','name':t['name'],'columns':c};},peg$otherExpectation("CREATE TRIGGER Statement"),function(s,ne,n,cd,o,me,wh,a){return Object.assign({'type':'statement','target':n,'on':o,'event':cd,'by':isOkay(me)?me:'row','action':makeArray(a)},s,ne,wh);},function(s,tmp,t){return Object.assign({'variant':keyNode(s),'format':keyNode(t)},tmp);},peg$otherExpectation("Conditional Clause"),function(m,d){return Object.assign({'type':'event'},m,d);},function(m){return{'occurs':keyNode(m)};},function(i,o){return foldStringKey([i,o]);},peg$otherExpectation("Conditional Action"),function(o){return{'event':keyNode(o)};},function(s,f){return{'event':keyNode(s),'of':f};},function(s,c){return c;},"statement",peg$literalExpectation("STATEMENT",true),function(f,e,r){return keyNode(r);},function(w,e){return{'when':e};},peg$otherExpectation("Actions Clause"),function(s,a,e){return a;},function(l){return l;},peg$otherExpectation("CREATE VIEW Statement"),function(s,ne,n,r){return Object.assign({'type':'statement','target':n,'result':r},s,ne);},function(n,a){return Object.assign({'type':'identifier','variant':'expression','format':'view','name':n['name'],'columns':[]},a);},function(s,tmp,v){return Object.assign({'variant':keyNode(s),'format':keyNode(v)},tmp);},peg$otherExpectation("CREATE VIRTUAL TABLE Statement"),function(s,ne,n,m){return Object.assign({'type':'statement','target':n,'result':m},s,ne);},function(s,v,t){return{'variant':keyNode(s),'format':keyNode(v)};},function(m,a){return Object.assign({'type':'module','variant':'virtual','name':m},a);},peg$otherExpectation("Module Arguments"),function(l){return{'args':{'type':'expression','variant':'list','expression':isOkay(l)?l:[]}};},function(f,b){return flattenAll([f,b]).filter(function(arg){return isOkay(arg);});},peg$otherExpectation("DROP Statement"),function(s,q){return Object.assign({'type':'statement','target':Object.assign(q,{'variant':s['format']})},s);},peg$otherExpectation("DROP Keyword"),function(s,t,i){return Object.assign({'variant':keyNode(s),'format':t,'condition':[]},i);},peg$otherExpectation("DROP Type"),peg$otherExpectation("IF EXISTS Keyword"),function(i,e){return{'condition':[{'type':'condition','variant':keyNode(i),'condition':{'type':'expression','variant':keyNode(e),'operator':keyNode(e)}}]};},peg$otherExpectation("Or"),peg$otherExpectation("Add"),peg$otherExpectation("Subtract"),peg$otherExpectation("Multiply"),peg$otherExpectation("Divide"),peg$otherExpectation("Modulo"),peg$otherExpectation("Shift Left"),peg$otherExpectation("Shift Right"),peg$otherExpectation("Logical AND"),peg$otherExpectation("Logical OR"),peg$otherExpectation("Less Than"),peg$otherExpectation("Greater Than"),peg$otherExpectation("Less Than Or Equal"),peg$otherExpectation("Greater Than Or Equal"),peg$otherExpectation("Equal"),peg$otherExpectation("Not Equal"),peg$otherExpectation("PostgreSQL custom binary operarator"),function(s){var sym=s.join('');if(sym.includes('--')||sym.includes('/*'))return false;var last=s[s.length-1];if(!(last==='-'||last==='+'))return true;return sym.match(/[~@#%^&|`?]/);},function(s){return s.join('');},peg$otherExpectation("IS"),function(i,n){return foldStringKey([i,n]);},peg$otherExpectation("Identifier"),peg$otherExpectation("Database Identifier"),function(n){return{'type':'identifier','variant':'database','name':n};},peg$otherExpectation("Function Identifier"),function(d,n){return{'type':'identifier','variant':'function','name':foldStringWord([d,n])};},peg$otherExpectation("Table Identifier"),function(d,n){return{'type':'identifier','variant':'table','name':foldStringWord([d,n])};},function(n,d){return foldStringWord([n,d]);},peg$otherExpectation("Column Identifier"),function(q,n,i){return Object.assign({'type':'identifier','variant':'column','name':foldStringWord([q,n])},i);},peg$otherExpectation("value indirection"),function(l){return{element:l};},function(i,r){return flattenAll([i,r]);},function(n){return{type:'indirection',variant:'attribute',attribute:n};},function(n){return{type:'indirection',variant:'star',attribute:n};},function(l,u){return Object.assign({type:'indirection',variant:'slice'},l,u);},function(u){return Object.assign({type:'indirection',variant:'slice'},u);},function(e){return{type:'indirection',variant:'index',index:e};},function(e){return{lower:e};},function(e){return{upper:e};},function(){return'';},function(d,t){return foldStringWord([d,t]);},peg$otherExpectation("Collation Identifier"),function(n){return{'type':'identifier','variant':'collation','name':n};},peg$otherExpectation("Savepoint Identifier"),function(n){return{'type':'identifier','variant':'savepoint','name':n};},peg$otherExpectation("Index Identifier"),function(d,n){return{'type':'identifier','variant':'index','name':foldStringWord([d,n])};},peg$otherExpectation("Trigger Identifier"),function(d,n){return{'type':'identifier','variant':'trigger','name':foldStringWord([d,n])};},peg$otherExpectation("View Identifier"),function(d,n){return{'type':'identifier','variant':'view','name':foldStringWord([d,n])};},peg$otherExpectation("Pragma Identifier"),function(d,n){return{'type':'identifier','variant':'pragma','name':foldStringWord([d,n])};},peg$otherExpectation("Variable Identifier"),function(d,n){return{'type':'identifier','variant':'variable','name':foldStringWord([d,n])};},peg$otherExpectation("CTE Identifier"),function(d){return d;},function(n,a){return Object.assign({'type':'identifier','variant':'expression','format':'table','name':n['name'],'columns':[]},a);},peg$otherExpectation("Table Constraint Identifier"),function(n){return{'type':'identifier','variant':'constraint','format':'table','name':n};},peg$otherExpectation("Column Constraint Identifier"),function(n){return{'type':'identifier','variant':'constraint','format':'column','name':n};},peg$otherExpectation("Datatype Name"),function(t){return[t,'text'];},function(t){return[t,'real'];},function(t){return[t,'numeric'];},function(t){return[t,'integer'];},function(t){return[t,'none'];},peg$otherExpectation("TEXT Datatype Name"),"n",peg$literalExpectation("N",true),"var",peg$literalExpectation("VAR",true),"char",peg$literalExpectation("CHAR",true),"tiny",peg$literalExpectation("TINY",true),"medium",peg$literalExpectation("MEDIUM",true),"long",peg$literalExpectation("LONG",true),"text",peg$literalExpectation("TEXT",true),"clob",peg$literalExpectation("CLOB",true),peg$otherExpectation("REAL Datatype Name"),"float",peg$literalExpectation("FLOAT",true),"real",peg$literalExpectation("REAL",true),peg$otherExpectation("DOUBLE Datatype Name"),"double",peg$literalExpectation("DOUBLE",true),"precision",peg$literalExpectation("PRECISION",true),function(d,p){return foldStringWord([d,p]);},peg$otherExpectation("NUMERIC Datatype Name"),"numeric",peg$literalExpectation("NUMERIC",true),"decimal",peg$literalExpectation("DECIMAL",true),"boolean",peg$literalExpectation("BOOLEAN",true),"date",peg$literalExpectation("DATE",true),"stamp",peg$literalExpectation("STAMP",true),"string",peg$literalExpectation("STRING",true),peg$otherExpectation("INTEGER Datatype Name"),"int",peg$literalExpectation("INT",true),"2",peg$literalExpectation("2",false),"4",peg$literalExpectation("4",false),"8",peg$literalExpectation("8",false),"eger",peg$literalExpectation("EGER",true),"big",peg$literalExpectation("BIG",true),"small",peg$literalExpectation("SMALL",true),"floating",peg$literalExpectation("FLOATING",true),"point",peg$literalExpectation("POINT",true),function(f,p){return foldStringWord([f,p]);},peg$otherExpectation("BLOB Datatype Name"),"blob",peg$literalExpectation("BLOB",true),/^[a-z0-9$_]/i,peg$classExpectation([["a","z"],["0","9"],"$","_"],false,true),"\\u",peg$literalExpectation("\\u",false),/^[a-f0-9]/i,peg$classExpectation([["a","f"],["0","9"]],false,true),function(u,s){return foldStringWord([u,s]).toLowerCase();},function(n){return keyNode(n);},peg$anyExpectation(),function(n){return textNode(n);},/^[ \t]/,peg$classExpectation([" ","\t"],false,false),"\"",peg$literalExpectation("\"",false),"\"\"",peg$literalExpectation("\"\"",false),/^[^"]/,peg$classExpectation(["\""],true,false),function(n){return unescape(n,'"');},"'",peg$literalExpectation("'",false),function(n){return unescape(n,"'");},"`",peg$literalExpectation("`",false),"``",peg$literalExpectation("``",false),/^[^`]/,peg$classExpectation(["`"],true,false),function(n){return unescape(n,'`');},peg$otherExpectation("Open Bracket"),"[",peg$literalExpectation("[",false),peg$otherExpectation("Close Bracket"),"]",peg$literalExpectation("]",false),peg$otherExpectation("Open Parenthesis"),"(",peg$literalExpectation("(",false),peg$otherExpectation("Close Parenthesis"),")",peg$literalExpectation(")",false),peg$otherExpectation("Comma"),",",peg$literalExpectation(",",false),peg$otherExpectation("Period"),".",peg$literalExpectation(".",false),peg$otherExpectation("Asterisk"),"*",peg$literalExpectation("*",false),peg$otherExpectation("Question Mark"),"?",peg$literalExpectation("?",false),peg$otherExpectation("Single Quote"),peg$otherExpectation("Double Quote"),peg$otherExpectation("Backtick"),peg$otherExpectation("Tilde"),"~",peg$literalExpectation("~",false),peg$otherExpectation("Plus"),"+",peg$literalExpectation("+",false),peg$otherExpectation("Minus"),"-",peg$literalExpectation("-",false),"=",peg$literalExpectation("=",false),peg$otherExpectation("Ampersand"),"&",peg$literalExpectation("&",false),peg$otherExpectation("Pipe"),"|",peg$literalExpectation("|",false),"%",peg$literalExpectation("%",false),"<",peg$literalExpectation("<",false),">",peg$literalExpectation(">",false),peg$otherExpectation("Exclamation"),"!",peg$literalExpectation("!",false),peg$otherExpectation("Semicolon"),";",peg$literalExpectation(";",false),peg$otherExpectation("Colon"),peg$otherExpectation("Forward Slash"),"/",peg$literalExpectation("/",false),peg$otherExpectation("Backslash"),"\\",peg$literalExpectation("\\",false),peg$otherExpectation("Operator characters"),/^[\-+*\/<>=~!@#%\^&|`]/,peg$classExpectation(["-","+","*","/","<",">","=","~","!","@","#","%","^","&","|","`"],false,false),"abort",peg$literalExpectation("ABORT",true),"action",peg$literalExpectation("ACTION",true),"add",peg$literalExpectation("ADD",true),"after",peg$literalExpectation("AFTER",true),"alter",peg$literalExpectation("ALTER",true),"analyze",peg$literalExpectation("ANALYZE",true),"and",peg$literalExpectation("AND",true),"array",peg$literalExpectation("ARRAY",true),"as",peg$literalExpectation("AS",true),"asc",peg$literalExpectation("ASC",true),"attach",peg$literalExpectation("ATTACH",true),"autoincrement",peg$literalExpectation("AUTOINCREMENT",true),"before",peg$literalExpectation("BEFORE",true),"begin",peg$literalExpectation("BEGIN",true),"between",peg$literalExpectation("BETWEEN",true),"by",peg$literalExpectation("BY",true),"cascade",peg$literalExpectation("CASCADE",true),"case",peg$literalExpectation("CASE",true),"cast",peg$literalExpectation("CAST",true),"check",peg$literalExpectation("CHECK",true),"collate",peg$literalExpectation("COLLATE",true),"column",peg$literalExpectation("COLUMN",true),"commit",peg$literalExpectation("COMMIT",true),"conflict",peg$literalExpectation("CONFLICT",true),"constraint",peg$literalExpectation("CONSTRAINT",true),"create",peg$literalExpectation("CREATE",true),"cross",peg$literalExpectation("CROSS",true),"current_date",peg$literalExpectation("CURRENT_DATE",true),"current_time",peg$literalExpectation("CURRENT_TIME",true),"current_timestamp",peg$literalExpectation("CURRENT_TIMESTAMP",true),"database",peg$literalExpectation("DATABASE",true),"default",peg$literalExpectation("DEFAULT",true),"deferrable",peg$literalExpectation("DEFERRABLE",true),"deferred",peg$literalExpectation("DEFERRED",true),"delete",peg$literalExpectation("DELETE",true),"desc",peg$literalExpectation("DESC",true),"detach",peg$literalExpectation("DETACH",true),"distinct",peg$literalExpectation("DISTINCT",true),"drop",peg$literalExpectation("DROP",true),"each",peg$literalExpectation("EACH",true),"else",peg$literalExpectation("ELSE",true),"end",peg$literalExpectation("END",true),"escape",peg$literalExpectation("ESCAPE",true),"except",peg$literalExpectation("EXCEPT",true),"exclusive",peg$literalExpectation("EXCLUSIVE",true),"exists",peg$literalExpectation("EXISTS",true),"explain",peg$literalExpectation("EXPLAIN",true),"fail",peg$literalExpectation("FAIL",true),"first",peg$literalExpectation("FIRST",true),"for",peg$literalExpectation("FOR",true),"foreign",peg$literalExpectation("FOREIGN",true),"from",peg$literalExpectation("FROM",true),"full",peg$literalExpectation("FULL",true),"glob",peg$literalExpectation("GLOB",true),"group",peg$literalExpectation("GROUP",true),"having",peg$literalExpectation("HAVING",true),"if",peg$literalExpectation("IF",true),"ignore",peg$literalExpectation("IGNORE",true),"ilike",peg$literalExpectation("ILIKE",true),"immediate",peg$literalExpectation("IMMEDIATE",true),"in",peg$literalExpectation("IN",true),"index",peg$literalExpectation("INDEX",true),"indexed",peg$literalExpectation("INDEXED",true),"initially",peg$literalExpectation("INITIALLY",true),"inner",peg$literalExpectation("INNER",true),"insert",peg$literalExpectation("INSERT",true),"instead",peg$literalExpectation("INSTEAD",true),"intersect",peg$literalExpectation("INTERSECT",true),"into",peg$literalExpectation("INTO",true),"is",peg$literalExpectation("IS",true),"isnull",peg$literalExpectation("ISNULL",true),"join",peg$literalExpectation("JOIN",true),"key",peg$literalExpectation("KEY",true),"last",peg$literalExpectation("LAST",true),"lateral",peg$literalExpectation("LATERAL",true),"left",peg$literalExpectation("LEFT",true),"like",peg$literalExpectation("LIKE",true),"limit",peg$literalExpectation("LIMIT",true),"locked",peg$literalExpectation("LOCKED",true),"match",peg$literalExpectation("MATCH",true),"natural",peg$literalExpectation("NATURAL",true),"no",peg$literalExpectation("NO",true),"not",peg$literalExpectation("NOT",true),"notnull",peg$literalExpectation("NOTNULL",true),"nowait",peg$literalExpectation("NOWAIT",true),"nulls",peg$literalExpectation("NULLS",true),"of",peg$literalExpectation("OF",true),"offset",peg$literalExpectation("OFFSET",true),"on",peg$literalExpectation("ON",true),"only",peg$literalExpectation("ONLY",true),"or",peg$literalExpectation("OR",true),"order",peg$literalExpectation("ORDER",true),"outer",peg$literalExpectation("OUTER",true),"over",peg$literalExpectation("OVER",true),"partition",peg$literalExpectation("PARTITION",true),"plan",peg$literalExpectation("PLAN",true),"pragma",peg$literalExpectation("PRAGMA",true),"primary",peg$literalExpectation("PRIMARY",true),"query",peg$literalExpectation("QUERY",true),"raise",peg$literalExpectation("RAISE",true),"read",peg$literalExpectation("READ",true),"recursive",peg$literalExpectation("RECURSIVE",true),"references",peg$literalExpectation("REFERENCES",true),"regexp",peg$literalExpectation("REGEXP",true),"reindex",peg$literalExpectation("REINDEX",true),"release",peg$literalExpectation("RELEASE",true),"rename",peg$literalExpectation("RENAME",true),"replace",peg$literalExpectation("REPLACE",true),"restrict",peg$literalExpectation("RESTRICT",true),"returning",peg$literalExpectation("RETURNING",true),"right",peg$literalExpectation("RIGHT",true),"rollback",peg$literalExpectation("ROLLBACK",true),"row",peg$literalExpectation("ROW",true),"rowid",peg$literalExpectation("ROWID",true),"savepoint",peg$literalExpectation("SAVEPOINT",true),"select",peg$literalExpectation("SELECT",true),"set",peg$literalExpectation("SET",true),"share",peg$literalExpectation("SHARE",true),"show",peg$literalExpectation("SHOW",true),"skip",peg$literalExpectation("SKIP",true),"table",peg$literalExpectation("TABLE",true),"temp",peg$literalExpectation("TEMP",true),"temporary",peg$literalExpectation("TEMPORARY",true),"then",peg$literalExpectation("THEN",true),"to",peg$literalExpectation("TO",true),"trigger",peg$literalExpectation("TRIGGER",true),"union",peg$literalExpectation("UNION",true),"unique",peg$literalExpectation("UNIQUE",true),"update",peg$literalExpectation("UPDATE",true),"using",peg$literalExpectation("USING",true),"vacuum",peg$literalExpectation("VACUUM",true),"values",peg$literalExpectation("VALUES",true),"view",peg$literalExpectation("VIEW",true),"virtual",peg$literalExpectation("VIRTUAL",true),"when",peg$literalExpectation("WHEN",true),"where",peg$literalExpectation("WHERE",true),"window",peg$literalExpectation("WINDOW",true),"with",peg$literalExpectation("WITH",true),"without",peg$literalExpectation("WITHOUT",true),function(r){return keyNode(r);},function(){return null;},peg$otherExpectation("Line Comment"),"--",peg$literalExpectation("--",false),/^[\n\v\f\r]/,peg$classExpectation(["\n","\v","\f","\r"],false,false),peg$otherExpectation("Block Comment"),"/*",peg$literalExpectation("/*",false),"*/",peg$literalExpectation("*/",false),/^[\n\v\f\r\t ]/,peg$classExpectation(["\n","\v","\f","\r","\t"," "],false,false),peg$otherExpectation("Whitespace"),"__TODO__",peg$literalExpectation("__TODO__",false)];var peg$bytecode=[peg$decode("%;\u028B/H#;#/?$;\".\" &\"/1$;#/($8$: $!!)($'#(#'#(\"'#&'#"),peg$decode("%;\u028B/C#;#/:$;\x88/1$;#/($8$: $!!)($'#(#'#(\"'#&'#"),peg$decode("%;\x88/B#;\u028B/9$$;%0#*;%&/)$8#:!#\"\" )(#'#(\"'#&'#"),peg$decode("$;\u01ED0#*;\u01ED&"),peg$decode("$;\u01ED/&#0#*;\u01ED&&&#"),peg$decode("%;$/:#;\x88/1$;\u028B/($8#:\"#!!)(#'#(\"'#&'#"),peg$decode("<%;).# &;*/O#;\u028B/F$;,.\" &\"/8$;'.\" &\"/*$8$:$$##! )($'#(#'#(\"'#&'#=.\" 7#"),peg$decode("<%;(/9#$;(0#*;(&/)$8\":&\"\"! )(\"'#&'#.I &%;\u028B/?#;\u01FA/6$;(.\" &\"/($8#:'#! )(#'#(\"'#&'#=.\" 7%"),peg$decode("%;\u028B/Z#;\u01D8/Q$;\u028B/H$;9.\" &\"/:$;\u028B/1$;\u01D9/($8&:(&!\")(&'#(%'#($'#(#'#(\"'#&'#"),peg$decode("%;\u01C5/' 8!:)!! )"),peg$decode("<%;\u01CF/9#$;+0#*;+&/)$8\":+\"\"! )(\"'#&'#=.\" 7*"),peg$decode("%4,\"\"5!7-/1#;\u01D1/($8\":.\"! )(\"'#&'#"),peg$decode("<%;\u01DA/R#;8/I$;\u028B/@$;-.\" &\"/2$;\u01DB/)$8%:0%\"#!)(%'#($'#(#'#(\"'#&'#=.\" 7/"),peg$decode("%;\u01DC/C#;\u028B/:$;8/1$;\u028B/($8$:1$!!)($'#(#'#(\"'#&'#"),peg$decode(";8.A &;9.; &;4.5 &;/./ &;0.) &;1.# &;5"),peg$decode("<%;\u0248/1#;\u028B/($8\":3\"!!)(\"'#&'#=.\" 72"),peg$decode("<%;\u020E.) &;\u0210.# &;\u020F/1#;\u028B/($8\":5\"!!)(\"'#&'#=.\" 74"),peg$decode("<%;7.\" &\"/2#;2/)$8\":7\"\"! )(\"'#&'#=.\" 76"),peg$decode("<%;\u01E0/A#$;30#*;3&/1$;\u01E0/($8#:9#!!)(#'#(\"'#&'#=.\" 78"),peg$decode("2:\"\"6:7;.) &4<\"\"5!7="),peg$decode("<%4?\"\"5!7@/1#;2/($8\":A\"! )(\"'#&'#=.\" 7>"),peg$decode("<%;&/8#;1.# &;B/)$8\":C\"\"! )(\"'#&'#=.\" 7B"),peg$decode("%;\u01D1.# &;\u01D5/' 8!:D!! )"),peg$decode("<%;\u01E4.# &;\u01E5/' 8!:\"!! )=.\" 7E"),peg$decode("%;7.\" &\"/2#;9/)$8\":F\"\"! )(\"'#&'#"),peg$decode(";?.# &;:"),peg$decode("%;;/7#;>.\" &\"/)$8\":G\"\"! )(\"'#&'#"),peg$decode("<;<.# &;==.\" 7H"),peg$decode("%$;A/&#0#*;A&&&#/7#;=.\" &\"/)$8\":I\"\"! )(\"'#&'#"),peg$decode("%;\u01DD/9#$;A0#*;A&/)$8\":J\"\"! )(\"'#&'#"),peg$decode("<%3L\"\"5!7M/T#4N\"\"5!7O.\" &\"/@$$;A/&#0#*;A&&&#/*$8#:P##\"! )(#'#(\"'#&'#=.\" 7K"),peg$decode("<%3R\"\"5\"7S/?#$;@/&#0#*;@&&&#/)$8\":T\"\"! )(\"'#&'#=.\" 7Q"),peg$decode("4U\"\"5!7V"),peg$decode("4W\"\"5!7X"),peg$decode("<%;C.) &;E.# &;F/' 8!:Z!! )=.\" 7Y"),peg$decode("<%;\u01DF/@#;D.\" &\"/2$;\u028B/)$8#:\\#\"\"!)(#'#(\"'#&'#=.\" 7["),peg$decode("%4]\"\"5!7^/9#$;A0#*;A&/)$8\":_\"\"! )(\"'#&'#"),peg$decode("<%4a\"\"5!7b/H#$;\u01CD/&#0#*;\u01CD&&&#/2$;\u028B/)$8#:c#\"\"!)(#'#(\"'#&'#=.\" 7`"),peg$decode("<%2e\"\"6e7f/o#$;\u01CD.) &2g\"\"6g7h/2#0/*;\u01CD.) &2g\"\"6g7h&&&#/A$;\u028B/8$;G.\" &\"/*$8$:i$##\" )($'#(#'#(\"'#&'#=.\" 7d"),peg$decode("%;\u01D5/1#;\u028B/($8\":j\"!!)(\"'#&'#"),peg$decode("<%;I.\" &\"/;#;\u028B/2$;\xA4/)$8#:l#\"\" )(#'#(\"'#&'#=.\" 7k"),peg$decode("<%;u.\" &\"/;#;\u0220/2$;\u028B/)$8#:n#\"\"!)(#'#(\"'#&'#=.\" 7m"),peg$decode("<%;\u0257/_#;\u028B/V$;\u01DA/M$;\u028B/D$;K/;$;\u028B/2$;\u01DB/)$8':p'\"&\")(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7o"),peg$decode("<%;L.# &;M/' 8!:r!! )=.\" 7q"),peg$decode("<%;\u022C/' 8!:t!! )=.\" 7s"),peg$decode("%;\u0263.) &;\u01F2.# &;\u0222/M#;\u028B/D$;\u01DC/;$;\u028B/2$;\x87/)$8%:u%\"$ )(%'#($'#(#'#(\"'#&'#"),peg$decode(";B./ &;~.) &;..# &;\u01AE"),peg$decode("%;\u01DA/L#;\u028B/C$;z/:$;\u028B/1$;\u01DB/($8%:v%!\")(%'#($'#(#'#(\"'#&'#"),peg$decode(";O.G &;H.A &;h.; &;j.5 &;J./ &;Q.) &;R.# &;N"),peg$decode("<%;\u01FA/:#;\u028B/1$;S/($8#:x#! )(#'#(\"'#&'#=.\" 7w"),peg$decode("<%;\u01FA/:#;\u028B/1$;\xA4/($8#:z#! )(#'#(\"'#&'#=.\" 7y"),peg$decode("<%;\u01D8/R#;\u028B/I$;T.# &;{/:$;\u028B/1$;\u01D9/($8%:|%!\")(%'#($'#(#'#(\"'#&'#=.\" 7{"),peg$decode("<%;S/B#;\u028B/9$$;U0#*;U&/)$8#:~#\"\" )(#'#(\"'#&'#=.\" 7}"),peg$decode("%;\u01DC/:#;\u028B/1$;S/($8#:\x7F#! )(#'#(\"'#&'#"),peg$decode("%;P/;#;\u028B/2$;Z/)$8#:\x80#\"\" )(#'#(\"'#&'#.# &;P"),peg$decode("<%;V/S#;\u028B/J$2\x82\"\"6\x827\x83/;$;\u028B/2$;&/)$8%:\x84%\"$ )(%'#($'#(#'#(\"'#&'#.# &;V=.\" 7\x81"),peg$decode("%;Y/A#;\u028B/8$;W.# &;z/)$8#:\x85#\"\" )(#'#(\"'#&'#.# &;W"),peg$decode(";\u01E3.U &;\u01E5.O &;\u01E4.I &%%;u/8#%<;\u0220=.##&&!&'#/#$+\")(\"'#&'#/\"!&,)"),peg$decode("<%;\u015D/' 8!:\x87!! )=.\" 7\x86"),peg$decode("%;X/\x83#$%;\u028B/>#;\u0196/5$;\u028B/,$;X/#$+$)($'#(#'#(\"'#&'#0H*%;\u028B/>#;\u0196/5$;\u028B/,$;X/#$+$)($'#(#'#(\"'#&'#&/)$8\":\x88\"\"! )(\"'#&'#"),peg$decode("%;[/\x83#$%;\u028B/>#;]/5$;\u028B/,$;[/#$+$)($'#(#'#(\"'#&'#0H*%;\u028B/>#;]/5$;\u028B/,$;[/#$+$)($'#(#'#(\"'#&'#&/)$8\":\x88\"\"! )(\"'#&'#"),peg$decode(";\u0199.) &;\u019A.# &;\u019B"),peg$decode("%;\\/\x83#$%;\u028B/>#;_/5$;\u028B/,$;\\/#$+$)($'#(#'#(\"'#&'#0H*%;\u028B/>#;_/5$;\u028B/,$;\\/#$+$)($'#(#'#(\"'#&'#&/)$8\":\x88\"\"! )(\"'#&'#"),peg$decode(";\u0197.# &;\u0198"),peg$decode("%;^/\x83#$%;\u028B/>#;a/5$;\u028B/,$;^/#$+$)($'#(#'#(\"'#&'#0H*%;\u028B/>#;a/5$;\u028B/,$;^/#$+$)($'#(#'#(\"'#&'#&/)$8\":\x88\"\"! )(\"'#&'#"),peg$decode(";\u019C.[ &;\u019D.U &;\u01A7.O &;\u019E.I &%%;\u019F/8#%<;\u019F=.##&&!&'#/#$+\")(\"'#&'#/\"!&,)"),peg$decode("%;`/\x83#$%;\u028B/>#;c/5$;\u028B/,$;`/#$+$)($'#(#'#(\"'#&'#0H*%;\u028B/>#;c/5$;\u028B/,$;`/#$+$)($'#(#'#(\"'#&'#&/)$8\":\x88\"\"! )(\"'#&'#"),peg$decode(";\u01A2.{ &;\u01A3.u &%%;\u01A0/8#%<;a=.##&&!&'#/#$+\")(\"'#&'#/\"!&,).I &%%;\u01A1/8#%<;a=.##&&!&'#/#$+\")(\"'#&'#/\"!&,)"),peg$decode("%;b/9#$;e0#*;e&/)$8\":\x88\"\"! )(\"'#&'#"),peg$decode("%;\u028B/1#;f/($8\":\x89\"! )(\"'#&'#.H &%;\u028B/>#;g/5$;\u028B/,$;b/#$+$)($'#(#'#(\"'#&'#"),peg$decode("%3\x8A\"\"5$7\x8B/?#;\u028B/6$3\x8C\"\"5$7\x8D/'$8#:\x8E# )(#'#(\"'#&'#.? &%;\u0239/& 8!:\x8F! ).. &%;\u0246/& 8!:\x8E! )"),peg$decode(";\u01A8./ &;\u01A5.) &;\u01A6.# &;\u01A4"),peg$decode("<%;\u0205/i#;\u028B/`$;\u01DA/W$;z/N$;\u028B/E$;i/<$;\u028B/3$;\u01DB/*$8(:\x91(#'$\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\x90"),peg$decode("<%;\u01FB/:#;\u028B/1$;&/($8#:\x93#! )(#'#(\"'#&'#=.\" 7\x92"),peg$decode("<%;\u0204/\x93#;\u028B/\x8A$;k.\" &\"/|$;\u028B/s$$;l/&#0#*;l&&&#/]$;\u028B/T$;m.\" &\"/F$;\u028B/=$;\u021C/4$;\u028B/+$8*:\x95*$)'%#)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\x94"),peg$decode("%%<;\u027B=.##&&!&'#/1#;z/($8\":\x96\"! )(\"'#&'#"),peg$decode("<%;\u027B/i#;\u028B/`$;z/W$;\u028B/N$;\u026F/E$;\u028B/<$;z/3$;\u028B/*$8(:\x98(#'%!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\x97"),peg$decode("<%;\u021B/D#;\u028B/;$;z/2$;\u028B/)$8$:\x9A$\"#!)($'#(#'#(\"'#&'#=.\" 7\x99"),peg$decode("%;d/;#;\u028B/2$;o/)$8#:\x9B#\"\" )(#'#(\"'#&'#.# &;d"),peg$decode(";v./ &;p.) &;s.# &;q"),peg$decode("<%;\u0238/n#;\u028B/e$;u.\" &\"/W$;\u0218/N$;\u028B/E$;\u0226/<$;\u028B/3$;n/*$8(:\x9D(#%$ )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\x9C"),peg$decode("<%;u.\" &\"/u#;\u023F.5 &;\u022D./ &;\u0228.) &;\u025B.# &;\u0242/T$;\u028B/K$;n/B$;\u028B/9$;r.\" &\"/+$8&:\x9F&$%$\" )(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\x9E"),peg$decode("<%;\u021D/D#;\u028B/;$;n/2$;\u028B/)$8$:\xA1$\"#!)($'#(#'#(\"'#&'#=.\" 7\xA0"),peg$decode("<%;u.\" &\"/E#;\u0201/<$;\u028B/3$;t/*$8$:\xA3$##\" )($'#(#'#(\"'#&'#=.\" 7\xA2"),peg$decode("%;n/W#%;\u028B/>#;\u01F9/5$;\u028B/,$;n/#$+$)($'#(#'#(\"'#&'#/)$8\":\xA4\"\"! )(\"'#&'#"),peg$decode("%;\u0245/1#;\u028B/($8\":\xA5\"!!)(\"'#&'#"),peg$decode("<%;u.\" &\"/E#;\u022F/<$;\u028B/3$;w/*$8$:\xA7$##\" )($'#(#'#(\"'#&'#=.\" 7\xA6"),peg$decode(";x.# &;\u01AC"),peg$decode("%;\u01DA/I#;\xA5.# &;{/:$;\u028B/1$;\u01DB/($8$:\x7F$!\")($'#(#'#(\"'#&'#"),peg$decode("%;n/\x83#$%;\u028B/>#;\u01F9/5$;\u028B/,$;n/#$+$)($'#(#'#(\"'#&'#0H*%;\u028B/>#;\u01F9/5$;\u028B/,$;n/#$+$)($'#(#'#(\"'#&'#&/)$8\":\x88\"\"! )(\"'#&'#"),peg$decode("%;y/\x83#$%;\u028B/>#;\u024E/5$;\u028B/,$;y/#$+$)($'#(#'#(\"'#&'#0H*%;\u028B/>#;\u024E/5$;\u028B/,$;y/#$+$)($'#(#'#(\"'#&'#&/)$8\":\x88\"\"! )(\"'#&'#"),peg$decode("<%;|.\" &\"/1#;\u028B/($8\":\xA9\"!!)(\"'#&'#=.\" 7\xA8"),peg$decode("%;z/B#;\u028B/9$$;}0#*;}&/)$8#:\xAA#\"\" )(#'#(\"'#&'#"),peg$decode("%;\u01DC/:#;z/1$;\u028B/($8#:\x7F#!!)(#'#(\"'#&'#"),peg$decode("<%;\u01AB/\x8B#;\u028B/\x82$;\u01DA/y$;\x80.\" &\"/k$;\u028B/b$;\u01DB/Y$;\u028B/P$;\x7F.\" &\"/B$;\u028B/9$;\x82.\" &\"/+$8*:\xAC*$)&\" )(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\xAB"),peg$decode("<%3\xAE\"\"5&7\xAF/p#;\u028B/g$;\u01DA/^$;\u028B/U$;\u027C/L$;\u028B/C$;z/:$;\u028B/1$;\u01DB/($8):\xB0)!\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\xAD"),peg$decode("<%;\xE2/' 8!:\xB2!! ).V &%;\x81.\" &\"/G#;{/>$9:\xB3 \"! -\"\"&!&#/)$8#:\xB4#\"\"!)(#'#(\"'#&'#=.\" 7\xB1"),peg$decode("%;\u0218.# &;\u01F6/1#;\u028B/($8\":\xB5\"!!)(\"'#&'#"),peg$decode("<%;\u0251/@#;\u028B/7$;\x84.# &;\x83/($8#:\xB7#! )(#'#(\"'#&'#=.\" 7\xB6"),peg$decode("<%;\u01A9/' 8!:\xB9!! )=.\" 7\xB8"),peg$decode("<%;\u01DA/\x81#;\u028B/x$;\x85.\" &\"/j$;\u028B/a$;\x86.\" &\"/S$;\u028B/J$;\xCE.\" &\"/<$;\u028B/3$;\u01DB/*$8):\xBB)#&$\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\xBA"),peg$decode("%;\x83/P#%<%;\u028B/,#;\u0202/#$+\")(\"'#&'#=.##&&!&'#/($8\":\xBC\"!!)(\"'#&'#"),peg$decode("<%;\u0252/L#;\u028B/C$;\u0202/:$;\u028B/1$;{/($8%:\xBE%! )(%'#($'#(#'#(\"'#&'#=.\" 7\xBD"),peg$decode("<%;1/' 8!:\xC0!! )=.\" 7\xBF"),peg$decode("<%;\x89.\" &\"/;#;\x8B/2$;\u028B/)$8#:\xC2#\"\"!)(#'#(\"'#&'#=.\" 7\xC1"),peg$decode("<%;\u0221/@#;\u028B/7$;\x8A.\" &\"/)$8#:\xC4#\"\" )(#'#(\"'#&'#=.\" 7\xC3"),peg$decode("<%;\u0256/D#;\u028B/;$;\u0253/2$;\u028B/)$8$:\xC6$\"#!)($'#(#'#(\"'#&'#=.\" 7\xC5"),peg$decode(";\x9C._ &;\u012B.Y &;\u0192.S &;\x8D.M &;\x8C.G &;\x96.A &;\x90.; &;\x94.5 &;\x95./ &;\xA6.) &;\xAC.# &;\xAE"),peg$decode("<%;\u0209.# &;\u021C/@#;\u028B/7$;\x8E.\" &\"/)$8#:\xC8#\"\" )(#'#(\"'#&'#=.\" 7\xC7"),peg$decode("<%;\u0200/^#;\u028B/U$;\x8F.\" &\"/G$;\x8E.\" &\"/9$;\x92.\" &\"/+$8%:\xCA%$$\"! )(%'#($'#(#'#(\"'#&'#=.\" 7\xC9"),peg$decode("%;\u0271/1#;\u028B/($8\":\xCB\"!!)(\"'#&'#"),peg$decode("%;\u0214.) &;\u022E.# &;\u021F/1#;\u028B/($8\":\xCC\"!!)(\"'#&'#"),peg$decode("<%;\u0263/N#;\u028B/E$;\x8E.\" &\"/7$;\x91.\" &\"/)$8$:\xCE$\"# )($'#(#'#(\"'#&'#=.\" 7\xCD"),peg$decode("<%%;\u0270/,#;\u028B/#$+\")(\"'#&'#.\" &\"/?#;\x93.\" &\"/1$;\x92/($8#:v#! )(#'#(\"'#&'#=.\" 7\xCF"),peg$decode("%;\u01BB/1#;\u028B/($8\":\xD0\"!!)(\"'#&'#"),peg$decode("%;\u0266/1#;\u028B/($8\":\xD1\"!!)(\"'#&'#"),peg$decode("<%;\x93/2#;\x92/)$8\":\xD3\"\"! )(\"'#&'#=.\" 7\xD2"),peg$decode("<%;\u025D/J#;\u028B/A$;\x93.\" &\"/3$;\x92/*$8$:\xD5$##! )($'#(#'#(\"'#&'#=.\" 7\xD4"),peg$decode("<%;\x97/N#;\u01AC/E$;\u028B/<$;\x98/3$;\u028B/*$8%:\xD7%#$#!)(%'#($'#(#'#(\"'#&'#=.\" 7\xD6"),peg$decode("<%;\u01F7/D#;\u028B/;$;\u026C/2$;\u028B/)$8$:\xD9$\"#!)($'#(#'#(\"'#&'#=.\" 7\xD8"),peg$decode(";\x99.# &;\x9A"),peg$decode("<%;\u025E/M#;\u028B/D$;\u0270/;$;\u028B/2$;\u01AC/)$8%:\xDB%\"$ )(%'#($'#(#'#(\"'#&'#=.\" 7\xDA"),peg$decode("<%;\u01F4/I#;\u028B/@$;\x9B.\" &\"/2$;\u013C/)$8$:\xDD$\"# )($'#(#'#(\"'#&'#=.\" 7\xDC"),peg$decode("%;\u0208/1#;\u028B/($8\":\xD1\"!!)(\"'#&'#"),peg$decode("%;\x9D/2#;\xBF/)$8\":\xDE\"\"! )(\"'#&'#"),peg$decode("<%;\x9E.\" &\"/1#;\u028B/($8\":.\"!!)(\"'#&'#=.\" 7\xDF"),peg$decode("%;\u027E/J#;\u028B/A$;\x9F.\" &\"/3$;\xA0/*$8$:\xE0$##! )($'#(#'#(\"'#&'#"),peg$decode("%;\u0259/1#;\u028B/($8\":\xD1\"!!)(\"'#&'#"),peg$decode("%;\xA2/B#;\u028B/9$$;\xA10#*;\xA1&/)$8#:\xE1#\"\" )(#'#(\"'#&'#"),peg$decode("%;\u01DC/:#;\xA2/1$;\u028B/($8#:\x7F#!!)(#'#(\"'#&'#"),peg$decode("<%;\u01C1/2#;\xA3/)$8\":\xE3\"\"! )(\"'#&'#=.\" 7\xE2"),peg$decode("%;\u01FB/:#;\u028B/1$;\xA4/($8#:\xE4#! )(#'#(\"'#&'#"),peg$decode("%;\u01DA/C#;\xA5/:$;\u028B/1$;\u01DB/($8$: $!\")($'#(#'#(\"'#&'#"),peg$decode("%;\x9D/2#;\xC0/)$8\":\xE5\"\"! )(\"'#&'#"),peg$decode("<%;\u0268/e#;\u028B/\\$;\xA7.\" &\"/N$;\u028B/E$;\u01C0/<$;\u028B/3$;\xA8/*$8':\xE7'#$\" )(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\xE6"),peg$decode("%3\xE8\"\"5%7\xE9/& 8!:\xEA! ).4 &%3\xEB\"\"5'7\xEC/& 8!:\xED! )"),peg$decode("%;\u0226/?#;\u028B/6$3\xEE\"\"5'7\xEF/'$8#:\xF0# )(#'#(\"'#&'#.v &%;\u0270.# &;\u01E6/9#;\u028B/0$;\u0212/'$8#:\xF1# )(#'#(\"'#&'#.J &%;\u0270.# &;\u01E6/:#;\u028B/1$;\xA9/($8#:\xF2#! )(#'#(\"'#&'#"),peg$decode("%;\xAB/9#$;\xAA0#*;\xAA&/)$8\":\xF3\"\"! )(\"'#&'#"),peg$decode("%;\u028B/C#;\u01DC/:$;\u028B/1$;\xAB/($8$:\xF4$! )($'#(#'#(\"'#&'#"),peg$decode(";\xBA.# &;B"),peg$decode("%;\u026A/:#;\u028B/1$;\xAD/($8#:\xF5#! )(#'#(\"'#&'#"),peg$decode("%3\xF6\"\"5$7\xF7/?#;\u028B/6$3\xF8\"\"5$7\xF9/'$8#:\xFA# )(#'#(\"'#&'#.\xB6 &%3\xFB\"\"5+7\xFC/W#;\u028B/N$3\xFD\"\"5)7\xFE/?$;\u028B/6$3\xFF\"\"5%7\u0100/'$8%:\u0101% )(%'#($'#(#'#(\"'#&'#.l &%3\xEB\"\"5'7\xEC/?#;\u028B/6$3\u0102\"\"5-7\u0103/'$8#:\u0104# )(#'#(\"'#&'#.: &%3\u0105\"\"5#7\u0106/& 8!:\u0107! ).# &;\u01C0"),peg$decode(";\xAF.; &;\xB1.5 &;\xB2./ &;\xB4.) &;\xB6.# &;\xB8"),peg$decode("<%;\u01FD/\x8B#;\u028B/\x82$%;\u0211/,#;\u028B/#$+\")(\"'#&'#.\" &\"/a$;z/X$;\u028B/O$;\u01FB/F$;\u028B/=$;\xB0/4$;\u028B/+$8):\u0109)$(&%!)()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0108"),peg$decode(";\u01AA.) &;/.# &;B"),peg$decode("<%;\u0217/f#;\u028B/]$%;\u0211/,#;\u028B/#$+\")(\"'#&'#.\" &\"/<$;\xB0/3$;\u028B/*$8%:\u010B%#$\"!)(%'#($'#(#'#(\"'#&'#=.\" 7\u010A"),peg$decode("<%;\u0277/@#;\u028B/7$;\xB3.\" &\"/)$8#:\u010D#\"\" )(#'#(\"'#&'#=.\" 7\u010C"),peg$decode("%;\u01AA/1#;\u028B/($8\":\u010E\"!!)(\"'#&'#"),peg$decode("<%;\u01F8/@#;\u028B/7$;\xB5.\" &\"/)$8#:\u0110#\"\" )(#'#(\"'#&'#=.\" 7\u010F"),peg$decode("%;\u01AC.) &;\u01BC.# &;\u01AA/1#;\u028B/($8\":\u0111\"!!)(\"'#&'#"),peg$decode("<%;\u025C/I#;\u028B/@$;\xB7.\" &\"/2$;\u028B/)$8$:\u0110$\"#!)($'#(#'#(\"'#&'#=.\" 7\u0112"),peg$decode("%;\u01AC.) &;\u01BC.# &;\u01BA/1#;\u028B/($8\":\u0113\"!!)(\"'#&'#"),peg$decode("<%;\u0254/S#;\u028B/J$;\u01BF/A$;\u028B/8$;\xB9.\" &\"/*$8%:\u0115%#$\" )(%'#($'#(#'#(\"'#&'#=.\" 7\u0114"),peg$decode("%;\u01DA/C#;\xBA/:$;\u028B/1$;\u01DB/($8$:\xF4$!\")($'#(#'#(\"'#&'#.D &%;\u01E6/:#;\xBA/1$;\u028B/($8#:\xF4#!!)(#'#(\"'#&'#"),peg$decode(";\xBC.) &;\xBB.# &;\xBE"),peg$decode(";8.) &;1.# &;6"),peg$decode("%;\xBD/<#9:\u0116 ! -\"\"&!&#/($8\":\u0117\"!!)(\"'#&'#"),peg$decode("%$;\u01CD/&#0#*;\u01CD&&&#/' 8!:\u0118!! )"),peg$decode("%;\xBD/' 8!:\u0119!! )"),peg$decode(";\xC0./ &;\u0108.) &;\u0121.# &;\u0129"),peg$decode("<%;\xD3/k#;\u028B/b$;\xCE.\" &\"/T$;\u028B/K$;\xCF/B$;\u028B/9$;\xC1.\" &\"/+$8':\u011B'$&$\" )(''#(&'#(%'#($'#(#'#(\"'#&'#.z &%;\xD3/p#;\u028B/g$;\xCE.\" &\"/Y$;\u028B/P$;\xC1.\" &\"/B$;\u028B/9$;\xCF.\" &\"/+$8':\u011C'$&$\" )(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u011A"),peg$decode("<;\xC2.^ &%;\u0224/T#;\u028B/K$;\u0258/B$;\u028B/9$;\u024D/0$;\u028B/'$8&:\u011E& )(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u011D"),peg$decode("%;\xC4/B#;\u028B/9$$;\xC30#*;\xC3&/)$8#:\u011F#\"\" )(#'#(\"'#&'#"),peg$decode("%;\xC4/1#;\u028B/($8\":\u0120\"!!)(\"'#&'#"),peg$decode("%;\u0224/j#;\u028B/a$;\xC5/X$;\u028B/O$;\xC6.\" &\"/A$;\u028B/8$;\xC9.\" &\"/*$8':\u0121'#$\" )(''#(&'#(%'#($'#(#'#(\"'#&'#"),peg$decode(";\u0275.y &%;\u0244/G#;\u028B/>$;\u023B/5$;\u028B/,$;\u0275/#$+%)(%'#($'#(#'#(\"'#&'#.E &;\u0269.? &%;\u023B/5#;\u028B/,$;\u0269/#$+#)(#'#(\"'#&'#"),peg$decode("%;\u024A/:#;\u028B/1$;\xC7/($8#:\u0122#! )(#'#(\"'#&'#"),peg$decode("%;\u01AC/B#;\u028B/9$$;\xC80#*;\xC8&/)$8#:\u0123#\"\" )(#'#(\"'#&'#"),peg$decode("%;\u01DC/:#;\u028B/1$;\u01AC/($8#:\u0120#! )(#'#(\"'#&'#"),peg$decode("%;\u0247.? &%;\u026B/5#;\u028B/,$;\u0241/#$+#)(#'#(\"'#&'#/' 8!:\u0124!! )"),peg$decode("<%;\u027D/C#;\u028B/:$;\xCB/1$;\u028B/($8$:\u0126$!!)($'#(#'#(\"'#&'#=.\" 7\u0125"),peg$decode("%;\xCD/B#;\u028B/9$$;\xCC0#*;\xCC&/)$8#:\xE1#\"\" )(#'#(\"'#&'#"),peg$decode("%;\u01DC/:#;\xCD/1$;\u028B/($8#:1#!!)(#'#(\"'#&'#"),peg$decode("%;\x83/M#;\u028B/D$;\u01FB/;$;\u028B/2$;\x84/)$8%:\u0127%\"$ )(%'#($'#(#'#(\"'#&'#"),peg$decode("<%;\u024F/L#;\u028B/C$;\u0202/:$;\u028B/1$;\u0102/($8%:\u0129%! )(%'#($'#(#'#(\"'#&'#=.\" 7\u0128"),peg$decode("<%;\u0240/S#;\u028B/J$;z/A$;\u028B/8$;\xD0.\" &\"/*$8%:\u012B%#$\" )(%'#($'#(#'#(\"'#&'#.D &%;\u024B/:#;\u028B/1$;z/($8#:\u012C#! )(#'#(\"'#&'#=.\" 7\u012A"),peg$decode("<%;\xD1/2#;z/)$8\":\u012E\"\"! )(\"'#&'#=.\" 7\u012D"),peg$decode(";\xD2.# &;\u01DC"),peg$decode("%;\u024B/1#;\u028B/($8\":\xD1\"!!)(\"'#&'#"),peg$decode("%;\xD5/B#;\u028B/9$$;\xD40#*;\xD4&/)$8#:\u012F#\"\" )(#'#(\"'#&'#"),peg$decode("<%;\u011E/D#;\u028B/;$;\xD5/2$;\u028B/)$8$:\u0131$\"#!)($'#(#'#(\"'#&'#=.\" 7\u0130"),peg$decode(";\xD6.# &;\u0101"),peg$decode("%;\xD7/m#;\xDD.\" &\"/_$;\xDE.\" &\"/Q$;\xDF.\" &\"/C$;\u028B/:$;\xCA.\" &\"/,$8&:\u0132&%%$#\" )(&'#(%'#($'#(#'#(\"'#&'#"),peg$decode("<%;\u0267/R#;\u028B/I$;\xD8.\" &\"/;$;\u028B/2$;\xDB/)$8%:\u0134%\"\" )(%'#($'#(#'#(\"'#&'#=.\" 7\u0133"),peg$decode("<;\xD9.# &;\xDA=.\" 7\u0135"),peg$decode("%;\u0218/1#;\u028B/($8\":\u0136\"!!)(\"'#&'#"),peg$decode("%;\u01F6/1#;\u028B/($8\":\u0137\"!!)(\"'#&'#"),peg$decode("%;\xE1/B#;\u028B/9$$;\xDC0#*;\xDC&/)$8#:\xE1#\"\" )(#'#(\"'#&'#"),peg$decode("%;\u01DC/:#;\xE1/1$;\u028B/($8#:1#!!)(#'#(\"'#&'#"),peg$decode("<%;\u0226/D#;\u028B/;$;\xE5/2$;\u028B/)$8$:\u0139$\"#!)($'#(#'#(\"'#&'#=.\" 7\u0138"),peg$decode("<%;\u027C/D#;\u028B/;$;z/2$;\u028B/)$8$:\u013B$\"#!)($'#(#'#(\"'#&'#=.\" 7\u013A"),peg$decode("<%;\u0229/e#;\u028B/\\$;\u0202/S$;\u028B/J$;{/A$;\u028B/8$;\xE0.\" &\"/*$8':\u013D'#&\" )(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u013C"),peg$decode("<%;\u022A/D#;\u028B/;$;z/2$;\u028B/)$8$:\u013F$\"#!)($'#(#'#(\"'#&'#=.\" 7\u013E"),peg$decode(";\xE2.# &;\xE4"),peg$decode("%;\xE3.\" &\"/2#;\u0106/)$8\":\u0140\"\"! )(\"'#&'#"),peg$decode("%;\u01CF/2#;\u01DD/)$8\":\u0141\"\"! )(\"'#&'#"),peg$decode("%;z/@#;\u028B/7$;\xF7.\" &\"/)$8#:\u0142#\"\" )(#'#(\"'#&'#"),peg$decode("%;\xE9/B#;\u028B/9$$;\xE60#*;\xE6&/)$8#:\u0143#\"\" )(#'#(\"'#&'#"),peg$decode("%;\xE7.# &;\xE8/7#;\xFE.\" &\"/)$8\":\u0144\"\"! )(\"'#&'#"),peg$decode("<%;\u01DC/:#;\xE9/1$;\u028B/($8#:\u0146#!!)(#'#(\"'#&'#=.\" 7\u0145"),peg$decode("<%;\xF8/D#;\u028B/;$;\xE9/2$;\u028B/)$8$:\u0148$\"#!)($'#(#'#(\"'#&'#=.\" 7\u0147"),peg$decode("%;\xEF.\" &\"/S#;\u028B/J$;\xF5.5 &;B./ &;\xEA.) &;\xF0.# &;\xF6/)$8#:\u0149#\"\" )(#'#(\"'#&'#"),peg$decode("%;\u01AB/S#;\u028B/J$;\u011C/A$;\u028B/8$;\xEB.\" &\"/*$8%:\u014A%#$\" )(%'#($'#(#'#(\"'#&'#"),peg$decode("%;\u01FB.\" &\"/h#;\u028B/_$;\u01CF/V$;\u028B/M$;\u01DA/D$;\xEC/;$;\u028B/2$;\u01DB/)$8(:\u014B(\"%\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.n &%;\u01FB/^#;\u028B/U$;\u01DA/L$;\u028B/C$;\xEC/:$;\u028B/1$;\u01DB/($8':\u014C'!\")(''#(&'#(%'#($'#(#'#(\"'#&'#.# &;\xF7"),peg$decode("%;\xED/B#;\u028B/9$$;\xEE0#*;\xEE&/)$8#:\u014D#\"\" )(#'#(\"'#&'#"),peg$decode("%;\u013D/S#;\u028B/J$;&/A$;\u028B/8$;\u015D.\" &\"/*$8%:\u014E%#$\" )(%'#($'#(#'#(\"'#&'#"),peg$decode("%;\u01DC/C#;\u028B/:$;\xED/1$;\u028B/($8$:\xCB$!!)($'#(#'#(\"'#&'#"),peg$decode("%;\u023D/& 8!:\u014F! )"),peg$decode("<%;\xF1/@#;\u028B/7$;\xF2.\" &\"/)$8#:\u0151#\"\" )(#'#(\"'#&'#=.\" 7\u0150"),peg$decode("<%;\u01AC/@#;\u028B/7$;\xF7.\" &\"/)$8#:\u0153#\"\" )(#'#(\"'#&'#=.\" 7\u0152"),peg$decode("<;\xF3.# &;\xF4=.\" 7\u0154"),peg$decode("%;\u0231/V#;\u028B/M$;\u0202/D$;\u028B/;$;\u01BC/2$;\u028B/)$8&:\u0155&\"%!)(&'#(%'#($'#(#'#(\"'#&'#"),peg$decode("%;u/;#;\u0231/2$;\u028B/)$8#:\u0156#\"\"!)(#'#(\"'#&'#"),peg$decode("<%;\u01DA/R#;\xE5/I$;\u028B/@$;\u01DB/7$;\xF7.\" &\"/)$8%:\u0158%\"# )(%'#($'#(#'#(\"'#&'#=.\" 7\u0157"),peg$decode("<%;\xA4/7#;\xF7.\" &\"/)$8\":\u015A\"\"! )(\"'#&'#=.\" 7\u0159"),peg$decode("<%%;\u01FB/Q#%%<;\u01CD.# &;\u0282=.##&&!&'#/,#;\u028B/#$+\")(\"'#&'#/#$+\")(\"'#&'#.\" &\"/S#;\u01CF/J$;\u028B/A$;\u0115.\" &\"/3$;\u028B/*$8%:\u015C%#$#!)(%'#($'#(#'#(\"'#&'#=.\" 7\u015B"),peg$decode("<%;\xF9.\" &\"/J#;\u028B/A$;\xFA.\" &\"/3$;\u023A/*$8$:\u015E$##! )($'#(#'#(\"'#&'#=.\" 7\u015D"),peg$decode("%;\u0243/1#;\u028B/($8\":\xA5\"!!)(\"'#&'#"),peg$decode(";\xFB.# &;\xFD"),peg$decode("%;\u023E.) &;\u0262.# &;\u0227/@#;\u028B/7$;\xFC.\" &\"/)$8#:\u015F#\"\" )(#'#(\"'#&'#"),peg$decode("%;\u0250/1#;\u028B/($8\":\u0160\"!!)(\"'#&'#"),peg$decode("%;\u0233.# &;\u020D/1#;\u028B/($8\":\u0160\"!!)(\"'#&'#"),peg$decode("<%;\xFF.# &;\u0100/1#;\u028B/($8\":\u0162\"!!)(\"'#&'#=.\" 7\u0161"),peg$decode("<%;\u024C/;#;\u028B/2$;z/)$8#:\u0164#\"\" )(#'#(\"'#&'#=.\" 7\u0163"),peg$decode("<%;\u0276/;#;\u028B/2$;\u0115/)$8#:\u0166#\"\" )(#'#(\"'#&'#=.\" 7\u0165"),peg$decode("<%;\u0278/;#;\u028B/2$;\u011A/)$8#:\u0168#\"\" )(#'#(\"'#&'#=.\" 7\u0167"),peg$decode("%;\u0104/B#;\u028B/9$$;\u01030#*;\u0103&/)$8#:\u0169#\"\" )(#'#(\"'#&'#"),peg$decode("%;\u01DC/:#;\u0104/1$;\u028B/($8#:\u0120#!!)(#'#(\"'#&'#"),peg$decode("<%;z/X#;\u028B/O$;\u015F.\" &\"/A$;\u028B/8$;\u0105.\" &\"/*$8%:\u016B%#$\" )(%'#($'#(#'#(\"'#&'#=.\" 7\u016A"),peg$decode("%;\u0249/@#;\u028B/7$;\u0223.# &;\u023C/($8#:\u016C#! )(#'#(\"'#&'#"),peg$decode("<;\u01DE=.\" 7\u016D"),peg$decode("<;\u025F.5 &;\u0263./ &;\u01F2.) &;\u0222.# &;\u022C=.\" 7\u016E"),peg$decode("<%;\u010A/k#;\u028B/b$;\u010E/Y$;\u028B/P$;\u0112.\" &\"/B$;\u028B/9$;\u0109.\" &\"/+$8':\u0170'$&$\" )(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u016F"),peg$decode("<%;\u0261/:#;\u028B/1$;\xDB/($8#:\u0172#! )(#'#(\"'#&'#=.\" 7\u0171"),peg$decode(";\u010B.# &;\u010C"),peg$decode("<%;\u0234/@#;\u028B/7$;\u010D.\" &\"/)$8#:\u0174#\"\" )(#'#(\"'#&'#=.\" 7\u0173"),peg$decode("<%;\u025F/1#;\u028B/($8\":\u0176\"!!)(\"'#&'#=.\" 7\u0175"),peg$decode("<%;\u024E/;#;\u028B/2$;\u0107/)$8#:\u0178#\"\" )(#'#(\"'#&'#=.\" 7\u0177"),peg$decode("%;\u010F/2#;\u0111/)$8\":\u0179\"\"! )(\"'#&'#"),peg$decode("<%;\u0110/2#;\u01C1/)$8\":\u017B\"\"! )(\"'#&'#=.\" 7\u017A"),peg$decode("<%;\u0237/,#;\u028B/#$+\")(\"'#&'#=.\" 7\u017C"),peg$decode("<%;\u0118.) &;\xA5.# &;\u011D/1#;\u028B/($8\":\u017D\"!!)(\"'#&'#=.\" 7\u0167"),peg$decode("<%;\u0161/j#;\u028B/a$;\u0114.\" &\"/S$;\u028B/J$3\u017F\"\"5\"7\u0180/;$;\u028B/2$;\u0113/)$8':\u0181'\"$ )(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u017E"),peg$decode("<%;\u0122/S#;\u028B/J$;\u0124/A$;\u028B/8$;\xDE.\" &\"/*$8%:\u0183%#$\" )(%'#($'#(#'#(\"'#&'#.5 &%3\u0184\"\"5'7\u0185/' 8!:\u0186!! )=.\" 7\u0182"),peg$decode("<%;\u0158/@#;\u028B/7$;\xDE.\" &\"/)$8#:\u0188#\"\" )(#'#(\"'#&'#.V &%;\u024C/L#;\u028B/C$;\u020B/:$;\u028B/1$;\u01A9/($8%:\u0189%! )(%'#($'#(#'#(\"'#&'#=.\" 7\u0187"),peg$decode("<%;\u01DA/T#;\u0117/K$;\u028B/B$$;\u01160#*;\u0116&/2$;\u01DB/)$8%:\u018B%\"#!)(%'#($'#(#'#(\"'#&'#=.\" 7\u018A"),peg$decode("%;\u01DC/:#;\u0117/1$;\u028B/($8#:\u018C#!!)(#'#(\"'#&'#"),peg$decode("<%;\u01A9/' 8!:\u018E!! )=.\" 7\u018D"),peg$decode("<%;\u0119/2#;\u011A/)$8\":\u018F\"\"! )(\"'#&'#=.\" 7\u0167"),peg$decode("<%;\u0278/1#;\u028B/($8\":\xD1\"!!)(\"'#&'#=.\" 7\u0190"),peg$decode("%;\u011C/B#;\u028B/9$$;\u011B0#*;\u011B&/)$8#:\u014D#\"\" )(#'#(\"'#&'#"),peg$decode("%;\u01DC/:#;\u011C/1$;\u028B/($8#:\x7F#!!)(#'#(\"'#&'#"),peg$decode("<%;\u01DA/C#;{/:$;\u028B/1$;\u01DB/($8$:\u0192$!\")($'#(#'#(\"'#&'#=.\" 7\u0191"),peg$decode("<%;\u0212/;#;\u028B/2$;\u0278/)$8#:\u0194#\"\" )(#'#(\"'#&'#=.\" 7\u0193"),peg$decode("<%;\u011F.) &;\u0236.# &;\u021E/' 8!:\xD1!! )=.\" 7\u0195"),peg$decode("<%;\u0273/@#;\u028B/7$;\u0120.\" &\"/)$8#:\u0197#\"\" )(#'#(\"'#&'#=.\" 7\u0196"),peg$decode("%;\u01F6/1#;\u028B/($8\":\u0198\"!!)(\"'#&'#"),peg$decode("<%;\u0122/\xA2#;\u0123.\" &\"/\x94$;\xF0/\x8B$;\u028B/\x82$;\u0124/y$;\xDE.\" &\"/k$;\xCE.\" &\"/]$;\u028B/T$;\xCF.\" &\"/F$;\u028B/=$;\u0109.\" &\"//$8+:\u019A+(*)(&%$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0199"),peg$decode("<%;\u0275/1#;\u028B/($8\":\xD1\"!!)(\"'#&'#=.\" 7\u019B"),peg$decode("<%;\u024E/C#;\u028B/:$;\u0107/1$;\u028B/($8$:\u019D$!!)($'#(#'#(\"'#&'#=.\" 7\u019C"),peg$decode("<%;\u0268/C#;\u028B/:$;\u0125/1$;\u028B/($8$:\u019F$!!)($'#(#'#(\"'#&'#=.\" 7\u019E"),peg$decode("%;\u0127/9#$;\u01260#*;\u0126&/)$8\":\u014D\"\"! )(\"'#&'#"),peg$decode("%;\u028B/:#;\u01DC/1$;\u0127/($8#:\u018C#! )(#'#(\"'#&'#"),peg$decode("<%;\u01AE/M#;\u028B/D$;\u01E6/;$;\u0128/2$;\u028B/)$8%:\u01A1%\"$!)(%'#($'#(#'#(\"'#&'#=.\" 7\u01A0"),peg$decode("<;z.. &%;\u0212/& 8!:\u01A3! )=.\" 7\u01A2"),peg$decode("<%;\u012A/\x80#;\xF0/w$;\u028B/n$;\xDE.\" &\"/`$;\xCE.\" &\"/R$;\xCF.\" &\"/D$;\u028B/;$;\u0109.\" &\"/-$8(:\u01A5(&'&$#\" )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u01A4"),peg$decode("<%;\u0215/C#;\u028B/:$;\u0226/1$;\u028B/($8$:\xD1$!#)($'#(#'#(\"'#&'#=.\" 7\u01A6"),peg$decode("<;\u012D.5 &;\u012E./ &;\u012F.) &;\u0130.# &;\u0131=.\" 7\u01A7"),peg$decode("%;\u020C/1#;\u028B/($8\":\xD1\"!!)(\"'#&'#"),peg$decode("%%<%;\u012C/>#;\u0230./ &;\u0272.) &;\u0279.# &;\u027A/#$+\")(\"'#&'#=.##&&!&'#/1#;\u0132/($8\":\u018C\"! )(\"'#&'#"),peg$decode("%%<%;\u012C/>#;\u026C./ &;\u0272.) &;\u0279.# &;\u027A/#$+\")(\"'#&'#=.##&&!&'#/1#;\u0173/($8\":\u018C\"! )(\"'#&'#"),peg$decode("%%<%;\u012C/>#;\u026C./ &;\u0230.) &;\u0279.# &;\u027A/#$+\")(\"'#&'#=.##&&!&'#/1#;\u0177/($8\":\u018C\"! )(\"'#&'#"),peg$decode("%%<%;\u012C/>#;\u026C./ &;\u0230.) &;\u0272.# &;\u027A/#$+\")(\"'#&'#=.##&&!&'#/1#;\u0186/($8\":\u018C\"! )(\"'#&'#"),peg$decode("%%<%;\u012C/>#;\u026C./ &;\u0230.) &;\u0272.# &;\u0279/#$+\")(\"'#&'#=.##&&!&'#/1#;\u018A/($8\":\u018C\"! )(\"'#&'#"),peg$decode("<%;\u0133/T#;\u0135.\" &\"/F$;\u01AC/=$;\u028B/4$;\u0136/+$8%:\u01A9%$$#\" )(%'#($'#(#'#(\"'#&'#=.\" 7\u01A8"),peg$decode("%;\u012C/J#;\u0134.\" &\"/<$;\u026C/3$;\u028B/*$8$:\u01AA$##\"!)($'#(#'#(\"'#&'#"),peg$decode("%;\u026E.# &;\u026D/1#;\u028B/($8\":\u01AB\"!!)(\"'#&'#"),peg$decode("<%;\u022B/N#;\u028B/E$;u/<$;\u0220/3$;\u028B/*$8%:\u01AD%#$\"!)(%'#($'#(#'#(\"'#&'#=.\" 7\u01AC"),peg$decode(";\u0137.# &;\u0172"),peg$decode("<%;\u01DA/Z#;\u0139/Q$$;\u013B0#*;\u013B&/A$;\u01DB/8$;\u0138.\" &\"/*$8%:\u01AF%##\" )(%'#($'#(#'#(\"'#&'#=.\" 7\u01AE"),peg$decode("%;\u027F/D#;\u028B/;$;\u0265/2$;\u028B/)$8$:\u01B0$\"#!)($'#(#'#(\"'#&'#"),peg$decode("%;\u013C/B#;\u028B/9$$;\u013A0#*;\u013A&/)$8#:\u014D#\"\" )(#'#(\"'#&'#"),peg$decode("%;\u01DC/:#;\u013C/1$;\u028B/($8#:\xCB#!!)(#'#(\"'#&'#"),peg$decode("%;\u01DC.\" &\"/1#;\u0150/($8\":\u01B1\"! )(\"'#&'#"),peg$decode("<%;\u013D/O#;\u028B/F$;\u013E.\" &\"/8$;\u013F.\" &\"/*$8$:\u01B3$##! )($'#(#'#(\"'#&'#=.\" 7\u01B2"),peg$decode("%;\u01CF/=#%<;\u028B=/##&'!&&#/($8\":v\"!!)(\"'#&'#.\\ &%%<;\u013E.) &;\u0141.# &;\u0150=.##&&!&'#/:#;\u028B/1$;\u01D2/($8#:v#! )(#'#(\"'#&'#"),peg$decode("<%;&/1#;\u028B/($8\":\u01B5\"!!)(\"'#&'#=.\" 7\u01B4"),peg$decode("%;\u0141/B#$;\u01400#*;\u0140&/2$;\u028B/)$8#:\u014D#\"\"!)(#'#(\"'#&'#"),peg$decode("%;\u028B/1#;\u0141/($8\":\u018C\"! )(\"'#&'#"),peg$decode("<%;\u0142.\" &\"/A#;\u0144/8$;\u0142.\" &\"/*$8#:\u01B7##\"! )(#'#(\"'#&'#=.\" 7\u01B6"),peg$decode("%$;\u0143/&#0#*;\u0143&&&#/' 8!:\u01B8!! )"),peg$decode("<%;\u020B/C#;\u028B/:$;\u01CF/1$;\u028B/($8$:\u01BA$!!)($'#(#'#(\"'#&'#=.\" 7\u01B9"),peg$decode(";\u0146.; &;\u0149.5 &;\u014C./ &;\u014D.) &;\u014F.# &;\u0145"),peg$decode("<%;\u0165/' 8!:\u01BC!! )=.\" 7\u01BB"),peg$decode("<%;\u0147/U#;\u015F.\" &\"/G$;\u0160.\" &\"/9$;\u0148.\" &\"/+$8$:\u01BE$$#\"! )($'#(#'#(\"'#&'#=.\" 7\u01BD"),peg$decode("<%;\u0255.# &;\u0254/D#;\u028B/;$;\u023B/2$;\u028B/)$8$:\u01C0$\"#!)($'#(#'#(\"'#&'#=.\" 7\u01BF"),peg$decode("<%;\u01FE/1#;\u028B/($8\":\u01C2\"!!)(\"'#&'#=.\" 7\u01C1"),peg$decode("%;\u014A/@#;\u0160.\" &\"/2$;\u028B/)$8#:\u01C3#\"\"!)(#'#(\"'#&'#"),peg$decode("<%;\u014B.# &;\u0274/1#;\u028B/($8\":\u0160\"!!)(\"'#&'#=.\" 7\u01C4"),peg$decode("<%;u.\" &\"/2#;\u0248/)$8\":\u01C6\"\"! )(\"'#&'#=.\" 7\u01C5"),peg$decode("<;\u0162=.\" 7\u01C7"),peg$decode("<%;\u0212/D#;\u028B/;$;\u014E/2$;\u028B/)$8$:\u01C9$\"#!)($'#(#'#(\"'#&'#=.\" 7\u01C8"),peg$decode(";O./ &;8.) &;..# &;6"),peg$decode("<%;\u015D/' 8!:\u01CB!! )=.\" 7\u01CA"),peg$decode("<%;\u0142.\" &\"/J#;\u0151/A$;\u028B/8$;\u0142.\" &\"/*$8$:\u01CD$##\" )($'#(#'#(\"'#&'#=.\" 7\u01CC"),peg$decode(";\u0163.) &;\u0153.# &;\u0152"),peg$decode("<%;\u0162/' 8!:\u01CF!! )=.\" 7\u01CE"),peg$decode("<%;\u0154/J#;\u028B/A$;\u0159/8$;\u0160.\" &\"/*$8$:\u01D1$##! )($'#(#'#(\"'#&'#=.\" 7\u01D0"),peg$decode("%;\u0155.# &;\u0156/1#;\u028B/($8\":\u01D2\"!!)(\"'#&'#"),peg$decode("<%;\u0255/;#;\u028B/2$;\u023B/)$8#:\u01D3#\"\" )(#'#(\"'#&'#=.\" 7\u01BF"),peg$decode("<%;\u0274/' 8!:\u01D5!! )=.\" 7\u01D4"),peg$decode("%;\u01DA/T#;\u015B/K$;\u028B/B$$;\u015A0#*;\u015A&/2$;\u01DB/)$8%:\u01D6%\"#!)(%'#($'#(#'#(\"'#&'#"),peg$decode("%;\u0157/' 8!:\u01D7!! )"),peg$decode("%;\u0157/' 8!:\u01D8!! )"),peg$decode("%;\u01DC/:#;\u015B/1$;\u028B/($8#:\u018C#!!)(#'#(\"'#&'#"),peg$decode("<%;\u015C/O#;\u028B/F$;\u015F.\" &\"/8$;\u0148.\" &\"/*$8$:\u01DA$##! )($'#(#'#(\"'#&'#=.\" 7\u01D9"),peg$decode("%;\u0117/\\#%<%;\u028B/8#;\u01ED.) &;\u01DB.# &;\u015F/#$+\")(\"'#&'#=/##&'!&&#/($8\":v\"!!)(\"'#&'#.# &;z"),peg$decode("<%$;\u015E/&#0#*;\u015E&&&#/' 8!:\u01DC!! )=.\" 7\u01DB"),peg$decode("%;\u0207/C#;\u028B/:$;\u01BA/1$;\u028B/($8$:v$!!)($'#(#'#(\"'#&'#"),peg$decode("<%;\u01FC.# &;\u0216/1#;\u028B/($8\":\u01DE\"!!)(\"'#&'#=.\" 7\u01DD"),peg$decode("%;\u0161/;#;\u0107/2$;\u028B/)$8#:\u01DF#\"\"!)(#'#(\"'#&'#"),peg$decode("<%;\u024C/D#;\u028B/;$;\u020A/2$;\u028B/)$8$:\u01E1$\"#!)($'#(#'#(\"'#&'#=.\" 7\u01E0"),peg$decode("%;\u0206/;#;\u028B/2$;O/)$8#:\u01E2#\"\" )(#'#(\"'#&'#"),peg$decode("<%;\u0164/E#;\u0115/<$;\u0165/3$;\u028B/*$8$:\u01E4$##\"!)($'#(#'#(\"'#&'#=.\" 7\u01E3"),peg$decode("<%;\u0225/D#;\u028B/;$;\u023B/2$;\u028B/)$8$:\u01E6$\"#!)($'#(#'#(\"'#&'#=.\" 7\u01E5"),peg$decode("%;\u0166/F#;\u0167.\" &\"/8$;\u0170.\" &\"/*$8#:\u01E7##\"! )(#'#(\"'#&'#"),peg$decode("<%;\u025A/D#;\u028B/;$;\u01C1/2$;\u028B/)$8$:\u01E9$\"#!)($'#(#'#(\"'#&'#=.\" 7\u01E8"),peg$decode("%;\u0169/B#;\u028B/9$$;\u01680#*;\u0168&/)$8#:\u01EA#\"\" )(#'#(\"'#&'#"),peg$decode("%;\u0169/1#;\u028B/($8\":\u0198\"!!)(\"'#&'#"),peg$decode("<;\u016A.# &;\u016F=.\" 7\u01EB"),peg$decode("%;\u024C/T#;\u028B/K$;\u0215.# &;\u0275/<$;\u028B/3$;\u016B/*$8%:\u01EC%#$\" )(%'#($'#(#'#(\"'#&'#"),peg$decode("<;\u016C.) &;\u016D.# &;\u016E=.\" 7\u01ED"),peg$decode("%;\u0268/J#;\u028B/A$;\u0248.# &;\u0212/2$;\u028B/)$8$:\u01EE$\"#!)($'#(#'#(\"'#&'#"),peg$decode("%;\u0203.# &;\u0260/1#;\u028B/($8\":\u01EF\"!!)(\"'#&'#"),peg$decode("%;\u0244/D#;\u028B/;$;\u01F3/2$;\u028B/)$8$:\u01F0$\"#!)($'#(#'#(\"'#&'#"),peg$decode("%;\u0242/D#;\u028B/;$;\u01CF/2$;\u028B/)$8$:\u01F1$\"#!)($'#(#'#(\"'#&'#"),peg$decode("<%;u.\" &\"/J#;\u0213/A$;\u028B/8$;\u0171.\" &\"/*$8$:\u01F3$##\" )($'#(#'#(\"'#&'#=.\" 7\u01F2"),peg$decode("%;\u0232/J#;\u028B/A$;\u0214.# &;\u022E/2$;\u028B/)$8$:\u01F4$\"#!)($'#(#'#(\"'#&'#"),peg$decode("%;\u0189/' 8!:\u01F5!! )"),peg$decode("<%;\u0174/c#;\u0135.\" &\"/U$;\u01BC/L$;\u028B/C$;\u0176/:$;\xDE.\" &\"/,$8&:\u01F7&%%$#! )(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u01F6"),peg$decode("%;\u012C/J#;\u0175.\" &\"/<$;\u0230/3$;\u028B/*$8$:\u01F8$##\"!)($'#(#'#(\"'#&'#"),peg$decode("%;\u0274/1#;\u028B/($8\":\u01F9\"!!)(\"'#&'#"),peg$decode("<%;\u024C/N#;\u028B/E$;\u01AC/<$;\u028B/3$;\u0158/*$8%:\u01FB%#$\" )(%'#($'#(#'#(\"'#&'#=.\" 7\u01FA"),peg$decode("<%;\u0178/\xA6#;\u0135.\" &\"/\x98$;\u01BD.\" &\"/\x8A$;\u028B/\x81$;\u0179/x$;\u024C/o$;\u028B/f$;\u01AC/]$;\u028B/T$;\u0181.\" &\"/F$;\u0182.\" &\"/8$;\u0183//$8,:\u01FD,(+*)'$\"! )(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u01FC"),peg$decode("%;\u012C/J#;\u0134.\" &\"/<$;\u0272/3$;\u028B/*$8$:\u01FE$##\"!)($'#(#'#(\"'#&'#"),peg$decode("<%;\u017A.\" &\"/2#;\u017C/)$8\":\u0200\"\"! )(\"'#&'#=.\" 7\u01FF"),peg$decode("%;\u01FF.) &;\u01F5.# &;\u017B/1#;\u028B/($8\":\u0201\"!!)(\"'#&'#"),peg$decode("%;\u0235/;#;\u028B/2$;\u024A/)$8#:\u0202#\"\" )(#'#(\"'#&'#"),peg$decode("<;\u017D.# &;\u017E=.\" 7\u0203"),peg$decode("%;\u0215.# &;\u0234/1#;\u028B/($8\":\u0204\"!!)(\"'#&'#"),peg$decode("%;\u0275/@#;\u028B/7$;\u017F.\" &\"/)$8#:\u0205#\"\" )(#'#(\"'#&'#"),peg$decode("%;\u024A/;#;\u028B/2$;\u0180/)$8#:\u0206#\"\" )(#'#(\"'#&'#"),peg$decode("%;\u0117/B#;\u028B/9$$;\u01160#*;\u0116&/)$8#:\u014D#\"\" )(#'#(\"'#&'#"),peg$decode("%;\u0224/c#;\u028B/Z$;\u021A/Q$;\u028B/H$;\u0264.) &3\u0207\"\"5)7\u0208/3$;\u028B/*$8&:\u0209&#%#!)(&'#(%'#($'#(#'#(\"'#&'#"),peg$decode("<%;\u027B/D#;\u028B/;$;z/2$;\u028B/)$8$:\u020A$\"#!)($'#(#'#(\"'#&'#=.\" 7\x97"),peg$decode("<%;\u0200/W#;\u028B/N$;\u0184/E$;\u028B/<$;\u021C/3$;\u028B/*$8&:\u020C&#%#!)(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u020B"),peg$decode("%$;\u0185/&#0#*;\u0185&&&#/' 8!:\u020D!! )"),peg$decode("%;\x9C/:#;\u028B/1$;$/($8#:\"#!\")(#'#(\"'#&'#"),peg$decode("<%;\u0188/T#;\u0135.\" &\"/F$;\u0187/=$;\u028B/4$;\u0189/+$8%:\u020F%$$#\" )(%'#($'#(#'#(\"'#&'#=.\" 7\u020E"),peg$decode("%;\u01BE/;#;\u028B/2$;\u0115/)$8#:\u0210#\"\" )(#'#(\"'#&'#.# &;\u01BE"),peg$decode("%;\u012C/J#;\u0134.\" &\"/<$;\u0279/3$;\u028B/*$8$:\u0211$##\"!)($'#(#'#(\"'#&'#"),peg$decode("%;\u01FB/D#;\u028B/;$;\xC0/2$;\u028B/)$8$:\u018F$\"#!)($'#(#'#(\"'#&'#"),peg$decode("<%;\u018B/f#;\u0135.\" &\"/X$;\u01AC/O$;\u028B/F$;\u0276/=$;\u028B/4$;\u018C/+$8':\u0213'$&%$ )(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0212"),peg$decode("%;\u012C/N#;\u027A/E$;\u028B/<$;\u026C/3$;\u028B/*$8%:\u0214%#$#!)(%'#($'#(#'#(\"'#&'#"),peg$decode("%;\u01D1/@#;\u028B/7$;\u018D.\" &\"/)$8#:\u0215#\"\" )(#'#(\"'#&'#"),peg$decode("<%;\u01DA/Z#;\u028B/Q$;\u018E.\" &\"/C$;\u028B/:$;\u01DB/1$;\u028B/($8&:\u0217&!#)(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0216"),peg$decode("%;\u0190/9#$;\u018F0#*;\u018F&/)$8\":\u0218\"\"! )(\"'#&'#"),peg$decode("%;\u028B/H#;\u01DC/?$;\u028B/6$;\u0190.\" &\"/($8$:x$! )($'#(#'#(\"'#&'#"),peg$decode("%%<%;\u01CF/;#;\u028B/2$;&.# &;\u0141/#$+#)(#'#(\"'#&'#=.##&&!&'#/:#;z/1$;\u028B/($8#:\u0192#!!)(#'#(\"'#&'#.x &%;\u0191/n#%%<;\u01CD=.##&&!&'#/,#;\u028B/#$+\")(\"'#&'#/F$;\u013E.\" &\"/8$;\u013F.\" &\"/*$8$:\u01B3$##! )($'#(#'#(\"'#&'#"),peg$decode(";\u01CF.# &;\u01D2"),peg$decode("<%;\u0193/;#;\u01AC/2$;\u028B/)$8#:\u021A#\"\"!)(#'#(\"'#&'#=.\" 7\u0219"),peg$decode("<%;\u0219/J#;\u028B/A$;\u0194/8$;\u0195.\" &\"/*$8$:\u021C$##! )($'#(#'#(\"'#&'#=.\" 7\u021B"),peg$decode("<%;\u026C./ &;\u0230.) &;\u0272.# &;\u0279/1#;\u028B/($8\":\u0160\"!!)(\"'#&'#=.\" 7\u021D"),peg$decode("<%;\u022B/D#;\u028B/;$;\u0220/2$;\u028B/)$8$:\u021F$\"#!)($'#(#'#(\"'#&'#=.\" 7\u021E"),peg$decode("<%;\u01E8/,#;\u01E8/#$+\")(\"'#&'#=.\" 7\u0220"),peg$decode("<;\u01E4=.\" 7\u0221"),peg$decode("<;\u01E5=.\" 7\u0222"),peg$decode("<;\u01DE=.\" 7\u0223"),peg$decode("<;\u01EF=.\" 7\u0224"),peg$decode("<;\u01E9=.\" 7\u0225"),peg$decode("<%;\u01EA/,#;\u01EA/#$+\")(\"'#&'#=.\" 7\u0226"),peg$decode("<%;\u01EB/,#;\u01EB/#$+\")(\"'#&'#=.\" 7\u0227"),peg$decode("<;\u01E7=.\" 7\u0228"),peg$decode("<;\u01E8=.\" 7\u0229"),peg$decode("<;\u01EA=.\" 7\u022A"),peg$decode("<;\u01EB=.\" 7\u022B"),peg$decode("<%;\u01EA/,#;\u01E6/#$+\")(\"'#&'#=.\" 7\u022C"),peg$decode("<%;\u01EB/,#;\u01E6/#$+\")(\"'#&'#=.\" 7\u022D"),peg$decode("<%;\u01E6/1#;\u01E6.\" &\"/#$+\")(\"'#&'#=.\" 7\u022E"),peg$decode("<%;\u01EC/,#;\u01E6/#$+\")(\"'#&'#=.\" 7\u022F"),peg$decode("<%;\u01EA/,#;\u01EB/#$+\")(\"'#&'#=.\" 7\u022F"),peg$decode("<%$;\u01F1/&#0#*;\u01F1&&&#/<#9:\u0231 ! -\"\"&!&#/($8\":\u0232\"!!)(\"'#&'#=.\" 7\u0230"),peg$decode("<%;\u0238/@#;\u028B/7$;u.\" &\"/)$8#:\u0234#\"\" )(#'#(\"'#&'#=.\" 7\u0233"),peg$decode("<;\u01CF.# &;\u01D2=.\" 7\u0235"),peg$decode("<%;\u01A9/' 8!:\u0237!! )=.\" 7\u0236"),peg$decode("<%;\u01AD.\" &\"/2#;\u01A9/)$8\":\u0239\"\"! )(\"'#&'#=.\" 7\u0238"),peg$decode("<%;\u01AD.\" &\"/2#;\u01A9/)$8\":\u023B\"\"! )(\"'#&'#=.\" 7\u023A"),peg$decode("%;\u01A9/2#;\u01DD/)$8\":\u023C\"\"! )(\"'#&'#"),peg$decode("<%;\u01B8.) &;\u01B9.# &;\u01B7/J#;\u01A9/A$;\u028B/8$;\u01AF.\" &\"/*$8$:\u023E$##\" )($'#(#'#(\"'#&'#=.\" 7\u023D"),peg$decode("<%;\u01B0/' 8!:\u0240!! )=.\" 7\u023F"),peg$decode("%;\u01B1/B#;\u028B/9$$;\u01B10#*;\u01B1&/)$8#:\u0241#\"\" )(#'#(\"'#&'#"),peg$decode(";\u01B2.) &;\u01B3.# &;\u01B4"),peg$decode("%;\u01DD/:#;\u028B/1$;\u01CF/($8#:\u0242#! )(#'#(\"'#&'#.D &%;\u01DD/:#;\u028B/1$;\u01DE/($8#:\u0243#! )(#'#(\"'#&'#"),peg$decode("%;\u01D8/r#;\u028B/i$;\u01B5.\" &\"/[$;\u01EE/R$;\u028B/I$;\u01B6.\" &\"/;$;\u028B/2$;\u01D9/)$8(:\u0244(\"%\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#.m &%;\u01D8/c#;\u028B/Z$;\u01EE/Q$;\u028B/H$;\u01B6.\" &\"/:$;\u028B/1$;\u01D9/($8':\u0245'!\")(''#(&'#(%'#($'#(#'#(\"'#&'#"),peg$decode("%;\u01D8/L#;\u028B/C$;z/:$;\u028B/1$;\u01D9/($8%:\u0246%!\")(%'#($'#(#'#(\"'#&'#"),peg$decode("%;z/' 8!:\u0247!! )"),peg$decode("%;z/' 8!:\u0248!! )"),peg$decode("%;\u028B/& 8!:\u0249! )"),peg$decode("%;\u01AD/2#;\u01B9/)$8\":\u024A\"\"! )(\"'#&'#"),peg$decode("%;\u01A9/2#;\u01DD/)$8\":J\"\"! )(\"'#&'#"),peg$decode("<%;\u01A9/' 8!:\u024C!! )=.\" 7\u024B"),peg$decode("<%;\u01A9/' 8!:\u024E!! )=.\" 7\u024D"),peg$decode("<%;\u01AD.\" &\"/2#;\u01A9/)$8\":\u0250\"\"! )(\"'#&'#=.\" 7\u024F"),peg$decode("<%;\u01AD.\" &\"/2#;\u01A9/)$8\":\u0252\"\"! )(\"'#&'#=.\" 7\u0251"),peg$decode("<%;\u01AD.\" &\"/2#;\u01A9/)$8\":\u0254\"\"! )(\"'#&'#=.\" 7\u0253"),peg$decode("<%;\u01AD.\" &\"/2#;\u01A9/)$8\":\u0256\"\"! )(\"'#&'#=.\" 7\u0255"),peg$decode("<%;\u01AD.\" &\"/2#;\u01A9/)$8\":\u0258\"\"! )(\"'#&'#=.\" 7\u0257"),peg$decode("<%;\u01C2.# &;\u01AC/1#;\u028B/($8\":\u025A\"!!)(\"'#&'#=.\" 7\u0259"),peg$decode("%;\u01AC/;#;\u028B/2$;\u0115/)$8#:\u025B#\"\" )(#'#(\"'#&'#"),peg$decode("<%;\u01A9/' 8!:\u025D!! )=.\" 7\u025C"),peg$decode("<%;\u01A9/' 8!:\u025F!! )=.\" 7\u025E"),peg$decode("<%;\u01C6/=#%<;\u01CD=.##&&!&'#/($8\":\u0261\"!!)(\"'#&'#.\xC5 &%;\u01C7/=#%<;\u01CD=.##&&!&'#/($8\":\u0262\"!!)(\"'#&'#.\x9B &%;\u01C9/=#%<;\u01CD=.##&&!&'#/($8\":\u0263\"!!)(\"'#&'#.q &%;\u01CA/=#%<;\u01CD=.##&&!&'#/($8\":\u0264\"!!)(\"'#&'#.G &%;\u01CC/=#%<;\u01CD=.##&&!&'#/($8\":\u0265\"!!)(\"'#&'#=.\" 7\u0260"),peg$decode("<%%3\u0267\"\"5!7\u0268.\" &\"/F#3\u0269\"\"5#7\u026A.\" &\"/2$3\u026B\"\"5$7\u026C/#$+#)(#'#(\"'#&'#.k &%3\u026D\"\"5$7\u026E.5 &3\u026F\"\"5&7\u0270.) &3\u0271\"\"5$7\u0272.\" &\"/2#3\u0273\"\"5$7\u0274/#$+\")(\"'#&'#.) &3\u0275\"\"5$7\u0276/' 8!:\u0160!! )=.\" 7\u0266"),peg$decode("<%;\u01C8.5 &3\u0278\"\"5%7\u0279.) &3\u027A\"\"5$7\u027B/' 8!:\u0160!! )=.\" 7\u0277"),peg$decode("<%3\u027D\"\"5&7\u027E/i#%$4,\"\"5!7-/,#0)*4,\"\"5!7-&&&#/2#3\u027F\"\"5)7\u0280/#$+\")(\"'#&'#.\" &\"/)$8\":\u0281\"\"! )(\"'#&'#=.\" 7\u027C"),peg$decode("<%3\u0283\"\"5'7\u0284.\x95 &3\u0285\"\"5'7\u0286.\x89 &3\u0287\"\"5'7\u0288.} &%3\u0289\"\"5$7\u028A/7#3\xF6\"\"5$7\xF7.\" &\"/#$+\")(\"'#&'#.S &%3\xF6\"\"5$7\xF7/7#3\u028B\"\"5%7\u028C.\" &\"/#$+\")(\"'#&'#.) &3\u028D\"\"5&7\u028E/' 8!:\u0160!! )=.\" 7\u0282"),peg$decode("<%%3\u0290\"\"5#7\u0291/V#2\u0292\"\"6\u02927\u0293.A &2\u0294\"\"6\u02947\u0295.5 &2\u0296\"\"6\u02967\u0297.) &3\u0298\"\"5$7\u0299/#$+\")(\"'#&'#.q &%3\u029A\"\"5#7\u029B.A &3\u026F\"\"5&7\u0270.5 &3\u029C\"\"5%7\u029D.) &3\u026D\"\"5$7\u026E.\" &\"/2#3\u0290\"\"5#7\u0291/#$+\")(\"'#&'#.# &;\u01CB/' 8!:\u0160!! )=.\" 7\u028F"),peg$decode("%3\u029E\"\"5(7\u029F/d#%$4,\"\"5!7-/,#0)*4,\"\"5!7-&&&#/2#3\u02A0\"\"5%7\u02A1/#$+\")(\"'#&'#/)$8\":\u02A2\"\"! )(\"'#&'#"),peg$decode("<%3\u02A4\"\"5$7\u02A5/' 8!:\u0160!! )=.\" 7\u02A3"),peg$decode("4\u02A6\"\"5!7\u02A7"),peg$decode("%2\u02A8\"\"6\u02A87\u02A9/K#$4\u02AA\"\"5!7\u02AB/,#0)*4\u02AA\"\"5!7\u02AB&&&#/)$8\":\u02AC\"\"! )(\"'#&'#"),peg$decode(";\u01D0.# &;\u01D1"),peg$decode(";\u01D3./ &;\u01D7.) &;\u01D5.# &;\u01D6"),peg$decode("%%<;\u0280.# &;A=.##&&!&'#/J#$;\u01CE.# &;\u01CD/,#0)*;\u01CE.# &;\u01CD&&&#/($8\":\u0118\"! )(\"'#&'#"),peg$decode("%%<;\u0282.# &;A=.##&&!&'#/J#$;\u01CE.# &;\u01CD/,#0)*;\u01CE.# &;\u01CD&&&#/($8\":\u02AD\"! )(\"'#&'#"),peg$decode("%;\u01D8/\x99#;\u028B/\x90$%$%%<;\u01D4=.##&&!&'#/1#1\"\"5!7\u02AE/#$+\")(\"'#&'#0G*%%<;\u01D4=.##&&!&'#/1#1\"\"5!7\u02AE/#$+\")(\"'#&'#&/\"!&,)/1$;\u01D4/($8$:\u02AF$!!)($'#(#'#(\"'#&'#"),peg$decode("%$4\u02B0\"\"5!7\u02B10)*4\u02B0\"\"5!7\u02B1&/5#;\u01D9/,$;\u028B/#$+#)(#'#(\"'#&'#"),peg$decode("%2\u02B2\"\"6\u02B27\u02B3/k#$2\u02B4\"\"6\u02B47\u02B5.) &4\u02B6\"\"5!7\u02B705*2\u02B4\"\"6\u02B47\u02B5.) &4\u02B6\"\"5!7\u02B7&/7$2\u02B2\"\"6\u02B27\u02B3/($8#:\u02B8#!!)(#'#(\"'#&'#"),peg$decode("%2\u02B9\"\"6\u02B97\u02BA/k#$2:\"\"6:7;.) &4<\"\"5!7=05*2:\"\"6:7;.) &4<\"\"5!7=&/7$2\u02B9\"\"6\u02B97\u02BA/($8#:\u02BB#!!)(#'#(\"'#&'#"),peg$decode("%2\u02BC\"\"6\u02BC7\u02BD/k#$2\u02BE\"\"6\u02BE7\u02BF.) &4\u02C0\"\"5!7\u02C105*2\u02BE\"\"6\u02BE7\u02BF.) &4\u02C0\"\"5!7\u02C1&/7$2\u02BC\"\"6\u02BC7\u02BD/($8#:\u02C2#!!)(#'#(\"'#&'#"),peg$decode("<%2\u02C4\"\"6\u02C47\u02C5/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u02C3"),peg$decode("<%2\u02C7\"\"6\u02C77\u02C8/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u02C6"),peg$decode("<%2\u02CA\"\"6\u02CA7\u02CB/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u02C9"),peg$decode("<%2\u02CD\"\"6\u02CD7\u02CE/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u02CC"),peg$decode("<%2\u02D0\"\"6\u02D07\u02D1/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u02CF"),peg$decode("<%2\u02D3\"\"6\u02D37\u02D4/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u02D2"),peg$decode("<%2\u02D6\"\"6\u02D67\u02D7/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u02D5"),peg$decode("<%2\u02D9\"\"6\u02D97\u02DA/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u02D8"),peg$decode("<%2\u02B9\"\"6\u02B97\u02BA/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u02DB"),peg$decode("<%2\u02B2\"\"6\u02B27\u02B3/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u02DC"),peg$decode("<%2\u02BC\"\"6\u02BC7\u02BD/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u02DD"),peg$decode("<%2\u02DF\"\"6\u02DF7\u02E0/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u02DE"),peg$decode("<%2\u02E2\"\"6\u02E27\u02E3/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u02E1"),peg$decode("<%2\u02E5\"\"6\u02E57\u02E6/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u02E4"),peg$decode("<%2\u02E7\"\"6\u02E77\u02E8/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u022E"),peg$decode("<%2\u02EA\"\"6\u02EA7\u02EB/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u02E9"),peg$decode("<%2\u02ED\"\"6\u02ED7\u02EE/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u02EC"),peg$decode("<%2\u02EF\"\"6\u02EF7\u02F0/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u0225"),peg$decode("<%2\u02F1\"\"6\u02F17\u02F2/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u022A"),peg$decode("<%2\u02F3\"\"6\u02F37\u02F4/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u022B"),peg$decode("<%2\u02F6\"\"6\u02F67\u02F7/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u02F5"),peg$decode("<%2\u02F9\"\"6\u02F97\u02FA/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u02F8"),peg$decode("<%2g\"\"6g7h/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u02FB"),peg$decode("<%2\u02FD\"\"6\u02FD7\u02FE/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u02FC"),peg$decode("<%2\u0300\"\"6\u03007\u0301/1#;\u028B/($8\":\"\"!!)(\"'#&'#=.\" 7\u02FF"),peg$decode("<4\u0303\"\"5!7\u0304=.\" 7\u0302"),peg$decode("%3\u0305\"\"5%7\u0306/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0307\"\"5&7\u0308/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0309\"\"5#7\u030A/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u030B\"\"5%7\u030C/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0105\"\"5#7\u0106/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u030D\"\"5%7\u030E/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u030F\"\"5'7\u0310/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0311\"\"5#7\u0312/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0313\"\"5%7\u0314/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0315\"\"5\"7\u0316/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0317\"\"5#7\u0318/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0319\"\"5&7\u031A/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u031B\"\"5-7\u031C/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u031D\"\"5&7\u031E/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u031F\"\"5%7\u0320/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0321\"\"5'7\u0322/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0323\"\"5\"7\u0324/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0325\"\"5'7\u0326/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0327\"\"5$7\u0328/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0329\"\"5$7\u032A/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u032B\"\"5%7\u032C/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u032D\"\"5'7\u032E/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u032F\"\"5&7\u0330/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0331\"\"5&7\u0332/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0333\"\"5(7\u0334/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0335\"\"5*7\u0336/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0337\"\"5&7\u0338/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0339\"\"5%7\u033A/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u033B\"\"5,7\u033C/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u033D\"\"5,7\u033E/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u033F\"\"517\u0340/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0341\"\"5(7\u0342/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0343\"\"5'7\u0344/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0345\"\"5*7\u0346/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0347\"\"5(7\u0348/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0349\"\"5&7\u034A/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u034B\"\"5$7\u034C/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u034D\"\"5&7\u034E/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u034F\"\"5(7\u0350/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0351\"\"5$7\u0352/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0353\"\"5$7\u0354/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0355\"\"5$7\u0356/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0357\"\"5#7\u0358/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0359\"\"5&7\u035A/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u035B\"\"5&7\u035C/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u035D\"\"5)7\u035E/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u035F\"\"5&7\u0360/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0361\"\"5'7\u0362/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0363\"\"5$7\u0364/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0365\"\"5%7\u0366/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0367\"\"5#7\u0368/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0369\"\"5'7\u036A/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u036B\"\"5$7\u036C/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u036D\"\"5$7\u036E/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u036F\"\"5$7\u0370/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0371\"\"5%7\u0372/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0373\"\"5&7\u0374/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0375\"\"5\"7\u0376/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0377\"\"5&7\u0378/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0379\"\"5%7\u037A/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u037B\"\"5)7\u037C/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u037D\"\"5\"7\u037E/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u037F\"\"5%7\u0380/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0381\"\"5'7\u0382/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0383\"\"5)7\u0384/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0385\"\"5%7\u0386/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0387\"\"5&7\u0388/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0389\"\"5'7\u038A/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u038B\"\"5)7\u038C/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u038D\"\"5$7\u038E/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u038F\"\"5\"7\u0390/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0391\"\"5&7\u0392/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0393\"\"5$7\u0394/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0395\"\"5#7\u0396/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0397\"\"5$7\u0398/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0399\"\"5'7\u039A/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u039B\"\"5$7\u039C/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u039D\"\"5$7\u039E/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u039F\"\"5%7\u03A0/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03A1\"\"5&7\u03A2/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03A3\"\"5%7\u03A4/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03A5\"\"5'7\u03A6/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03A7\"\"5\"7\u03A8/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03A9\"\"5#7\u03AA/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03AB\"\"5'7\u03AC/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03AD\"\"5&7\u03AE/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\x8C\"\"5$7\x8D/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03AF\"\"5%7\u03B0/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03B1\"\"5\"7\u03B2/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03B3\"\"5&7\u03B4/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03B5\"\"5\"7\u03B6/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03B7\"\"5$7\u03B8/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03B9\"\"5\"7\u03BA/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03BB\"\"5%7\u03BC/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03BD\"\"5%7\u03BE/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03BF\"\"5$7\u03C0/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03C1\"\"5)7\u03C2/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03C3\"\"5$7\u03C4/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03C5\"\"5&7\u03C6/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03C7\"\"5'7\u03C8/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03C9\"\"5%7\u03CA/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03CB\"\"5%7\u03CC/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03CD\"\"5$7\u03CE/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03CF\"\"5)7\u03D0/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03D1\"\"5*7\u03D2/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03D3\"\"5&7\u03D4/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03D5\"\"5'7\u03D6/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03D7\"\"5'7\u03D8/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03D9\"\"5&7\u03DA/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03DB\"\"5'7\u03DC/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03DD\"\"5(7\u03DE/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03DF\"\"5)7\u03E0/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03E1\"\"5%7\u03E2/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03E3\"\"5(7\u03E4/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03E5\"\"5#7\u03E6/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03E7\"\"5%7\u03E8/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03E9\"\"5)7\u03EA/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03EB\"\"5&7\u03EC/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03ED\"\"5#7\u03EE/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03EF\"\"5%7\u03F0/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03F1\"\"5$7\u03F2/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03F3\"\"5$7\u03F4/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03F5\"\"5%7\u03F6/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03F7\"\"5$7\u03F8/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03F9\"\"5)7\u03FA/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03FB\"\"5$7\u03FC/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03FD\"\"5\"7\u03FE/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\xFB\"\"5+7\xFC/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u03FF\"\"5'7\u0400/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0401\"\"5%7\u0402/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0403\"\"5&7\u0404/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0405\"\"5&7\u0406/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0407\"\"5%7\u0408/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0409\"\"5&7\u040A/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u040B\"\"5&7\u040C/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u040D\"\"5$7\u040E/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u040F\"\"5'7\u0410/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0411\"\"5$7\u0412/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0413\"\"5%7\u0414/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0415\"\"5&7\u0416/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0417\"\"5$7\u0418/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%3\u0419\"\"5'7\u041A/8#%<;\u01CD=.##&&!&'#/#$+\")(\"'#&'#"),peg$decode("%;\u0281/' 8!:\u041B!! )"),peg$decode(";\u01F2.\u0353 &;\u01F3.\u034D &;\u01F4.\u0347 &;\u01F5.\u0341 &;\u01F6.\u033B &;\u01F7.\u0335 &;\u01F8.\u032F &;\u01F9.\u0329 &;\u01FA.\u0323 &;\u01FB.\u031D &;\u01FC.\u0317 &;\u01FD.\u0311 &;\u01FE.\u030B &;\u01FF.\u0305 &;\u0200.\u02FF &;\u0201.\u02F9 &;\u0202.\u02F3 &;\u0203.\u02ED &;\u0204.\u02E7 &;\u0205.\u02E1 &;\u0206.\u02DB &;\u0207.\u02D5 &;\u0208.\u02CF &;\u0209.\u02C9 &;\u020A.\u02C3 &;\u020B.\u02BD &;\u020C.\u02B7 &;\u020D.\u02B1 &;\u020E.\u02AB &;\u020F.\u02A5 &;\u0210.\u029F &;\u0211.\u0299 &;\u0212.\u0293 &;\u0213.\u028D &;\u0214.\u0287 &;\u0215.\u0281 &;\u0216.\u027B &;\u0217.\u0275 &;\u0218.\u026F &;\u0219.\u0269 &;\u021A.\u0263 &;\u021B.\u025D &;\u021C.\u0257 &;\u021D.\u0251 &;\u021E.\u024B &;\u021F.\u0245 &;\u0220.\u023F &;\u0221.\u0239 &;\u0222.\u0233 &;\u0223.\u022D &;\u0224.\u0227 &;\u0225.\u0221 &;\u0226.\u021B &;\u0227.\u0215 &;\u0228.\u020F &;\u0229.\u0209 &;\u022A.\u0203 &;\u022B.\u01FD &;\u022C.\u01F7 &;\u022D.\u01F1 &;\u022E.\u01EB &;\u022F.\u01E5 &;\u0230.\u01DF &;\u0231.\u01D9 &;\u0232.\u01D3 &;\u0233.\u01CD &;\u0234.\u01C7 &;\u0235.\u01C1 &;\u0236.\u01BB &;\u0237.\u01B5 &;\u0238.\u01AF &;\u0239.\u01A9 &;\u023A.\u01A3 &;\u023B.\u019D &;\u023C.\u0197 &;\u023E.\u0191 &;\u023F.\u018B &;\u0240.\u0185 &;\u0241.\u017F &;\u0242.\u0179 &;\u0243.\u0173 &;\u0244.\u016D &;\u0245.\u0167 &;\u0246.\u0161 &;\u0247.\u015B &;\u0248.\u0155 &;\u0249.\u014F &;\u024A.\u0149 &;\u024B.\u0143 &;\u024C.\u013D &;\u024D.\u0137 &;\u024E.\u0131 &;\u024F.\u012B &;\u0250.\u0125 &;\u0251.\u011F &;\u0252.\u0119 &;\u0253.\u0113 &;\u0254.\u010D &;\u0255.\u0107 &;\u0256.\u0101 &;\u0257.\xFB &;\u0258.\xF5 &;\u0259.\xEF &;\u025A.\xE9 &;\u025B.\xE3 &;\u025C.\xDD &;\u025D.\xD7 &;\u025E.\xD1 &;\u025F.\xCB &;\u0260.\xC5 &;\u0261.\xBF &;\u0262.\xB9 &;\u0263.\xB3 &;\u0266.\xAD &;\u0267.\xA7 &;\u0268.\xA1 &;\u0269.\x9B &;\u026A.\x95 &;\u026B.\x8F &;\u026C.\x89 &;\u026E.\x83 &;\u026F.} &;\u0270.w &;\u0271.q &;\u0272.k &;\u0273.e &;\u0274._ &;\u0275.Y &;\u0276.S &;\u0277.M &;\u0278.G &;\u0279.A &;\u027A.; &;\u027B.5 &;\u027C./ &;\u027D.) &;\u027E.# &;\u027F"),peg$decode(";\u01F4.\u0167 &;\u01F6.\u0161 &;\u01F7.\u015B &;\u01F9.\u0155 &;\u01FB.\u014F &;\u01FE.\u0149 &;\u0201.\u0143 &;\u0204.\u013D &;\u0206.\u0137 &;\u0207.\u0131 &;\u0209.\u012B &;\u020B.\u0125 &;\u020C.\u011F &;\u0212.\u0119 &;\u0213.\u0113 &;\u0215.\u010D &;\u0218.\u0107 &;\u0219.\u0101 &;\u021B.\xFB &;\u021D.\xF5 &;\u021E.\xEF &;\u0220.\xE9 &;\u0225.\xE3 &;\u0226.\xDD &;\u0229.\xD7 &;\u022A.\xD1 &;\u022F.\xCB &;\u0230.\xC5 &;\u0234.\xBF &;\u0236.\xB9 &;\u0237.\xB3 &;\u0238.\xAD &;\u0239.\xA7 &;\u023A.\xA1 &;\u0240.\x9B &;\u0245.\x95 &;\u0246.\x8F &;\u0248.\x89 &;\u024C.\x83 &;\u024E.} &;\u024F.w &;\u0255.q &;\u025A.k &;\u0267.e &;\u0268._ &;\u026C.Y &;\u026F.S &;\u0270.M &;\u0271.G &;\u0273.A &;\u0274.; &;\u0275.5 &;\u0276./ &;\u0278.) &;\u027B.# &;\u027C"),peg$decode(";\u0284.. &%;\u0285/& 8!:\u041C! )"),peg$decode("<%2\u041E\"\"6\u041E7\u041F/\x87#$%%<4\u0420\"\"5!7\u0421=.##&&!&'#/1#1\"\"5!7\u02AE/#$+\")(\"'#&'#0M*%%<4\u0420\"\"5!7\u0421=.##&&!&'#/1#1\"\"5!7\u02AE/#$+\")(\"'#&'#&/#$+\")(\"'#&'#=.\" 7\u041D"),peg$decode("<%;\u0286/5#;\u028A/,$;\u0287/#$+#)(#'#(\"'#&'#=.\" 7\u0422"),peg$decode("2\u0423\"\"6\u04237\u0424"),peg$decode("2\u0425\"\"6\u04257\u0426"),peg$decode("$%%<;\u0287.# &;\u0286=.##&&!&'#/1#1\"\"5!7\u02AE/#$+\")(\"'#&'#/P#0M*%%<;\u0287.# &;\u0286=.##&&!&'#/1#1\"\"5!7\u02AE/#$+\")(\"'#&'#&&&#"),peg$decode(";\u0288.# &;\u0285"),peg$decode("%;\u0289/K#$4\u0427\"\"5!7\u0428.# &;\u02890/*4\u0427\"\"5!7\u0428.# &;\u0289&/#$+\")(\"'#&'#"),peg$decode("<%$4\u0427\"\"5!7\u0428.# &;\u02830/*4\u0427\"\"5!7\u0428.# &;\u0283&/' 8!:1!! )=.\" 7\u0429"),peg$decode("2\u042A\"\"6\u042A7\u042B")];var peg$currPos=0;var peg$savedPos=0;var peg$posDetailsCache=[{line:1,column:1}];var peg$maxFailPos=0;var peg$maxFailExpected=[];var peg$silentFails=0;var peg$resultsCache={};var peg$ruleNames=["start","start_streaming","stmt_list","semi_optional","semi_required","stmt_list_tail","type_definition","array_bounds","array_bound","type_definition_types","datatype_custom","datatype_word_tail","type_definition_args","definition_args_loop","literal_value","literal_null","literal_date","literal_string","literal_string_single","literal_string_schar","literal_blob","literal_typed","literal_text","number_sign","literal_number_signed","literal_number","literal_number_decimal","number_decimal_node","number_decimal_full","number_decimal_fraction","number_decimal_exponent","literal_number_hex","number_hex","number_digit","bind_parameter","bind_parameter_numbered","bind_number_id","bind_parameter_named","bind_parameter_tcl","tcl_suffix","expression_exists","expression_exists_ne","expression_raise","expression_raise_args","raise_args_ignore","raise_args_message","expression_root","expression_wrapped","expression_recur","expression_array","expression_array_select","array_expr","array_expr_list","array_expr_tail","expression_unary_collate","expression_pg_cast","expression_unary","expression_unary_op","expression_collate","expression_concat","expression_multiply","expression_multiply_op","expression_add","expression_add_op","expression_shift","expression_shift_op","expression_compare","expression_compare_op","expression_equiv","expression_equiv_tails","expression_equiv_null_op","expression_equiv_op","expression_cast","type_alias","expression_case","case_expression","expression_case_when","expression_case_else","expression_postfix","expression_postfix_tail","expression_distinct","expression_like","expression_escape","expression_between","expression_between_tail","expression_is_not","expression_in","expression_in_target","expression_list_or_select","expression_and","expression","expression_list","expression_list_loop","expression_list_rest","function_call","filter_clause","function_call_args","args_list_distinct","over_clause","window_name","window_specification","source_window_name","partition_clause","error_message","stmt","stmt_modifier","modifier_query","stmt_nodes","stmt_commit","stmt_begin","commit_transaction","stmt_begin_modifier","stmt_rollback","rollback_savepoint","savepoint_name","savepoint_alt","stmt_savepoint","stmt_release","stmt_alter","alter_start","alter_action","alter_action_rename","alter_action_add","action_add_modifier","stmt_crud","stmt_core_with","clause_with","clause_with_recursive","clause_with_tables","clause_with_loop","expression_cte","select_alias","select_wrapped","stmt_select_full","stmt_set","set_local_session","set_rest","var_list","var_list_tail","var_value","stmt_show","show_target","stmt_sqlite","stmt_attach","attach_arg","stmt_detach","stmt_vacuum","vacuum_target","stmt_analyze","analyze_arg","stmt_reindex","reindex_arg","stmt_pragma","pragma_expression","pragma_value","pragma_value_literal","pragma_value_bool","pragma_bool_id","pragma_value_name","stmt_crud_types","stmt_select","stmt_core_for_locking","for_locking_items","for_locking_loop","for_locking_item","for_locking_strength","locked_rels_list","id_table_list","id_table_loop","nowait_or_skip","window_clause","window_definition_list","window_definition_loop","window_definition","stmt_core_order","stmt_core_limit","stmt_core_limit_offset","limit_offset_variant","limit_offset_variant_name","select_loop","select_loop_union","select_parts","select_parts_core","select_core_select","select_modifier","select_modifier_distinct","select_modifier_all","select_target","select_target_loop","select_core_from","stmt_core_where","select_core_group","select_core_having","select_node","select_node_star","select_node_star_qualified","select_node_aliased","select_source","source_loop_tail","select_cross_clause","select_join_clause","table_or_sub","table_or_sub_func","func_alias_clause","table_func_element_list","table_func_element","table_func_element_tail","lateral","table_qualified","table_qualified_id","table_or_sub_index_node","index_node_indexed","index_node_none","table_or_sub_sub","table_or_sub_select","alias","join_operator","join_operator_natural","join_operator_types","operator_types_hand","types_hand_outer","operator_types_misc","join_condition","join_condition_on","join_condition_using","select_parts_values","stmt_core_order_list","stmt_core_order_list_loop","stmt_core_order_list_item","nulls_order","select_star","stmt_fallback_types","stmt_insert","returning_clause","insert_keyword","insert_keyword_ins","insert_keyword_repl","insert_keyword_mod","insert_target","insert_into","insert_into_start","insert_results","opt_on_conflict","opt_on_conflict_action","opt_conf_expr","loop_columns","loop_column_tail","loop_name","insert_value","insert_value_start","insert_values_list","insert_values_loop","expression_list_wrapped","insert_default","operator_compound","compound_union","compound_union_all","stmt_update","update_start","update_fallback","update_set","update_columns","update_columns_tail","update_column","update_expression","stmt_delete","delete_start","stmt_create","create_start","create_table_only","create_index_only","create_trigger_only","create_view_only","create_virtual_only","create_table","create_table_start","create_core_tmp","create_core_ine","create_table_source","table_source_def","source_def_rowid","source_def_loop","source_def_tail","source_tbl_loop","source_def_column","source_def_name","column_type","column_constraints","column_constraint_tail","column_constraint","constraint_name","constraint_name_loop","column_constraint_types","column_constraint_foreign","column_constraint_primary","col_primary_start","col_primary_auto","column_constraint_null","constraint_null_types","constraint_null_value","column_constraint_check","column_constraint_default","column_default_values","column_constraint_collate","table_constraint","table_constraint_types","table_constraint_check","table_constraint_primary","primary_start","primary_start_normal","primary_start_unique","primary_columns","primary_columns_index","primary_columns_table","primary_column_tail","primary_column","primary_column_types","column_collate","column_collate_loop","primary_column_dir","primary_conflict","primary_conflict_start","constraint_check","table_constraint_foreign","foreign_start","foreign_clause","foreign_references","foreign_actions","foreign_actions_tail","foreign_action","foreign_action_on","action_on_action","on_action_set","on_action_cascade","on_action_none","foreign_action_match","foreign_deferrable","deferrable_initially","table_source_select","create_index","create_index_start","index_unique","index_on","create_trigger","create_trigger_start","trigger_conditions","trigger_apply_mods","trigger_apply_instead","trigger_do","trigger_do_on","trigger_do_update","do_update_of","do_update_columns","trigger_foreach","trigger_when","trigger_action","action_loop","action_loop_stmt","create_view","id_view_expression","create_view_start","create_as_select","create_virtual","create_virtual_start","virtual_module","virtual_args","virtual_args_loop","virtual_args_tail","virtual_arg_types","virtual_column_name","stmt_drop","drop_start","drop_types","drop_ie","binary_concat","binary_plus","binary_minus","binary_multiply","binary_divide","binary_mod","binary_left","binary_right","binary_and","binary_or","binary_lt","binary_gt","binary_lte","binary_gte","binary_equal","binary_notequal_a","binary_notequal_b","binary_custom","binary_lang_isnt","id_name","id_database","id_function","id_table","id_table_qualified","id_column","indirection","indirection_loop","indirection_el","indirection_attr","indirection_slice","indirection_index","slice_lbound","slice_ubound","column_unqualified","column_qualifiers","id_column_qualified","id_collation","id_savepoint","id_index","id_trigger","id_view","id_pragma","id_variable","id_cte","id_table_expression","id_constraint_table","id_constraint_column","datatype_types","datatype_text","datatype_real","datatype_real_double","datatype_numeric","datatype_integer","datatype_integer_fp","datatype_none","name_char","unicode_char","name","name_quoted","name_unquoted","name_reserved","name_bracketed","bracket_terminator","name_dblquoted","name_sglquoted","name_backticked","sym_bopen","sym_bclose","sym_popen","sym_pclose","sym_comma","sym_dot","sym_star","sym_quest","sym_sglquote","sym_dblquote","sym_backtick","sym_tilde","sym_plus","sym_minus","sym_equal","sym_amp","sym_pipe","sym_mod","sym_lt","sym_gt","sym_excl","sym_semi","sym_colon","sym_fslash","sym_bslash","sym_op","ABORT","ACTION","ADD","AFTER","ALL","ALTER","ANALYZE","AND","ARRAY","AS","ASC","ATTACH","AUTOINCREMENT","BEFORE","BEGIN","BETWEEN","BY","CASCADE","CASE","CAST","CHECK","COLLATE","COLUMN","COMMIT","CONFLICT","CONSTRAINT","CREATE","CROSS","CURRENT_DATE","CURRENT_TIME","CURRENT_TIMESTAMP","DATABASE","DEFAULT","DEFERRABLE","DEFERRED","DELETE","DESC","DETACH","DISTINCT","DROP","EACH","ELSE","END","ESCAPE","EXCEPT","EXCLUSIVE","EXISTS","EXPLAIN","FAIL","FIRST","FOR","FOREIGN","FROM","FULL","GLOB","GROUP","HAVING","IF","IGNORE","ILIKE","IMMEDIATE","IN","INDEX","INDEXED","INITIALLY","INNER","INSERT","INSTEAD","INTERSECT","INTO","IS","ISNULL","JOIN","KEY","LAST","LATERAL","LEFT","LIKE","LIMIT","LOCKED","MATCH","NATURAL","NO","NOT","NOTNULL","NOWAIT","NULL","NULLS","OF","OFFSET","ON","ONLY","OR","ORDER","OUTER","OVER","PARTITION","PLAN","PRAGMA","PRIMARY","QUERY","RAISE","READ","RECURSIVE","REFERENCES","REGEXP","REINDEX","RELEASE","RENAME","REPLACE","RESTRICT","RETURNING","RIGHT","ROLLBACK","ROW","ROWID","SAVEPOINT","SELECT","SET","SHARE","SHOW","SKIP","TABLE","TEMP","TEMPORARY","THEN","TO","TRANSACTION","TRIGGER","UNION","UNIQUE","UPDATE","USING","VACUUM","VALUES","VIEW","VIRTUAL","WHEN","WHERE","WINDOW","WITH","WITHOUT","reserved_words","reserved_word_list","reserved_critical_list","comment","comment_line","comment_block","comment_block_start","comment_block_end","comment_block_body","block_body_nodes","comment_block_feed","o","_TODO_"];var peg$descNames=[null,null,null,null,null,null,"Type Definition","Array bounds",null,null,"Custom Datatype Name",null,"Type Definition Arguments",null,null,"Null Literal","Date Literal","String Literal","Single-quoted String Literal",null,"Blob Literal","Typed literal (or bind parameter)",null,"Number Sign",null,null,null,"Decimal Literal",null,null,"Decimal Literal Exponent","Hexidecimal Literal",null,null,"Bind Parameter","Numbered Bind Parameter",null,"Named Bind Parameter","TCL Bind Parameter",null,"EXISTS Expression","EXISTS Keyword","RAISE Expression","RAISE Expression Arguments","IGNORE Keyword",null,null,null,null,"ARRAY expression","ARRAY SELECT expression","array expression","multi-dimensional array expression",null,null,"PSQL-style cast",null,null,"COLLATE Expression",null,null,null,null,null,null,null,null,null,null,null,null,null,"CAST Expression","Type Alias","CASE Expression",null,"WHEN Clause","ELSE Clause",null,null,"IS DISTINCT expression","Comparison Expression","ESCAPE Expression","BETWEEN Expression",null,null,"IN Expression",null,null,null,null,"Expression List",null,null,"Function Call","FILTER clause","Function Call Arguments",null,"OVER clause","Window name","Window specification",null,"window partition clause","Error Message","Statement","QUERY PLAN","QUERY PLAN Keyword",null,"END Transaction Statement","BEGIN Transaction Statement",null,null,"ROLLBACK Statement","TO Clause",null,null,"SAVEPOINT Statement","RELEASE Statement","ALTER TABLE Statement","ALTER TABLE Keyword",null,"RENAME TO Keyword","ADD COLUMN Keyword",null,null,"WITH Clause",null,null,null,null,"Common Table Expression",null,null,null,"SET statement",null,null,null,null,null,null,null,null,"ATTACH Statement",null,"DETACH Statement","VACUUM Statement",null,"ANALYZE Statement",null,"REINDEX Statement",null,"PRAGMA Statement",null,null,null,null,null,null,null,"SELECT Statement","SELECT ... FOR locking clause",null,null,null,null,null,null,null,null,"WINDOW clause",null,null,null,"ORDER BY Clause","LIMIT Clause","OFFSET Clause",null,null,null,"Union Operation",null,null,"SELECT Results Clause","SELECT Results Modifier",null,null,null,null,"FROM Clause","WHERE Clause","GROUP BY Clause","HAVING Clause",null,null,null,null,null,null,"CROSS JOIN Operation","JOIN Operation",null,null,null,null,null,null,null,"Qualified Table","Qualified Table Identifier","Qualfied Table Index",null,null,"SELECT Source","Subquery","Alias","JOIN Operator",null,null,null,null,null,"JOIN Constraint","Join ON Clause","Join USING Clause","VALUES Clause",null,null,"Ordering Expression",null,"Star","Fallback Type","INSERT Statement","RETURNING clause",null,"INSERT Keyword","REPLACE Keyword","INSERT OR Modifier",null,"INTO Clause","INTO Keyword","VALUES Clause","PostgreSQL INSERT ON CONFLICT clause","PostgreSQL ON CONFLICT action","PostgreSQL ON CONFLICT expression","Column List",null,"Column Name","VALUES Clause","VALUES Keyword",null,null,"Wrapped Expression List","DEFAULT VALUES Clause","Compound Operator","UNION Operator",null,"UPDATE Statement","UPDATE Keyword","UPDATE OR Modifier","SET Clause",null,null,"Column Assignment","UPDATE value expression","DELETE Statement","DELETE Keyword","CREATE Statement",null,null,null,null,null,null,"CREATE TABLE Statement",null,null,"IF NOT EXISTS Modifier",null,"Table Definition",null,null,null,null,"Column Definition",null,"Column Datatype",null,null,"Column Constraint",null,"CONSTRAINT Name",null,"FOREIGN KEY Column Constraint","PRIMARY KEY Column Constraint","PRIMARY KEY Keyword","AUTOINCREMENT Keyword",null,"UNIQUE Column Constraint","NULL Column Constraint","CHECK Column Constraint","DEFAULT Column Constraint",null,"COLLATE Column Constraint","Table Constraint",null,"CHECK Table Constraint","PRIMARY KEY Table Constraint",null,"PRIMARY KEY Keyword","UNIQUE Keyword",null,null,null,null,"Indexed Column",null,"Collation",null,"Column Direction",null,"ON CONFLICT Keyword",null,"FOREIGN KEY Table Constraint","FOREIGN KEY Keyword",null,"REFERENCES Clause",null,null,"FOREIGN KEY Action Clause",null,"FOREIGN KEY Action",null,null,null,null,"DEFERRABLE Clause",null,null,"CREATE INDEX Statement",null,null,"ON Clause","CREATE TRIGGER Statement",null,"Conditional Clause",null,null,"Conditional Action",null,null,null,null,null,"WHEN Clause","Actions Clause",null,null,"CREATE VIEW Statement",null,null,null,"CREATE VIRTUAL TABLE Statement",null,null,"Module Arguments",null,null,null,null,"DROP Statement","DROP Keyword","DROP Type","IF EXISTS Keyword","Or","Add","Subtract","Multiply","Divide","Modulo","Shift Left","Shift Right","Logical AND","Logical OR","Less Than","Greater Than","Less Than Or Equal","Greater Than Or Equal","Equal","Not Equal","Not Equal","PostgreSQL custom binary operarator","IS","Identifier","Database Identifier","Function Identifier","Table Identifier",null,"Column Identifier","value indirection",null,null,null,null,null,null,null,null,null,null,"Collation Identifier","Savepoint Identifier","Index Identifier","Trigger Identifier","View Identifier","Pragma Identifier","Variable Identifier","CTE Identifier",null,"Table Constraint Identifier","Column Constraint Identifier","Datatype Name","TEXT Datatype Name","REAL Datatype Name","DOUBLE Datatype Name","NUMERIC Datatype Name","INTEGER Datatype Name",null,"BLOB Datatype Name",null,null,null,null,null,null,null,null,null,null,null,"Open Bracket","Close Bracket","Open Parenthesis","Close Parenthesis","Comma","Period","Asterisk","Question Mark","Single Quote","Double Quote","Backtick","Tilde","Plus","Minus","Equal","Ampersand","Pipe","Modulo","Less Than","Greater Than","Exclamation","Semicolon","Colon","Forward Slash","Backslash","Operator characters",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"Line Comment","Block Comment",null,null,null,null,null,"Whitespace",null];var peg$tracer="tracer"in options?options.tracer:new peg$DefaultTracer();var peg$result;if("startRule"in options){if(!(options.startRule in peg$startRuleIndices)){throw new Error("Can't start parsing from rule \""+options.startRule+"\".");}peg$startRuleIndex=peg$startRuleIndices[options.startRule];}function text(){return input.substring(peg$savedPos,peg$currPos);}function location(){return peg$computeLocation(peg$savedPos,peg$currPos);}function expected(description,location){location=location!==undefined?location:peg$computeLocation(peg$savedPos,peg$currPos);throw peg$buildStructuredError([peg$otherExpectation(description)],input.substring(peg$savedPos,peg$currPos),location);}function error(message,location){location=location!==undefined?location:peg$computeLocation(peg$savedPos,peg$currPos);throw peg$buildSimpleError(message,location);}function peg$literalExpectation(text,ignoreCase){return{type:"literal",text:text,ignoreCase:ignoreCase};}function peg$classExpectation(parts,inverted,ignoreCase){return{type:"class",parts:parts,inverted:inverted,ignoreCase:ignoreCase};}function peg$anyExpectation(){return{type:"any"};}function peg$endExpectation(){return{type:"end"};}function peg$otherExpectation(description){return{type:"other",description:description};}function peg$computePosDetails(pos){var details=peg$posDetailsCache[pos];var p;if(details){return details;}else{p=pos-1;while(!peg$posDetailsCache[p]){p--;}details=peg$posDetailsCache[p];details={line:details.line,column:details.column};while(p<pos){if(input.charCodeAt(p)===10){details.line++;details.column=1;}else{details.column++;}p++;}peg$posDetailsCache[pos]=details;return details;}}function peg$computeLocation(startPos,endPos){var startPosDetails=peg$computePosDetails(startPos);var endPosDetails=peg$computePosDetails(endPos);return{start:{offset:startPos,line:startPosDetails.line,column:startPosDetails.column},end:{offset:endPos,line:endPosDetails.line,column:endPosDetails.column}};}function peg$fail(expected){if(peg$currPos<peg$maxFailPos){return;}if(peg$currPos>peg$maxFailPos){peg$maxFailPos=peg$currPos;peg$maxFailExpected=[];}peg$maxFailExpected.push(expected);}function peg$buildSimpleError(message,location){return new peg$SyntaxError(message,null,null,location);}function peg$buildStructuredError(expected,found,location){return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected,found),expected,found,location);}function peg$decode(s){return s.split("").map(function(ch){return ch.charCodeAt(0)-32;});}function peg$parseRule(index){var bc=peg$bytecode[index];var ip=0;var ips=[];var end=bc.length;var ends=[];var stack=[];var startPos=peg$currPos;var params;peg$tracer.trace({type:"rule.enter",rule:peg$ruleNames[index],description:peg$descNames[index],location:peg$computeLocation(startPos,startPos)});var key=peg$currPos*621+index;var cached=peg$resultsCache[key];if(cached){peg$currPos=cached.nextPos;if(cached.result!==peg$FAILED){peg$tracer.trace({type:"rule.match",rule:peg$ruleNames[index],description:peg$descNames[index],result:cached.result,location:peg$computeLocation(startPos,peg$currPos)});}else{peg$tracer.trace({type:"rule.fail",rule:peg$ruleNames[index],description:peg$descNames[index],location:peg$computeLocation(startPos,startPos)});}return cached.result;}while(true){while(ip<end){switch(bc[ip]){case 0:stack.push(peg$consts[bc[ip+1]]);ip+=2;break;case 1:stack.push(undefined);ip++;break;case 2:stack.push(null);ip++;break;case 3:stack.push(peg$FAILED);ip++;break;case 4:stack.push([]);ip++;break;case 5:stack.push(peg$currPos);ip++;break;case 6:stack.pop();ip++;break;case 7:peg$currPos=stack.pop();ip++;break;case 8:stack.length-=bc[ip+1];ip+=2;break;case 9:stack.splice(-2,1);ip++;break;case 10:stack[stack.length-2].push(stack.pop());ip++;break;case 11:stack.push(stack.splice(stack.length-bc[ip+1],bc[ip+1]));ip+=2;break;case 12:stack.push(input.substring(stack.pop(),peg$currPos));ip++;break;case 13:ends.push(end);ips.push(ip+3+bc[ip+1]+bc[ip+2]);if(stack[stack.length-1]){end=ip+3+bc[ip+1];ip+=3;}else{end=ip+3+bc[ip+1]+bc[ip+2];ip+=3+bc[ip+1];}break;case 14:ends.push(end);ips.push(ip+3+bc[ip+1]+bc[ip+2]);if(stack[stack.length-1]===peg$FAILED){end=ip+3+bc[ip+1];ip+=3;}else{end=ip+3+bc[ip+1]+bc[ip+2];ip+=3+bc[ip+1];}break;case 15:ends.push(end);ips.push(ip+3+bc[ip+1]+bc[ip+2]);if(stack[stack.length-1]!==peg$FAILED){end=ip+3+bc[ip+1];ip+=3;}else{end=ip+3+bc[ip+1]+bc[ip+2];ip+=3+bc[ip+1];}break;case 16:if(stack[stack.length-1]!==peg$FAILED){ends.push(end);ips.push(ip);end=ip+2+bc[ip+1];ip+=2;}else{ip+=2+bc[ip+1];}break;case 17:ends.push(end);ips.push(ip+3+bc[ip+1]+bc[ip+2]);if(input.length>peg$currPos){end=ip+3+bc[ip+1];ip+=3;}else{end=ip+3+bc[ip+1]+bc[ip+2];ip+=3+bc[ip+1];}break;case 18:ends.push(end);ips.push(ip+4+bc[ip+2]+bc[ip+3]);if(input.substr(peg$currPos,peg$consts[bc[ip+1]].length)===peg$consts[bc[ip+1]]){end=ip+4+bc[ip+2];ip+=4;}else{end=ip+4+bc[ip+2]+bc[ip+3];ip+=4+bc[ip+2];}break;case 19:ends.push(end);ips.push(ip+4+bc[ip+2]+bc[ip+3]);if(input.substr(peg$currPos,peg$consts[bc[ip+1]].length).toLowerCase()===peg$consts[bc[ip+1]]){end=ip+4+bc[ip+2];ip+=4;}else{end=ip+4+bc[ip+2]+bc[ip+3];ip+=4+bc[ip+2];}break;case 20:ends.push(end);ips.push(ip+4+bc[ip+2]+bc[ip+3]);if(peg$consts[bc[ip+1]].test(input.charAt(peg$currPos))){end=ip+4+bc[ip+2];ip+=4;}else{end=ip+4+bc[ip+2]+bc[ip+3];ip+=4+bc[ip+2];}break;case 21:stack.push(input.substr(peg$currPos,bc[ip+1]));peg$currPos+=bc[ip+1];ip+=2;break;case 22:stack.push(peg$consts[bc[ip+1]]);peg$currPos+=peg$consts[bc[ip+1]].length;ip+=2;break;case 23:stack.push(peg$FAILED);if(peg$silentFails===0){peg$fail(peg$consts[bc[ip+1]]);}ip+=2;break;case 24:peg$savedPos=stack[stack.length-1-bc[ip+1]];ip+=2;break;case 25:peg$savedPos=peg$currPos;ip++;break;case 26:params=bc.slice(ip+4,ip+4+bc[ip+3]).map(function(p){return stack[stack.length-1-p];});stack.splice(stack.length-bc[ip+2],bc[ip+2],peg$consts[bc[ip+1]].apply(null,params));ip+=4+bc[ip+3];break;case 27:stack.push(peg$parseRule(bc[ip+1]));ip+=2;break;case 28:peg$silentFails++;ip++;break;case 29:peg$silentFails--;ip++;break;default:throw new Error("Invalid opcode: "+bc[ip]+".");}}if(ends.length>0){end=ends.pop();ip=ips.pop();}else{break;}}peg$resultsCache[key]={nextPos:peg$currPos,result:stack[0]};if(stack[0]!==peg$FAILED){peg$tracer.trace({type:"rule.match",rule:peg$ruleNames[index],description:peg$descNames[index],result:stack[0],location:peg$computeLocation(startPos,peg$currPos)});}else{peg$tracer.trace({type:"rule.fail",rule:peg$ruleNames[index],description:peg$descNames[index],location:peg$computeLocation(startPos,startPos)});}return stack[0];}function makeArray(arr){if(!isOkay(arr)){return[];}return!Array.isArray(arr)?[arr]:arr;}function makeInteger(literal){return Number.parseInt(literal.value);}function isOkay(obj){return obj!=null;}function foldString(parts){var glue=arguments.length>1&&arguments[1]!==undefined?arguments[1]:' ';var folded=parts.filter(function(part){return isOkay(part);}).reduce(function(prev,cur){return""+prev+nodeToString(cur)+glue;},'');return folded.trim();}function foldStringWord(parts){return foldString(parts,'');}function foldStringKey(parts){return foldString(parts).toLowerCase();}function flattenAll(arr){return arr.filter(function(part){return isOkay(part);}).reduce(function(prev,cur){return prev.concat(cur);},[]);}function unescape(str){var quoteChar=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'\'';var re=new RegExp(quoteChar+"{2}",'g');return nodeToString(str).replace(re,quoteChar);}function nodeToString(){var node=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];return makeArray(node).join('');}function textNode(node){return nodeToString(node).trim();}function keyNode(node){return textNode(node).toLowerCase();}function isArrayOkay(arr){return Array.isArray(arr)&&arr.length>0&&isOkay(arr[0]);}function composeBinary(first,rest){return rest.reduce(function(left,_ref7){var _ref8=_slicedToArray(_ref7,4),x=_ref8[0],operation=_ref8[1],y=_ref8[2],right=_ref8[3];return{'type':'expression','format':'binary','variant':'operation','operation':keyNode(operation),'left':left,'right':right};},first);}peg$result=peg$parseRule(peg$startRuleIndex);if(peg$result!==peg$FAILED&&peg$currPos===input.length){return peg$result;}else{if(peg$result!==peg$FAILED&&peg$currPos<input.length){peg$fail(peg$endExpectation());}throw peg$buildStructuredError(peg$maxFailExpected,peg$maxFailPos<input.length?input.charAt(peg$maxFailPos):null,peg$maxFailPos<input.length?peg$computeLocation(peg$maxFailPos,peg$maxFailPos+1):peg$computeLocation(peg$maxFailPos,peg$maxFailPos));}}module.exports={SyntaxError:peg$SyntaxError,DefaultTracer:peg$DefaultTracer,parse:peg$parse};

},{}],3:[function(require,module,exports){
'use strict';Object.defineProperty(exports,"__esModule",{value:true});function findLastIndex(arr,func){for(var i=arr.length-1;i>=0;i-=1){if(func(arr[i])){return i;}}return-1;}function takeWhile(arr,func){var len=arr.length;var i=0;for(;i<len;i+=1){if(!func(arr[i])){return arr.slice(0,i);}}return arr;}var Tracer=exports.Tracer=function(){function Tracer(){if(!(this instanceof Tracer)){return new Tracer();}this.events=[];this.indentation=0;this.whitespaceRule=/(^whitespace)|(char$)|(^[oe]$)|(^sym\_)/i;this.statementRule=/Statement$/i;this.firstNodeRule=/(Statement|Clause)$/i;};Tracer.prototype.trace=function trace(event){var that=this,lastIndex,lastWsIndex;event.indentation=this.indentation;switch(event.type){case'rule.enter':this.events.push(event);this.indentation+=1;break;case'rule.match':this.indentation-=1;break;case'rule.fail':lastIndex=findLastIndex(this.events,function(_ref){var rule=_ref.rule;return rule===event.rule;});lastWsIndex=findLastIndex(this.events,function(e){return!that.whitespaceRule.test(e.rule);});if(that.whitespaceRule.test(event.rule)||lastIndex===lastWsIndex){this.events.splice(lastIndex,1);}this.indentation-=1;break;}};Tracer.prototype.smartError=function smartError(err){var that=this,message,location,chain,chainDetail,firstNode,bestNode={indentation:-1},deep=false,stmts=0,namedEvents=this.events.filter(function(e){return e.description!=null&&!that.whitespaceRule.test(e.rule);}).reverse();chain=takeWhile(namedEvents,function(elem){if(/^(sym\_semi)$/i.test(elem.rule)){stmts+=1;}if(stmts>1){return false;}if(!deep){if(elem.indentation>bestNode.indentation){bestNode=elem;}else{deep=true;}}else if(/^(stmt)$/i.test(elem.rule)){deep=true;return true;}return true;});if(chain.length){location=bestNode.location;firstNode=chain.find(function(elem){return that.firstNodeRule.test(elem.description)&&elem.description!==bestNode.description&&elem.indentation!==bestNode.indentation;});if(firstNode!=null){if(this.statementRule.test(bestNode.description)&&this.statementRule.test(firstNode.description)){chainDetail=firstNode.description;}else{chainDetail=bestNode.description+' ('+firstNode.description+')';}}else{chainDetail=bestNode.description;}message='Syntax error found near '+chainDetail;Object.assign(err,{'message':message,'location':location});}return err;};return Tracer;}();

},{}]},{},[1])(1)
});
