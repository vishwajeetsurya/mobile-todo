"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Priority {
    constructor() {
        this.patterns = [];
        this.priorityByCodeObjectGroupId = new Map();
        this.sequenceByCodeObjectGroupId = new Map();
        this.priorityByCodeObjectId = new Map();
        this.basePriority = 1;
    }
    enrollPattern(pattern) {
        this.patterns.push(pattern);
        this.priorityByCodeObjectGroupId.set(pattern, this.patterns.length * 1000);
        this.sequenceByCodeObjectGroupId.set(pattern, 0);
    }
    expandPattern(pattern, codeObjectIds) {
        const priority = this.priorityByCodeObjectGroupId.get(pattern);
        if (priority === undefined) {
            console.log(`No priority for pattern ${pattern}`);
            return;
        }
        codeObjectIds.forEach((id) => this.priorityByCodeObjectGroupId.set(id, priority));
    }
    setPriority(codeObjectId, priority) {
        this.priorityByCodeObjectGroupId.set(codeObjectId, priority);
    }
    priorityOf(codeObject) {
        let priority = this.priorityByCodeObjectId.get(codeObject.fqid);
        if (priority)
            return priority;
        const groupPriority = this.groupPriority(codeObject);
        let sequence = this.sequenceByCodeObjectGroupId.get(codeObject.fqid);
        if (sequence === undefined) {
            sequence = 0;
            this.sequenceByCodeObjectGroupId.set(codeObject.fqid, sequence);
        }
        else {
            sequence += 1;
        }
        priority = groupPriority.basePriority + sequence;
        this.priorityByCodeObjectId.set(codeObject.fqid, priority);
        return priority;
    }
    groupPriority(codeObject) {
        let co = codeObject;
        while (co) {
            const priority = this.priorityByCodeObjectGroupId.get(co.fqid);
            if (priority !== undefined)
                return { groupId: co.fqid, basePriority: priority };
            co = co.parent;
        }
        const basePriority = this.basePriority * 1000;
        this.basePriority += 1;
        this.priorityByCodeObjectGroupId.set(codeObject.fqid, basePriority);
        return { groupId: codeObject.fqid, basePriority: basePriority };
    }
}
exports.default = Priority;
