import { CodeObject } from './types';
import Priority from './priority';
import { AppMap } from '@appland/models';
export declare type CodeObjectId = string;
export interface SequenceDiagramOptions {
    exclude?: CodeObjectId[];
    expand?: CodeObjectId[];
    priority?: Record<CodeObjectId, number>;
    require?: CodeObjectId[];
    loops?: boolean;
}
export default class Specification {
    private priority;
    private includedCodeObjectIds;
    private requiredCodeObjectIds;
    loops: boolean;
    private static readonly DefaultActorTypes;
    constructor(priority: Priority, includedCodeObjectIds: Set<CodeObjectId>, requiredCodeObjectIds: Set<CodeObjectId>);
    get hasRequiredCodeObjects(): boolean;
    priorityOf(codeObject: CodeObject): number;
    isIncludedCodeObject(codeObject: CodeObject): CodeObject | undefined;
    isRequiredCodeObject(codeObject: CodeObject): CodeObject | undefined;
    static build(appmap: AppMap, options: SequenceDiagramOptions): Specification;
    protected static matchCodeObject(codeObjectIds: Set<CodeObjectId>, codeObject: CodeObject): CodeObject | undefined;
}
