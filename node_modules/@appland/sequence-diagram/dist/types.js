"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MoveType = exports.Move = exports.Specification = exports.format = exports.Formatters = exports.FormatType = exports.getActors = exports.validateDiagram = exports.unparseDiagram = exports.diff = exports.buildDiffDiagram = exports.buildDiagram = exports.ValidationResult = exports.hasAncestor = exports.findAncestor = exports.setParent = exports.parseRoute = exports.nodeResult = exports.nodeName = exports.actionActors = exports.isQuery = exports.isClientRPC = exports.isServerRPC = exports.isFunction = exports.isLoop = exports.DiffMode = exports.NodeType = void 0;
var NodeType;
(function (NodeType) {
    NodeType[NodeType["Loop"] = 1] = "Loop";
    NodeType[NodeType["Conditional"] = 2] = "Conditional";
    NodeType[NodeType["Function"] = 3] = "Function";
    NodeType[NodeType["ServerRPC"] = 4] = "ServerRPC";
    NodeType[NodeType["ClientRPC"] = 5] = "ClientRPC";
    NodeType[NodeType["Query"] = 6] = "Query";
})(NodeType = exports.NodeType || (exports.NodeType = {}));
var DiffMode;
(function (DiffMode) {
    DiffMode[DiffMode["Insert"] = 1] = "Insert";
    DiffMode[DiffMode["Delete"] = 2] = "Delete";
    DiffMode[DiffMode["Change"] = 3] = "Change";
})(DiffMode = exports.DiffMode || (exports.DiffMode = {}));
const isLoop = (action) => action.nodeType === NodeType.Loop;
exports.isLoop = isLoop;
const isFunction = (action) => action.nodeType === NodeType.Function;
exports.isFunction = isFunction;
const isServerRPC = (action) => action.nodeType === NodeType.ServerRPC;
exports.isServerRPC = isServerRPC;
const isClientRPC = (action) => action.nodeType === NodeType.ClientRPC;
exports.isClientRPC = isClientRPC;
const isQuery = (action) => action.nodeType === NodeType.Query;
exports.isQuery = isQuery;
const actionActors = (action) => {
    if (!action)
        return [];
    if ((0, exports.isFunction)(action) || (0, exports.isClientRPC)(action) || (0, exports.isQuery)(action))
        return [action.caller, action.callee];
    if ((0, exports.isServerRPC)(action))
        return [undefined, action.callee];
    return [];
};
exports.actionActors = actionActors;
const nodeName = (action) => {
    if (!action)
        return 'undefined';
    switch (action.nodeType) {
        case NodeType.Function:
            return action.name;
        case NodeType.ServerRPC:
        case NodeType.ClientRPC:
            return action.route;
        case NodeType.Query:
            return action.query;
        case NodeType.Loop:
            return 'loop';
    }
};
exports.nodeName = nodeName;
const nodeResult = (action) => {
    if (!action)
        return undefined;
    switch (action.nodeType) {
        case NodeType.Function:
            if (!action.returnValue)
                return;
            if (action.returnValue.returnValueType)
                return action.returnValue.returnValueType.name;
            if (action.returnValue.raisesException)
                return 'exception!';
            break;
        case NodeType.ServerRPC:
            return action.status ? action.status.toString() : '<unknown-status>';
        case NodeType.ClientRPC:
            return action.status ? action.status.toString() : '<unknown-status>';
        case NodeType.Query:
            return 'void';
    }
};
exports.nodeResult = nodeResult;
function parseRoute(route) {
    const tokens = route.split(/\s+/);
    return {
        method: tokens[0],
        path: tokens.slice(1).join(' '),
    };
}
exports.parseRoute = parseRoute;
function setParent(action, parent) {
    if (parent)
        action.parent = parent;
    action.children.forEach((child) => setParent(child, action));
}
exports.setParent = setParent;
function findAncestor(action, test) {
    let parent = action.parent;
    while (parent) {
        if (test(parent))
            return parent;
        parent = parent.parent;
    }
}
exports.findAncestor = findAncestor;
function hasAncestor(action, test) {
    return findAncestor(action, test) !== undefined;
}
exports.hasAncestor = hasAncestor;
var ValidationResult;
(function (ValidationResult) {
    ValidationResult[ValidationResult["Invalid"] = 0] = "Invalid";
    ValidationResult[ValidationResult["Valid"] = 1] = "Valid";
    ValidationResult[ValidationResult["AppMap"] = 2] = "AppMap";
})(ValidationResult = exports.ValidationResult || (exports.ValidationResult = {}));
const buildDiagram_1 = __importStar(require("./buildDiagram"));
exports.buildDiagram = buildDiagram_1.default;
Object.defineProperty(exports, "getActors", { enumerable: true, get: function () { return buildDiagram_1.getActors; } });
const buildDiffDiagram_1 = __importDefault(require("./buildDiffDiagram"));
exports.buildDiffDiagram = buildDiffDiagram_1.default;
const diff_1 = __importDefault(require("./diff"));
exports.diff = diff_1.default;
const unparseDiagram_1 = __importDefault(require("./unparseDiagram"));
exports.unparseDiagram = unparseDiagram_1.default;
const validateDiagram_1 = __importDefault(require("./validateDiagram"));
exports.validateDiagram = validateDiagram_1.default;
var FormatType;
(function (FormatType) {
    FormatType["JSON"] = "json";
    FormatType["PlantUML"] = "plantuml";
    FormatType["Text"] = "text";
})(FormatType = exports.FormatType || (exports.FormatType = {}));
exports.Formatters = [FormatType.JSON, FormatType.PlantUML, FormatType.Text];
const formatter_1 = __importDefault(require("./formatter"));
exports.format = formatter_1.default;
const specification_1 = __importDefault(require("./specification"));
Object.defineProperty(exports, "Specification", { enumerable: true, get: function () { return specification_1.default; } });
const diff_2 = require("./diff");
Object.defineProperty(exports, "Move", { enumerable: true, get: function () { return diff_2.Move; } });
Object.defineProperty(exports, "MoveType", { enumerable: true, get: function () { return diff_2.MoveType; } });
