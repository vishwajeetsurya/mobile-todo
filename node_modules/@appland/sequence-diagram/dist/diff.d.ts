import { Action, Diagram } from './types';
declare type ActionIndex = number;
export declare enum MoveType {
    AdvanceBoth = 1,
    DeleteLeft = 2,
    InsertRight = 3,
    Change = 4
}
export declare type Position = {
    lNode: ActionIndex;
    rNode: ActionIndex;
};
export declare class Move {
    moveType: MoveType;
    lNode: number;
    rNode: number;
    cost: number;
    constructor(position: Position, moveType: MoveType);
}
export declare type Diff = {
    baseActions: Action[];
    headActions: Action[];
    moves: Move[];
};
export declare type DiffOptions = {
    verbose?: boolean;
};
/**
 * Start with the graph state (-1, -1) of each Diagram.
 * Enqueue moves from the inital state.
 * Pull the lowest cost move from the queue
 *    If the known cost to the new location is undefined, or if the cost via this move is less than the known cost
 *      Store the step to the new state
 *      Store the total cost as the minimum cost
 *      Enqueue the possible next moves
 */
export default function diff(baseDiagram: Diagram, headDiagram: Diagram, diffOptions?: DiffOptions): Diff;
export {};
