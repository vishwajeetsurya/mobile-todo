"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("./types");
function validateDiagram(diagramData) {
    return __awaiter(this, void 0, void 0, function* () {
        // Check if it's likely an AppMap object
        if (diagramData &&
            Object.prototype.hasOwnProperty.call(diagramData, 'metadata') &&
            Object.prototype.hasOwnProperty.call(diagramData, 'classMap') &&
            Object.prototype.hasOwnProperty.call(diagramData, 'events')) {
            return types_1.ValidationResult.AppMap;
        }
        if (!Array.isArray(diagramData.actors) || !Array.isArray(diagramData.rootActions)) {
            console.error('Invalid Diagram: actors and rootActions must be arrays.');
            return types_1.ValidationResult.Invalid;
        }
        const validateActor = (actor) => {
            if (typeof actor.id !== 'string' ||
                typeof actor.name !== 'string' ||
                typeof actor.order !== 'number') {
                console.error('Invalid Actor:', actor);
                return false;
            }
            return true;
        };
        const validateAction = (action) => {
            if (!action ||
                !Object.values(types_1.NodeType).includes(action.nodeType) ||
                typeof action.digest !== 'string' ||
                typeof action.subtreeDigest !== 'string' ||
                !Array.isArray(action.children) ||
                !Array.isArray(action.eventIds)) {
                console.error('Invalid Action:', action);
                return false;
            }
            // Validate children recursively
            for (const child of action.children) {
                if (!validateAction(child)) {
                    return false;
                }
            }
            // Validate specific nodeType cases
            if ((0, types_1.isLoop)(action) && typeof action.count !== 'number') {
                console.error('Invalid Loop:', action);
                return false;
            }
            if (((0, types_1.isFunction)(action) || (0, types_1.isServerRPC)(action) || (0, types_1.isClientRPC)(action) || (0, types_1.isQuery)(action)) &&
                typeof action.callee !== 'string') {
                console.error(`Invalid ${types_1.NodeType[action.nodeType]}:`, action);
                return false;
            }
            return true;
        };
        for (const actor of diagramData.actors) {
            if (!validateActor(actor)) {
                return types_1.ValidationResult.Invalid;
            }
        }
        for (const action of diagramData.rootActions) {
            if (!validateAction(action)) {
                return types_1.ValidationResult.Invalid;
            }
        }
        return types_1.ValidationResult.Valid;
    });
}
exports.default = validateDiagram;
